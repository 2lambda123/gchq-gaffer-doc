{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gaffer 2 These Docs are a work in progress for Gaffer v2, the docs for Gaffer v1 can be found here . For information and migration steps for Deprecated classes which have been removed in Gaffer 2 alpha 1, please see the deprecations page . For a summary of the current Gaffer 2 alpha roadmap, including migration steps, please see the Gaffer 2 Changelist . For information on logging in Gaffer and historic use of Log4j, please see this page . Licence Gaffer is licensed under the Apache 2 licence and is covered by Crown Copyright .","title":"Home"},{"location":"#gaffer-2","text":"These Docs are a work in progress for Gaffer v2, the docs for Gaffer v1 can be found here . For information and migration steps for Deprecated classes which have been removed in Gaffer 2 alpha 1, please see the deprecations page . For a summary of the current Gaffer 2 alpha roadmap, including migration steps, please see the Gaffer 2 Changelist . For information on logging in Gaffer and historic use of Log4j, please see this page .","title":"Gaffer 2"},{"location":"#licence","text":"Gaffer is licensed under the Apache 2 licence and is covered by Crown Copyright .","title":"Licence"},{"location":"changelist/","text":"Gaffer 2 Changelist Below is a summary of intended changes that will be made in Gaffer version 2. Note: this represents the current roadmap which is not final (also available on GitHub ) but the features may change . Alpha 1 | released Removal of Deprecated code All of Gaffer 1's deprecated code has been removed. Please see the deprecations page for full details. Removal of HBase and Parquet stores The HBase and Parquet stores have been removed from Gaffer in version 2. We made posts for both the HBase and Parquet stores to understand the levels of usage. It was then decided to remove both stores as this would make introducing various improvements easier in the long term. HBase and Parquet remain available in Gaffer version 1. In the future, they could be reimplemented for Gaffer 2, though we do not plan to currently. Alpha 2 | released Dependency Upgrades Dependencies have been updated, where possible to the latest version, removing vulnerabilities. Please see the dependencies page for full details. Gaffer now builds with Java 8 and Java 11 There is now a maven profile that will swap dependency versions so you can build Gaffer with Java 11. The code has also been updated to build with both Java versions. Removal of CloseableIterable The CloseableIterable class has been removed so Operations like GetAllElements now return an Iterable instead, but the result still implements Closeable. Known issues The road traffic example rest has a bug in this release that means the example data isn't loaded in. This means that the gafferpy tests will fail as there is no data, but it still works. Future alphas New Accumulo 2 Store There will be a new Accumulo 2 Store added that uses Hadoop 3 and Accumulo 2. This store will be able to federate to Gaffer 2 Accumulo 1 stores. Federated Store improvements and fixes Multiple bug fixes and improvements to the Federated Store. Full details TBD. Named Operation Improvements Some changes and improvements to Named Operations are planned. Full details TBD.","title":"Changelist"},{"location":"changelist/#gaffer-2-changelist","text":"Below is a summary of intended changes that will be made in Gaffer version 2. Note: this represents the current roadmap which is not final (also available on GitHub ) but the features may change .","title":"Gaffer 2 Changelist"},{"location":"changelist/#alpha-1-released","text":"","title":"Alpha 1 | released"},{"location":"changelist/#removal-of-deprecated-code","text":"All of Gaffer 1's deprecated code has been removed. Please see the deprecations page for full details.","title":"Removal of Deprecated code"},{"location":"changelist/#removal-of-hbase-and-parquet-stores","text":"The HBase and Parquet stores have been removed from Gaffer in version 2. We made posts for both the HBase and Parquet stores to understand the levels of usage. It was then decided to remove both stores as this would make introducing various improvements easier in the long term. HBase and Parquet remain available in Gaffer version 1. In the future, they could be reimplemented for Gaffer 2, though we do not plan to currently.","title":"Removal of HBase and Parquet stores"},{"location":"changelist/#alpha-2-released","text":"","title":"Alpha 2 | released"},{"location":"changelist/#dependency-upgrades","text":"Dependencies have been updated, where possible to the latest version, removing vulnerabilities. Please see the dependencies page for full details.","title":"Dependency Upgrades"},{"location":"changelist/#gaffer-now-builds-with-java-8-and-java-11","text":"There is now a maven profile that will swap dependency versions so you can build Gaffer with Java 11. The code has also been updated to build with both Java versions.","title":"Gaffer now builds with Java 8 and Java 11"},{"location":"changelist/#removal-of-closeableiterable","text":"The CloseableIterable class has been removed so Operations like GetAllElements now return an Iterable instead, but the result still implements Closeable.","title":"Removal of CloseableIterable"},{"location":"changelist/#known-issues","text":"The road traffic example rest has a bug in this release that means the example data isn't loaded in. This means that the gafferpy tests will fail as there is no data, but it still works.","title":"Known issues"},{"location":"changelist/#future-alphas","text":"","title":"Future alphas"},{"location":"changelist/#new-accumulo-2-store","text":"There will be a new Accumulo 2 Store added that uses Hadoop 3 and Accumulo 2. This store will be able to federate to Gaffer 2 Accumulo 1 stores.","title":"New Accumulo 2 Store"},{"location":"changelist/#federated-store-improvements-and-fixes","text":"Multiple bug fixes and improvements to the Federated Store. Full details TBD.","title":"Federated Store improvements and fixes"},{"location":"changelist/#named-operation-improvements","text":"Some changes and improvements to Named Operations are planned. Full details TBD.","title":"Named Operation Improvements"},{"location":"dependencies/","text":"Dependency Upgrades This page lists the dependencies that have been upgraded as part of Gaffer 2. Assertj: 3.20.2 -> 3.22.0 Junit5: 5.6.0 -> 5.8.2 Mockito: 3.3.3 -> 4.3.1 Slf4j: 1.7.25 -> 1.7.36 Log4j: 1.2.17 -> Reload4j: 1.2.18.3 Koryphe: 1.14.0 -> 2.1.0 Avro: 1.7.7 -> 1.8.2 Jackson: 2.6.5 -> 2.11.4 Hazelcast: 3.8 -> 5.1 Spring Boot: 1.3.2 -> 2.5.12 Spring API Swagger: 2.6.0 -> 3.0.0 Commons-codec: 1.6 -> 1.15 Commons-io: 2.7 -> 2.11.0 Commons-lang: 3.3.2 -> 3.12.0 Commons-logging: 1.1.3 -> 1.2 Commons-math: 2.1 -> 2.2 Commons-math3: 3.4.1 -> 3.6.1 Commons-csv: 1.4 -> 1.9.0 Curator: 2.6.0 -> 2.11.1 Javassist: 3.19.0-GA -> 3.28.0-GA Jersey: 2.25 -> 2.25.1 Paranamer: 2.6 -> 2.8 Reflections: 0.9.10 -> 0.9.12","title":"Dependencies"},{"location":"dependencies/#dependency-upgrades","text":"This page lists the dependencies that have been upgraded as part of Gaffer 2. Assertj: 3.20.2 -> 3.22.0 Junit5: 5.6.0 -> 5.8.2 Mockito: 3.3.3 -> 4.3.1 Slf4j: 1.7.25 -> 1.7.36 Log4j: 1.2.17 -> Reload4j: 1.2.18.3 Koryphe: 1.14.0 -> 2.1.0 Avro: 1.7.7 -> 1.8.2 Jackson: 2.6.5 -> 2.11.4 Hazelcast: 3.8 -> 5.1 Spring Boot: 1.3.2 -> 2.5.12 Spring API Swagger: 2.6.0 -> 3.0.0 Commons-codec: 1.6 -> 1.15 Commons-io: 2.7 -> 2.11.0 Commons-lang: 3.3.2 -> 3.12.0 Commons-logging: 1.1.3 -> 1.2 Commons-math: 2.1 -> 2.2 Commons-math3: 3.4.1 -> 3.6.1 Commons-csv: 1.4 -> 1.9.0 Curator: 2.6.0 -> 2.11.1 Javassist: 3.19.0-GA -> 3.28.0-GA Jersey: 2.25 -> 2.25.1 Paranamer: 2.6 -> 2.8 Reflections: 0.9.10 -> 0.9.12","title":"Dependency Upgrades"},{"location":"deprecations/","text":"Deprecations This page describes deprecated code which has been removed in Gaffer 2 and how to migrate to better equivalents. Each heading for a section below refers to a classname from uk.gov.gchq.gaffer where there have been changes or where that class has been removed entirely. The section headings link to the code on GitHub for that class (as of the Gaffer 1.21.1 release). Deprecations impacting the serialisers used in schemas are listed first, followed by changes to Seed Matching and changes to Traits . Other deprecations are then listed in alphabetical order . Serialisers Migrating away from deprecated Serialisers Various deprecated serialisers have been removed completely (details below). If any of these are being used in an existing schema, a new graph and schema will need to be created (see below for replacement serialisers to use) and data from existing graphs migrated. Data will need to be migrated (export and reimport) from graphs using deprecated serialisers before upgrading to Gaffer v2. It is essential to migrate data stored using deprecated serialisers. Simply replacing these serialisers is not enough because this will prevent existing data from being read and potentially put the backing store into a corrupted state . Preservation of ordering When using an ordered store (such as Accumulo), all serialisers used on vertices must preserve order. As such, compactRaw serialisers (which do not preserve order) cannot be used on vertices in ordered stores. However, when preserving order is not required, such as for properties, compactRaw serialisers are the most effective solution and should always be used. Using an ordered serialiser on a property would reduce performance without providing any benefit. See the schemas documentation for more detail . serialisation.implementation.raw.RawDateSerialiser This class has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDateSerialiser instead - note that this will preserve order. serialisation.DateSerialiser This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDateSerialiser instead - note that this will preserve order. This doesn't implement .deserialiseString(String) , instead use new Date(Long.parseLong(value)) in place of this. serialisation.implementation.raw.RawDoubleSerialiser This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDoubleSerialiser instead - note that this will preserve order. serialisation.DoubleSerialiser This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDoubleSerialiser instead - note that this will preserve order. This doesn't implement .deserialiseString(String) , instead use Double.parseDouble(value) in place of this. serialisation.implementation.raw.RawFloatSerialiser This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedFloatSerialiser instead - note that this will preserve order. serialisation.FloatSerialiser This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedFloatSerialiser instead - note that this will preserve order. serialisation.IntegerSerialiser This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser instead, this will preserve order. If object ordering does not need to be preserved, uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawIntegerSerialiser could also be used instead. Neither of these implement .deserialiseString(String) , instead use Integer.parseInt(value) in place of this. serialisation.implementation.raw.RawIntegerSerialiser This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser instead, this will preserve order. If object ordering does not need to be preserved, uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawIntegerSerialiser should instead be used. serialisation.LongSerialiser This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedLongSerialiser instead, this will preserve order. If object ordering does not need to be preserved, uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawLongSerialiser could also be used instead. serialisation.implementation.raw.RawLongSerialiser This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedLongSerialiser instead, this will preserve order. If object ordering does not need to be preserved, uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawLongSerialiser should instead be used. serialisation.ToBytesSerialiser The method deserialise(byte[]) has been marked as deprecated. It cannot be deleted as it is needed to implement the Serialiser interface. It is recommended for speed/performance to use the other implementation with an offset and a length - deserialise(byte[], int, int) . serialisation.ToBytesViaStringDeserialiser The method deserialise(byte[]) has been marked as deprecated. It cannot be deleted as it is needed to implement the Serialiser interface. It is recommended for speed/performance to use the other implementation with an offset and a length - deserialise(byte[], int, int) . Removal of Seed Matching operation.SeedMatching This class has been removed. Use a View instead. See the Gaffer v1 docs for more detail on how to replace seed matching with a view. Changes to Store Traits store.Store The method getTraits() has been removed. Use Store.execute(Operation, Context) with the GetTraits operation instead. The method hasTrait(StoreTrait) has been removed. Use Store.execute(Operation, Context) with the HasTrait operation instead. federatedstore.FederatedGraphStorage The method getTraits(GetTraits, Context) has been removed. Use Store.execute(Operation, Context) with the GetTraits operation instead. federatedstore.FederatedStore The methods getTraits() and getTraits(GetTraits, Context) have been removed. Use Store.execute(Operation, Context) with the GetTraits operation instead. All other Deprecations accumulostore.AccumuloProperties The TABLE setting/variable plus the methods getTable() and setTable(String) have been removed. For getTable() , uk.gov.gchq.gaffer.accumulostore.getTableName() could be used instead. A graphId should be supplied instead of setting TABLE directly. accumulostore.MockAccumuloStore This class has been removed. For in memory graphs, use uk.gov.gchq.gaffer.mapstore.MapStore instead. For tests use uk.gov.gchq.gaffer.accumulostore.MiniAccumuloStore instead. commonutil.TestTypes This class has been removed. Use the equivalent TestTypes class in the store module uk.gov.gchq.gaffer.store.TestTypes instead. data.elementdefinition.view.NamedViewDetail The method hasWriteAccess(final String userId, final Set<String> opAuths, final String adminAuth) has been removed. Use hasWriteAccess(final User user, final String adminAuth) instead. data.elementdefinition.view.ViewElementDefinition The method setAggregator(final ElementAggregator aggregator) has been removed. A ViewElementDefinition should be constructed using the builder uk.gov.gchq.gaffer.data.elementdefinition.view.ViewElementDefinition.Builder instead. federatedstore.FederatedAccess The method isAddingUser(User) has been removed. Use hasReadAccess(User user, String adminAuth) / hasWriteAccess(User user, String adminAuth) instead. federatedstore.FederatedGraphStorage The methods getAllIdsAsAdmin() , getAllGraphAndAccessAsAdmin(List<String>) and changeGraphAccessAsAdmin(String, FederatedAccess) have all been removed. The method remove(String graphId) has been removed. The following can be used instead: remove(String graphId, User user) remove(String graphId, User user, String adminAuth) remove(String graphId, Predicate<Entry<FederatedAccess, Set<Graph>>> entryPredicateForGraphRemoval) federatedstore.FederatedStore The method updateOperationForGraph(Operation, Graph) has been removed. Use FederatedStoreUtil.updateOperationForGraph(Operation, Graph) instead. The method addGraphs(Set<String> graphAuths, String addingUserId, GraphSerialisable... graphs) has been removed. The following can be used instead: addGraphs(Set<String> graphAuths, String addingUserId, boolean isPublic, GraphSerialisable... graphs) addGraphs(Set<String> graphAuths, String addingUserId, boolean isPublic, boolean disabledByDefault, GraphSerialisable... graphs) addGraphs(Set<String> graphAuths, String addingUserId, boolean isPublic, boolean disabledByDefault, AccessPredicate readAccessPredicate, AccessPredicate writeAccessPredicate, GraphSerialisable... graphs) addGraphs(FederatedAccess access, GraphSerialisable... graphs) federatedstore.operation.RemoveGraph The method Builder.setGraphId(final String graphId) has been removed. Use Builder.graphId(final String graphId) which has identical behaviour instead. graph.Graph The methods Builder.graphId , Builder.library , Builder.view , Builder.addHook , Builder.addHooks have all been removed in all forms. Instead of using these methods, use .config() to set the graphConfig . hdfs.operation.MapReduce The methods getNumReduceTasks() and setNumReduceTasks(Integer) have been removed. Gaffer\u2019s operations that inherit MapReduce did not make use of numReduceTasks , either setting it to a constant number in the JobFactory or using Accumulo to automatically set the number (recommended for performance) and using min/max to keep it within a range. Therefore, numReduceTasks , getNumReduceTasks and setNumReduceTasks have been removed from this interface. hdfs.operation.AddElementsFromHdfs The methods getNumReduceTasks() and setNumReduceTasks(Integer) have been removed. The number of reduce tasks should not be set. By default the number of reduce tasks should match the number of tablets. Use minimum and maximum reduce tasks to specify boundaries for the number of reduce tasks. hdfs.operation.SampleDataForSplitPoints The methods getNumReduceTasks() and setNumReduceTasks(Integer) have been removed. These methods were not required as NumReduceTasks was always set to 1 in any case. jobtracker.JobDetail The constructors which took userId as a String have been removed. Instead, a User ( uk.gov.gchq.gaffer.user.User ) should be used in its place. See the Builder for User . getUserId and setUserId have also been removed. For getting the UserId , getUser().getUserId() can be used instead. See the Javadoc for User . jsonserialisation.JSONSerialiser The method update(final String jsonSerialiserClass, final String jsonSerialiserModules) has been removed. Use update(final String jsonSerialiserClass, final String jsonSerialiserModules, final Boolean strictJson) instead. Passing strictJson as null will result in the same behaviour. operation.Operation The method asOperationChain(final Operation operation) has been removed. Use OperationChain.wrap with the Operation instead. operation.impl.GetWalks The method Builder.operation has been removed. Use the vararg method Builder.addOperations instead. operation.impl.SplitStore This class has been removed. It is replaced by SplitStoreFromFile which is identical except in name. operation.impl.join.methods.JoinFunction The method join(final Iterable keys, final String keyName, final String matchingValuesName, final Match match, final Boolean flatten) which was not implemented has been removed. rest.SystemProperty GRAPH_ID , GRAPH_HOOKS_PATH , GRAPH_LIBRARY_PATH and GRAPH_LIBRARY_CONFIG have been removed. These config options have been removed in favour of providing a graphConfig JSON and using GRAPH_CONFIG_PATH instead. rest.service.v2.example.ExamplesFactory This class has been removed. It is replaced by uk.gov.gchq.gaffer.rest.factory.ExamplesFactory , which can be used instead. store.StoreProperties Store ID ( gaffer.store.id ) and related methods ( getId() + setId(String) ) have been removed. The ID is instead set in GraphLibrary when adding (with add ) the StoreProperties . See the Javadoc for GraphLibrary for more detail. store.Context The private constructor Context(final User user, final Map<String, Object> config, final String jobId) has been removed; along with the jobId(String) method. Use Context(final User user, final Map<String, Object> config) instead. This does not support supplying the Job ID, this will be set automatically. To get the Job ID use .getJobId() . store.schema.TypeDefinition The method getSerialiserClass() has been removed. Instead, use getSerialiser() with .getClass() and related methods. The method setSerialiserClass(String) has been removed. Instead, set the Serialiser directly using setSerialiser(Serialiser) . store.schema.Schema Schema ID ( gaffer.store.id ) and related methods have been removed. The ID is now defined in GraphLibrary when adding the schema. timestampProperty and related methods have been removed. Instead, this is specified by setting \"config\": {\"timestampProperty\": \"timestamp\"} (where \"timestamp\" is the property name to use as a time stamp) in the Schema. See this example schema for more info. The method getVertexSerialiserClass() has been removed. It can be replaced by calling vertexSerialiser.getClass() and converting the result as appropriate, e.g. getVertexSerialiserClass() used SimpleClassNameIdResolver.getSimpleClassName(vertexSerialiser.getClass()) . store.library.GraphLibrary The method addSchema(final Schema schema) has been removed. Use addSchema(final String id, final Schema schema) instead. The method addProperties(final StoreProperties properties) has been removed. Use addProperties(final String id, final StoreProperties properties) instead. Both of these now require the schema ID to be supplied. store.operation.OperationChainValidator The method validateViews(final Operation op, final ValidationResult validationResult, final Schema schemaNotUsed, final Store store) has been removed. Use validateViews(final Operation op, final User user, final Store store, final ValidationResult validationResult) instead, passing user as null will result in the same behaviour. The method validateComparables(final Operation op, final ValidationResult validationResult, final Schema schemaNotUsed, final Store store) has been removed. Use validateComparables(final Operation op, final User user, final Store store, final ValidationResult validationResult) instead, passing user as null will result in the same behaviour. store.operation.handler.named.cache.NamedViewCache The method deleteNamedView(final String name) has been removed. Use deleteNamedView(final String name, final User user) instead, passing user as null will result in the same behaviour. The method getNamedView(final String name) has been removed. Use getNamedView(final String name, final User user) instead. The method getAllNamedViews() has been removed. Use getAllNamedViews(final User user) instead. types.IntegerFreqMap This class has been removed. Use uk.gov.gchq.gaffer.types.FreqMap instead, this is identical except for using Long rather than Integer. types.function.IntegerFreqMapAggregator This class has been removed. Use uk.gov.gchq.gaffer.types.function.FreqMapAggregator instead. serialisation.IntegerFreqMapSerialiser This class has been removed. Use uk.gov.gchq.gaffer.serialisation.FreqMapSerialiser instead.","title":"Deprecations"},{"location":"deprecations/#deprecations","text":"This page describes deprecated code which has been removed in Gaffer 2 and how to migrate to better equivalents. Each heading for a section below refers to a classname from uk.gov.gchq.gaffer where there have been changes or where that class has been removed entirely. The section headings link to the code on GitHub for that class (as of the Gaffer 1.21.1 release). Deprecations impacting the serialisers used in schemas are listed first, followed by changes to Seed Matching and changes to Traits . Other deprecations are then listed in alphabetical order .","title":"Deprecations"},{"location":"deprecations/#serialisers","text":"","title":"Serialisers"},{"location":"deprecations/#migrating-away-from-deprecated-serialisers","text":"Various deprecated serialisers have been removed completely (details below). If any of these are being used in an existing schema, a new graph and schema will need to be created (see below for replacement serialisers to use) and data from existing graphs migrated. Data will need to be migrated (export and reimport) from graphs using deprecated serialisers before upgrading to Gaffer v2. It is essential to migrate data stored using deprecated serialisers. Simply replacing these serialisers is not enough because this will prevent existing data from being read and potentially put the backing store into a corrupted state .","title":"Migrating away from deprecated Serialisers"},{"location":"deprecations/#preservation-of-ordering","text":"When using an ordered store (such as Accumulo), all serialisers used on vertices must preserve order. As such, compactRaw serialisers (which do not preserve order) cannot be used on vertices in ordered stores. However, when preserving order is not required, such as for properties, compactRaw serialisers are the most effective solution and should always be used. Using an ordered serialiser on a property would reduce performance without providing any benefit. See the schemas documentation for more detail .","title":"Preservation of ordering"},{"location":"deprecations/#serialisationimplementationrawrawdateserialiser","text":"This class has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDateSerialiser instead - note that this will preserve order.","title":"serialisation.implementation.raw.RawDateSerialiser"},{"location":"deprecations/#serialisationdateserialiser","text":"This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDateSerialiser instead - note that this will preserve order. This doesn't implement .deserialiseString(String) , instead use new Date(Long.parseLong(value)) in place of this.","title":"serialisation.DateSerialiser"},{"location":"deprecations/#serialisationimplementationrawrawdoubleserialiser","text":"This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDoubleSerialiser instead - note that this will preserve order.","title":"serialisation.implementation.raw.RawDoubleSerialiser"},{"location":"deprecations/#serialisationdoubleserialiser","text":"This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDoubleSerialiser instead - note that this will preserve order. This doesn't implement .deserialiseString(String) , instead use Double.parseDouble(value) in place of this.","title":"serialisation.DoubleSerialiser"},{"location":"deprecations/#serialisationimplementationrawrawfloatserialiser","text":"This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedFloatSerialiser instead - note that this will preserve order.","title":"serialisation.implementation.raw.RawFloatSerialiser"},{"location":"deprecations/#serialisationfloatserialiser","text":"This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedFloatSerialiser instead - note that this will preserve order.","title":"serialisation.FloatSerialiser"},{"location":"deprecations/#serialisationintegerserialiser","text":"This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser instead, this will preserve order. If object ordering does not need to be preserved, uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawIntegerSerialiser could also be used instead. Neither of these implement .deserialiseString(String) , instead use Integer.parseInt(value) in place of this.","title":"serialisation.IntegerSerialiser"},{"location":"deprecations/#serialisationimplementationrawrawintegerserialiser","text":"This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser instead, this will preserve order. If object ordering does not need to be preserved, uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawIntegerSerialiser should instead be used.","title":"serialisation.implementation.raw.RawIntegerSerialiser"},{"location":"deprecations/#serialisationlongserialiser","text":"This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedLongSerialiser instead, this will preserve order. If object ordering does not need to be preserved, uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawLongSerialiser could also be used instead.","title":"serialisation.LongSerialiser"},{"location":"deprecations/#serialisationimplementationrawrawlongserialiser","text":"This has been removed. Use uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedLongSerialiser instead, this will preserve order. If object ordering does not need to be preserved, uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawLongSerialiser should instead be used.","title":"serialisation.implementation.raw.RawLongSerialiser"},{"location":"deprecations/#serialisationtobytesserialiser","text":"The method deserialise(byte[]) has been marked as deprecated. It cannot be deleted as it is needed to implement the Serialiser interface. It is recommended for speed/performance to use the other implementation with an offset and a length - deserialise(byte[], int, int) .","title":"serialisation.ToBytesSerialiser"},{"location":"deprecations/#serialisationtobytesviastringdeserialiser","text":"The method deserialise(byte[]) has been marked as deprecated. It cannot be deleted as it is needed to implement the Serialiser interface. It is recommended for speed/performance to use the other implementation with an offset and a length - deserialise(byte[], int, int) .","title":"serialisation.ToBytesViaStringDeserialiser"},{"location":"deprecations/#removal-of-seed-matching","text":"","title":"Removal of Seed Matching"},{"location":"deprecations/#operationseedmatching","text":"This class has been removed. Use a View instead. See the Gaffer v1 docs for more detail on how to replace seed matching with a view.","title":"operation.SeedMatching"},{"location":"deprecations/#changes-to-store-traits","text":"","title":"Changes to Store Traits"},{"location":"deprecations/#storestore","text":"The method getTraits() has been removed. Use Store.execute(Operation, Context) with the GetTraits operation instead. The method hasTrait(StoreTrait) has been removed. Use Store.execute(Operation, Context) with the HasTrait operation instead.","title":"store.Store"},{"location":"deprecations/#federatedstorefederatedgraphstorage","text":"The method getTraits(GetTraits, Context) has been removed. Use Store.execute(Operation, Context) with the GetTraits operation instead.","title":"federatedstore.FederatedGraphStorage"},{"location":"deprecations/#federatedstorefederatedstore","text":"The methods getTraits() and getTraits(GetTraits, Context) have been removed. Use Store.execute(Operation, Context) with the GetTraits operation instead.","title":"federatedstore.FederatedStore"},{"location":"deprecations/#all-other-deprecations","text":"","title":"All other Deprecations"},{"location":"deprecations/#accumulostoreaccumuloproperties","text":"The TABLE setting/variable plus the methods getTable() and setTable(String) have been removed. For getTable() , uk.gov.gchq.gaffer.accumulostore.getTableName() could be used instead. A graphId should be supplied instead of setting TABLE directly.","title":"accumulostore.AccumuloProperties"},{"location":"deprecations/#accumulostoremockaccumulostore","text":"This class has been removed. For in memory graphs, use uk.gov.gchq.gaffer.mapstore.MapStore instead. For tests use uk.gov.gchq.gaffer.accumulostore.MiniAccumuloStore instead.","title":"accumulostore.MockAccumuloStore"},{"location":"deprecations/#commonutiltesttypes","text":"This class has been removed. Use the equivalent TestTypes class in the store module uk.gov.gchq.gaffer.store.TestTypes instead.","title":"commonutil.TestTypes"},{"location":"deprecations/#dataelementdefinitionviewnamedviewdetail","text":"The method hasWriteAccess(final String userId, final Set<String> opAuths, final String adminAuth) has been removed. Use hasWriteAccess(final User user, final String adminAuth) instead.","title":"data.elementdefinition.view.NamedViewDetail"},{"location":"deprecations/#dataelementdefinitionviewviewelementdefinition","text":"The method setAggregator(final ElementAggregator aggregator) has been removed. A ViewElementDefinition should be constructed using the builder uk.gov.gchq.gaffer.data.elementdefinition.view.ViewElementDefinition.Builder instead.","title":"data.elementdefinition.view.ViewElementDefinition"},{"location":"deprecations/#federatedstorefederatedaccess","text":"The method isAddingUser(User) has been removed. Use hasReadAccess(User user, String adminAuth) / hasWriteAccess(User user, String adminAuth) instead.","title":"federatedstore.FederatedAccess"},{"location":"deprecations/#federatedstorefederatedgraphstorage_1","text":"The methods getAllIdsAsAdmin() , getAllGraphAndAccessAsAdmin(List<String>) and changeGraphAccessAsAdmin(String, FederatedAccess) have all been removed. The method remove(String graphId) has been removed. The following can be used instead: remove(String graphId, User user) remove(String graphId, User user, String adminAuth) remove(String graphId, Predicate<Entry<FederatedAccess, Set<Graph>>> entryPredicateForGraphRemoval)","title":"federatedstore.FederatedGraphStorage"},{"location":"deprecations/#federatedstorefederatedstore_1","text":"The method updateOperationForGraph(Operation, Graph) has been removed. Use FederatedStoreUtil.updateOperationForGraph(Operation, Graph) instead. The method addGraphs(Set<String> graphAuths, String addingUserId, GraphSerialisable... graphs) has been removed. The following can be used instead: addGraphs(Set<String> graphAuths, String addingUserId, boolean isPublic, GraphSerialisable... graphs) addGraphs(Set<String> graphAuths, String addingUserId, boolean isPublic, boolean disabledByDefault, GraphSerialisable... graphs) addGraphs(Set<String> graphAuths, String addingUserId, boolean isPublic, boolean disabledByDefault, AccessPredicate readAccessPredicate, AccessPredicate writeAccessPredicate, GraphSerialisable... graphs) addGraphs(FederatedAccess access, GraphSerialisable... graphs)","title":"federatedstore.FederatedStore"},{"location":"deprecations/#federatedstoreoperationremovegraph","text":"The method Builder.setGraphId(final String graphId) has been removed. Use Builder.graphId(final String graphId) which has identical behaviour instead.","title":"federatedstore.operation.RemoveGraph"},{"location":"deprecations/#graphgraph","text":"The methods Builder.graphId , Builder.library , Builder.view , Builder.addHook , Builder.addHooks have all been removed in all forms. Instead of using these methods, use .config() to set the graphConfig .","title":"graph.Graph"},{"location":"deprecations/#hdfsoperationmapreduce","text":"The methods getNumReduceTasks() and setNumReduceTasks(Integer) have been removed. Gaffer\u2019s operations that inherit MapReduce did not make use of numReduceTasks , either setting it to a constant number in the JobFactory or using Accumulo to automatically set the number (recommended for performance) and using min/max to keep it within a range. Therefore, numReduceTasks , getNumReduceTasks and setNumReduceTasks have been removed from this interface.","title":"hdfs.operation.MapReduce"},{"location":"deprecations/#hdfsoperationaddelementsfromhdfs","text":"The methods getNumReduceTasks() and setNumReduceTasks(Integer) have been removed. The number of reduce tasks should not be set. By default the number of reduce tasks should match the number of tablets. Use minimum and maximum reduce tasks to specify boundaries for the number of reduce tasks.","title":"hdfs.operation.AddElementsFromHdfs"},{"location":"deprecations/#hdfsoperationsampledataforsplitpoints","text":"The methods getNumReduceTasks() and setNumReduceTasks(Integer) have been removed. These methods were not required as NumReduceTasks was always set to 1 in any case.","title":"hdfs.operation.SampleDataForSplitPoints"},{"location":"deprecations/#jobtrackerjobdetail","text":"The constructors which took userId as a String have been removed. Instead, a User ( uk.gov.gchq.gaffer.user.User ) should be used in its place. See the Builder for User . getUserId and setUserId have also been removed. For getting the UserId , getUser().getUserId() can be used instead. See the Javadoc for User .","title":"jobtracker.JobDetail"},{"location":"deprecations/#jsonserialisationjsonserialiser","text":"The method update(final String jsonSerialiserClass, final String jsonSerialiserModules) has been removed. Use update(final String jsonSerialiserClass, final String jsonSerialiserModules, final Boolean strictJson) instead. Passing strictJson as null will result in the same behaviour.","title":"jsonserialisation.JSONSerialiser"},{"location":"deprecations/#operationoperation","text":"The method asOperationChain(final Operation operation) has been removed. Use OperationChain.wrap with the Operation instead.","title":"operation.Operation"},{"location":"deprecations/#operationimplgetwalks","text":"The method Builder.operation has been removed. Use the vararg method Builder.addOperations instead.","title":"operation.impl.GetWalks"},{"location":"deprecations/#operationimplsplitstore","text":"This class has been removed. It is replaced by SplitStoreFromFile which is identical except in name.","title":"operation.impl.SplitStore"},{"location":"deprecations/#operationimpljoinmethodsjoinfunction","text":"The method join(final Iterable keys, final String keyName, final String matchingValuesName, final Match match, final Boolean flatten) which was not implemented has been removed.","title":"operation.impl.join.methods.JoinFunction"},{"location":"deprecations/#restsystemproperty","text":"GRAPH_ID , GRAPH_HOOKS_PATH , GRAPH_LIBRARY_PATH and GRAPH_LIBRARY_CONFIG have been removed. These config options have been removed in favour of providing a graphConfig JSON and using GRAPH_CONFIG_PATH instead.","title":"rest.SystemProperty"},{"location":"deprecations/#restservicev2exampleexamplesfactory","text":"This class has been removed. It is replaced by uk.gov.gchq.gaffer.rest.factory.ExamplesFactory , which can be used instead.","title":"rest.service.v2.example.ExamplesFactory"},{"location":"deprecations/#storestoreproperties","text":"Store ID ( gaffer.store.id ) and related methods ( getId() + setId(String) ) have been removed. The ID is instead set in GraphLibrary when adding (with add ) the StoreProperties . See the Javadoc for GraphLibrary for more detail.","title":"store.StoreProperties"},{"location":"deprecations/#storecontext","text":"The private constructor Context(final User user, final Map<String, Object> config, final String jobId) has been removed; along with the jobId(String) method. Use Context(final User user, final Map<String, Object> config) instead. This does not support supplying the Job ID, this will be set automatically. To get the Job ID use .getJobId() .","title":"store.Context"},{"location":"deprecations/#storeschematypedefinition","text":"The method getSerialiserClass() has been removed. Instead, use getSerialiser() with .getClass() and related methods. The method setSerialiserClass(String) has been removed. Instead, set the Serialiser directly using setSerialiser(Serialiser) .","title":"store.schema.TypeDefinition"},{"location":"deprecations/#storeschemaschema","text":"Schema ID ( gaffer.store.id ) and related methods have been removed. The ID is now defined in GraphLibrary when adding the schema. timestampProperty and related methods have been removed. Instead, this is specified by setting \"config\": {\"timestampProperty\": \"timestamp\"} (where \"timestamp\" is the property name to use as a time stamp) in the Schema. See this example schema for more info. The method getVertexSerialiserClass() has been removed. It can be replaced by calling vertexSerialiser.getClass() and converting the result as appropriate, e.g. getVertexSerialiserClass() used SimpleClassNameIdResolver.getSimpleClassName(vertexSerialiser.getClass()) .","title":"store.schema.Schema"},{"location":"deprecations/#storelibrarygraphlibrary","text":"The method addSchema(final Schema schema) has been removed. Use addSchema(final String id, final Schema schema) instead. The method addProperties(final StoreProperties properties) has been removed. Use addProperties(final String id, final StoreProperties properties) instead. Both of these now require the schema ID to be supplied.","title":"store.library.GraphLibrary"},{"location":"deprecations/#storeoperationoperationchainvalidator","text":"The method validateViews(final Operation op, final ValidationResult validationResult, final Schema schemaNotUsed, final Store store) has been removed. Use validateViews(final Operation op, final User user, final Store store, final ValidationResult validationResult) instead, passing user as null will result in the same behaviour. The method validateComparables(final Operation op, final ValidationResult validationResult, final Schema schemaNotUsed, final Store store) has been removed. Use validateComparables(final Operation op, final User user, final Store store, final ValidationResult validationResult) instead, passing user as null will result in the same behaviour.","title":"store.operation.OperationChainValidator"},{"location":"deprecations/#storeoperationhandlernamedcachenamedviewcache","text":"The method deleteNamedView(final String name) has been removed. Use deleteNamedView(final String name, final User user) instead, passing user as null will result in the same behaviour. The method getNamedView(final String name) has been removed. Use getNamedView(final String name, final User user) instead. The method getAllNamedViews() has been removed. Use getAllNamedViews(final User user) instead.","title":"store.operation.handler.named.cache.NamedViewCache"},{"location":"deprecations/#typesintegerfreqmap","text":"This class has been removed. Use uk.gov.gchq.gaffer.types.FreqMap instead, this is identical except for using Long rather than Integer.","title":"types.IntegerFreqMap"},{"location":"deprecations/#typesfunctionintegerfreqmapaggregator","text":"This class has been removed. Use uk.gov.gchq.gaffer.types.function.FreqMapAggregator instead.","title":"types.function.IntegerFreqMapAggregator"},{"location":"deprecations/#serialisationintegerfreqmapserialiser","text":"This class has been removed. Use uk.gov.gchq.gaffer.serialisation.FreqMapSerialiser instead.","title":"serialisation.IntegerFreqMapSerialiser"},{"location":"log4j/","text":"Log4j in Gaffer This page contains information on how logging is done in Gaffer and on previous use of Log4j in Gaffer. Log4j Version Log4j version 1 (1.2.17), was used by Gaffer versions 1.21 and below. From Gaffer 1.22, Log4j was replaced with Reload4j. The newer version of Log4j, Log4j2 - which is susceptible to the major Log4Shell attack, has never been used by Gaffer or its dependencies. How Logging is done Gaffer uses SLF4J ( Simple Logging Facade for Java ) for all logging. This is a framework/abstraction layer which allows for different loggers to be used ( known as bindings ). The binding used by Gaffer is org.slf4j:slf4j-reload4j:jar:1.7.36 . Impact of Log4j removal on projects incorporating Gaffer Gaffer now uses Reload4j via SLF4J. This may impact projects which are using Gaffer if they are using Log4j directly or through a transitive dependency. To help avoid dependency conflicts, we have configured maven-enforcer-plugin to block use of Log4j with Gaffer. If you are using Gaffer in your project and your build fails because of this plugin, you will need to add a dependency exclusion to any dependencies which depend transitively on Log4j. These can be found by using the Maven dependency tree (ideally in verbose mode). Dependencies of Gaffer using Log4j 1.2.17 Some major Gaffer dependencies (listed below) use Log4j internally (either directly or through SLF4J). From Gaffer version 1.22 these transitive dependencies are excluded and replaced with Reload4j, such that Log4j does not appear on the classpath at all. GCHQ Koryphe 1.14.0 - Uses SLF4J with Log4j. Apache HBase 1.3.0 - Multiple artefacts used from the group org.apache.hbase . All depend directly on Log4j. Apache Hadoop 2.6.5 - Multiple artefacts used from the group org.apache.hadoop . All depend directly on Log4j. Apache Accumulo 1.9.3 - Multiple artefacts used from the group org.apache.accumulo . All depend directly on Log4j. Apache Kafka 0.10.0.0 - Artefact depends indirectly on Log4j through a sub dependency ( com.101tec:zkclient ). Apache Spark 2.3.2 - Artefact depends directly on Log4j. Log4j Vulnerabilities Current vulnerabilities in Log4j 1.12.17 relate to the JDBC, SMTP and JMS appenders, the JMS Sink and the Socket Server. Gaffer never used any of this. In its default configuration, we don't believe Gaffer is vulnerable to any of these problems. If the Log4j configuration is altered, changes could be made which may cause Gaffer to be vulnerable to one or more of the above vulnerabilities. Standard security processes to prevent unauthorised access and modification of configuration files should preclude this possibility.","title":"Log4j in Gaffer"},{"location":"log4j/#log4j-in-gaffer","text":"This page contains information on how logging is done in Gaffer and on previous use of Log4j in Gaffer.","title":"Log4j in Gaffer"},{"location":"log4j/#log4j-version","text":"Log4j version 1 (1.2.17), was used by Gaffer versions 1.21 and below. From Gaffer 1.22, Log4j was replaced with Reload4j. The newer version of Log4j, Log4j2 - which is susceptible to the major Log4Shell attack, has never been used by Gaffer or its dependencies.","title":"Log4j Version"},{"location":"log4j/#how-logging-is-done","text":"Gaffer uses SLF4J ( Simple Logging Facade for Java ) for all logging. This is a framework/abstraction layer which allows for different loggers to be used ( known as bindings ). The binding used by Gaffer is org.slf4j:slf4j-reload4j:jar:1.7.36 .","title":"How Logging is done"},{"location":"log4j/#impact-of-log4j-removal-on-projects-incorporating-gaffer","text":"Gaffer now uses Reload4j via SLF4J. This may impact projects which are using Gaffer if they are using Log4j directly or through a transitive dependency. To help avoid dependency conflicts, we have configured maven-enforcer-plugin to block use of Log4j with Gaffer. If you are using Gaffer in your project and your build fails because of this plugin, you will need to add a dependency exclusion to any dependencies which depend transitively on Log4j. These can be found by using the Maven dependency tree (ideally in verbose mode).","title":"Impact of Log4j removal on projects incorporating Gaffer"},{"location":"log4j/#dependencies-of-gaffer-using-log4j-1217","text":"Some major Gaffer dependencies (listed below) use Log4j internally (either directly or through SLF4J). From Gaffer version 1.22 these transitive dependencies are excluded and replaced with Reload4j, such that Log4j does not appear on the classpath at all. GCHQ Koryphe 1.14.0 - Uses SLF4J with Log4j. Apache HBase 1.3.0 - Multiple artefacts used from the group org.apache.hbase . All depend directly on Log4j. Apache Hadoop 2.6.5 - Multiple artefacts used from the group org.apache.hadoop . All depend directly on Log4j. Apache Accumulo 1.9.3 - Multiple artefacts used from the group org.apache.accumulo . All depend directly on Log4j. Apache Kafka 0.10.0.0 - Artefact depends indirectly on Log4j through a sub dependency ( com.101tec:zkclient ). Apache Spark 2.3.2 - Artefact depends directly on Log4j.","title":"Dependencies of Gaffer using Log4j 1.2.17"},{"location":"log4j/#log4j-vulnerabilities","text":"Current vulnerabilities in Log4j 1.12.17 relate to the JDBC, SMTP and JMS appenders, the JMS Sink and the Socket Server. Gaffer never used any of this. In its default configuration, we don't believe Gaffer is vulnerable to any of these problems. If the Log4j configuration is altered, changes could be made which may cause Gaffer to be vulnerable to one or more of the above vulnerabilities. Standard security processes to prevent unauthorised access and modification of configuration files should preclude this possibility.","title":"Log4j Vulnerabilities"},{"location":"ways-of-working/","text":"Ways of Working Git branching model We have adopted the GitFlow Branching Model in order to support both Gaffer v1 and v2: Issues Where possible a pull request should correlate to a single GitHub issue. An issue should relate to a single functional or non-functional change - changes to alter/improve other pieces of functionality should be addressed in a separate issue in order to keep reviews atomic. The reasoning behind code changes should be documented in the GitHub issue. All resolved issues should be included in the next GitHub milestone, this enables releases to be linked to the included issues. If a code change requires users of Gaffer to make changes in order for them to adopt it then the issue should be labelled 'migration-required' and a comment should be added similar to: ### Migration Steps [Description of what needs to be done to adopt the code change with examples] Workflow Assign yourself to the issue Create a new branch off develop using pattern: gh-[issue number]-[issue-title] Commit your changes prefixing your descriptive commit title, like so: gh-[issue-number]: [commit title] Check and push your changes Create a pull request (PR) to merge your branch into develop If you named the branch and PR correctly, the PR should have \"Resolve #[issue-number]\" automatically added to the description after it is made. If it doesn't, then please add the issue it will resolve as a \"Linked issue\" If there is a significant change, please follow the same process to document the change in gaffer-doc The pull request will be reviewed and following any changes and approval your branch will be squashed and merged into develop Delete the branch The issue will be closed automatically Pull Requests Pull requests will undergo a review by a Gaffer committer to check the code changes are compliant with our coding style. This is a community so please be respectful of other members - offer encouragement, support and suggestions. As described in our git branching model - please raise pull requests to merge your changes in our develop branch. When pull requests are accepted, the reviewer should squash and merge them. This is because it keeps the develop branch clean and populated with only merge commits, rather than intermediate ones. As well as this, it makes everyone's job reviewing pull requests easier as any insecure and unreviewed intermediate commits are not included into the develop branch. Please agree to the GCHQ OSS Contributor License Agreement before submitting a pull request. Signing the CLA is enforced by the cla-assistant. Documentation As mentioned before, any significant changes in a PR should be accompanied with an addition to Gaffer's documentation: gaffer-doc . Smaller changes should be self documented in the tests. With this approach, any large feature or change has user friendly documentation, whereas technical or implementation details are documented for developers by the tests. Coding style Please ensure your coding style is consistent with the rest of the Gaffer project and the Google Java Style Guide . Your changes should pass the checkstyle and spotless plugins that are part of the continuous integration pipeline and check for code formatting and licenses. Before you push your changes you can check the checkstyle plugin passes with mvn checkstyle:check and check the spotless plugin passes with mvn spotless:check . Javadoc Ensure your java code has sufficient javadocs explaining what the section of code does and the intended use of it. Javadocs should be used in addition to clean readable code. In particular: * All public classes (not required for test classes unless an explanation of the testing is required) * public methods (not required if the functionality is obvious from the method name) * public constants (not required if the constant is obvious from the name) Tests All new code should be unit tested. Where this is not possible the code should be invoked and the functionality should be tested in an integration test. In a small number of cases this will not be possible - instead steps to verify the code should be thoroughly documented. Tests should cover edge cases and exception cases as well as normal expected behavior. Keep each test decoupled and don't rely on tests running in a given order - don't save state between tests. For a given code change, aim to improve the code coverage. Unit test classes should test a single class and be named [testClass]Test. Integration test classes should be named [functionalityUnderTest]IT. Tests should be readable and self documenting. Each test should focus on testing one small piece of functionality invoked from a single method call. Tests should use JUnit 5 and assertJ. We suggest the following pattern: @Test public void should [ DoSomething | ReturnSomething ] { // Given [ Setup your test here ] // When [ Invoke the test method ] // Then [ assertThat the method did what was expected ] } Gaffer 2 During the Gaffer 2 development process there is a v2-alpha branch, which acts as the develop branch for changes that will only be added to Gaffer 2.","title":"Ways of Working"},{"location":"ways-of-working/#ways-of-working","text":"","title":"Ways of Working"},{"location":"ways-of-working/#git-branching-model","text":"We have adopted the GitFlow Branching Model in order to support both Gaffer v1 and v2:","title":"Git branching model"},{"location":"ways-of-working/#issues","text":"Where possible a pull request should correlate to a single GitHub issue. An issue should relate to a single functional or non-functional change - changes to alter/improve other pieces of functionality should be addressed in a separate issue in order to keep reviews atomic. The reasoning behind code changes should be documented in the GitHub issue. All resolved issues should be included in the next GitHub milestone, this enables releases to be linked to the included issues. If a code change requires users of Gaffer to make changes in order for them to adopt it then the issue should be labelled 'migration-required' and a comment should be added similar to: ### Migration Steps [Description of what needs to be done to adopt the code change with examples]","title":"Issues"},{"location":"ways-of-working/#workflow","text":"Assign yourself to the issue Create a new branch off develop using pattern: gh-[issue number]-[issue-title] Commit your changes prefixing your descriptive commit title, like so: gh-[issue-number]: [commit title] Check and push your changes Create a pull request (PR) to merge your branch into develop If you named the branch and PR correctly, the PR should have \"Resolve #[issue-number]\" automatically added to the description after it is made. If it doesn't, then please add the issue it will resolve as a \"Linked issue\" If there is a significant change, please follow the same process to document the change in gaffer-doc The pull request will be reviewed and following any changes and approval your branch will be squashed and merged into develop Delete the branch The issue will be closed automatically","title":"Workflow"},{"location":"ways-of-working/#pull-requests","text":"Pull requests will undergo a review by a Gaffer committer to check the code changes are compliant with our coding style. This is a community so please be respectful of other members - offer encouragement, support and suggestions. As described in our git branching model - please raise pull requests to merge your changes in our develop branch. When pull requests are accepted, the reviewer should squash and merge them. This is because it keeps the develop branch clean and populated with only merge commits, rather than intermediate ones. As well as this, it makes everyone's job reviewing pull requests easier as any insecure and unreviewed intermediate commits are not included into the develop branch. Please agree to the GCHQ OSS Contributor License Agreement before submitting a pull request. Signing the CLA is enforced by the cla-assistant.","title":"Pull Requests"},{"location":"ways-of-working/#documentation","text":"As mentioned before, any significant changes in a PR should be accompanied with an addition to Gaffer's documentation: gaffer-doc . Smaller changes should be self documented in the tests. With this approach, any large feature or change has user friendly documentation, whereas technical or implementation details are documented for developers by the tests.","title":"Documentation"},{"location":"ways-of-working/#coding-style","text":"Please ensure your coding style is consistent with the rest of the Gaffer project and the Google Java Style Guide . Your changes should pass the checkstyle and spotless plugins that are part of the continuous integration pipeline and check for code formatting and licenses. Before you push your changes you can check the checkstyle plugin passes with mvn checkstyle:check and check the spotless plugin passes with mvn spotless:check .","title":"Coding style"},{"location":"ways-of-working/#javadoc","text":"Ensure your java code has sufficient javadocs explaining what the section of code does and the intended use of it. Javadocs should be used in addition to clean readable code. In particular: * All public classes (not required for test classes unless an explanation of the testing is required) * public methods (not required if the functionality is obvious from the method name) * public constants (not required if the constant is obvious from the name)","title":"Javadoc"},{"location":"ways-of-working/#tests","text":"All new code should be unit tested. Where this is not possible the code should be invoked and the functionality should be tested in an integration test. In a small number of cases this will not be possible - instead steps to verify the code should be thoroughly documented. Tests should cover edge cases and exception cases as well as normal expected behavior. Keep each test decoupled and don't rely on tests running in a given order - don't save state between tests. For a given code change, aim to improve the code coverage. Unit test classes should test a single class and be named [testClass]Test. Integration test classes should be named [functionalityUnderTest]IT. Tests should be readable and self documenting. Each test should focus on testing one small piece of functionality invoked from a single method call. Tests should use JUnit 5 and assertJ. We suggest the following pattern: @Test public void should [ DoSomething | ReturnSomething ] { // Given [ Setup your test here ] // When [ Invoke the test method ] // Then [ assertThat the method did what was expected ] }","title":"Tests"},{"location":"ways-of-working/#gaffer-2","text":"During the Gaffer 2 development process there is a v2-alpha branch, which acts as the develop branch for changes that will only be added to Gaffer 2.","title":"Gaffer 2"}]}