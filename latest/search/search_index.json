{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gaffer 2","text":"<p>These Docs are a work in progress for Gaffer v2, the docs for Gaffer v1 can be found here.</p> <p>For information and migration steps for Deprecated classes which have been removed in Gaffer 2 alpha 1, please see the deprecations page.</p> <p>For a summary of the current Gaffer 2 alpha roadmap, including migration steps, please see the Gaffer 2 Changelist.</p> <p>For information on logging in Gaffer and historic use of Log4j, please see this page.</p>"},{"location":"#licence","title":"Licence","text":"<p>Gaffer is licensed under the Apache 2 licence and is covered by Crown Copyright.</p>"},{"location":"dev/development/","title":"Development","text":"<p>Work in Progress</p> <p>This page is under construction. To propose additions or changes, please use the pencil button above on the right.</p>"},{"location":"dev/development/#source-control","title":"Source Control","text":"<p>Development of Gaffer is done on the GCHQ/Gaffer GitHub repository, or other Gaffer GitHub repositories under the GCHQ Organization.</p>"},{"location":"dev/development/#building-gaffer","title":"Building Gaffer","text":""},{"location":"dev/development/#build-instructions","title":"Build Instructions","text":"<p>The latest instructions for building Gaffer are in our README.</p>"},{"location":"dev/development/#supported-platforms","title":"Supported Platforms","text":"<p>A recent Linux distribution is recommended, although it should be possible to build Gaffer on any system which has the latest version of Java 8 or 11 (the Gaffer codebase uses Java 8). Running tests on Windows is not recommended due to complexities with native libraries.</p>"},{"location":"dev/development/#contributing","title":"Contributing","text":"<p>We welcome contributions to the project. See our ways of working for more detail. All contributors must sign the GCHQ Contributor Licence Agreement.</p>"},{"location":"dev/ways-of-working/","title":"Ways of Working","text":""},{"location":"dev/ways-of-working/#git-branching-model","title":"Git branching model","text":"<p>We have adopted the GitFlow Branching Model in order to support both Gaffer v1 and v2: </p>"},{"location":"dev/ways-of-working/#issues","title":"Issues","text":"<p>Where possible a pull request should correlate to a single GitHub issue. An issue should relate to a single functional or non-functional change - changes to alter/improve other pieces of functionality should be addressed in a separate issue in order to keep reviews atomic. The reasoning behind code changes should be documented in the GitHub issue. All resolved issues should be included in the next GitHub milestone, this enables releases to be linked to the included issues. If a code change requires users of Gaffer to make changes in order for them to adopt it then the issue should be labelled 'migration-required' and a comment should be added similar to:</p> <pre><code>### Migration Steps\n\n[Description of what needs to be done to adopt the code change with examples]\n</code></pre>"},{"location":"dev/ways-of-working/#workflow","title":"Workflow","text":"<ul> <li>Assign yourself to the issue</li> <li>Create a new branch off develop using pattern: <code>gh-[issue number]-[issue-title]</code></li> <li>Commit your changes using descriptive commit titles</li> <li>Check and push your changes</li> <li>Create a pull request (PR) to merge your branch into develop, prefixing the PR title with \"Gh-[issue number]: \"</li> <li>If you named the branch and PR correctly, the PR should have \"Resolve #[issue-number]\" automatically added to the description after it is made. If it doesn't, then please add the issue it will resolve as a \"Linked issue\"</li> <li>If there is a significant change, please follow the same process to document the change in gaffer-doc</li> <li>The pull request will be reviewed and following any changes and approval your branch will be squashed and merged into develop</li> <li>Delete the branch</li> <li>The issue will be closed automatically</li> </ul>"},{"location":"dev/ways-of-working/#pull-requests","title":"Pull Requests","text":"<p>Pull requests will undergo a review by a Gaffer committer to check the code changes are compliant with our coding style. This is a community so please be respectful of other members - offer encouragement, support and suggestions. </p> <p>As described in our git branching model - please raise pull requests to merge your changes in our develop branch.</p> <p>When pull requests are accepted, the reviewer should squash and merge them. This is because it keeps the develop branch clean and populated with only merge commits, rather than intermediate ones. As well as this, it makes everyone's job reviewing pull requests easier as any insecure and unreviewed intermediate commits are not included into the develop branch.</p> <p>Please agree to the GCHQ OSS Contributor License Agreement before submitting a pull request. Signing the CLA is enforced by the cla-assistant.</p>"},{"location":"dev/ways-of-working/#documentation","title":"Documentation","text":"<p>As mentioned before, any significant changes in a PR should be accompanied with an addition to Gaffer's documentation: gaffer-doc. Smaller changes should be self documented in the tests. With this approach, any large feature or change has user friendly documentation, whereas technical or implementation details are documented for developers by the tests.</p>"},{"location":"dev/ways-of-working/#coding-style","title":"Coding style","text":""},{"location":"dev/ways-of-working/#java","title":"Java","text":"<p>Please ensure your coding style is consistent with the rest of the Gaffer project and the Google Java Style Guide. Your changes should pass the checkstyle and spotless plugins that are part of the continuous integration pipeline and check for code formatting and licenses. Before you push your changes you can check the checkstyle plugin passes with <code>mvn checkstyle:check</code> and check the spotless plugin passes with <code>mvn spotless:check</code>.</p>"},{"location":"dev/ways-of-working/#python","title":"Python","text":"<p>Please ensure your coding style is consistent with the rest of the Gaffer project and the PEP 8 Style Guide. However, there are a few exceptions to the standards set by PEP8: * Module level imports at the top of the file - this will not be enforced but is recommended where it does not cause issues with the code generated by Fishbowl. * Max line length of 79 characters - the max line length that will be enforced in this project has been increased to 100 characters.</p> <p>Before you create a PR for your changes you can use autopep8 to check and fix any styling issues. The following can be run which will take into account the rule exceptions mentioned above. <code>autopep8 --exit-code -r -i -a -a --max-line-length 100 --ignore E402 .</code></p>"},{"location":"dev/ways-of-working/#javadoc","title":"Javadoc","text":"<p>Ensure your java code has sufficient javadocs explaining what the section of code does and the intended use of it. Javadocs should be used in addition to clean readable code.</p> <p>In particular: * All public classes (not required for test classes unless an explanation of the testing is required) * public methods (not required if the functionality is obvious from the method name) * public constants (not required if the constant is obvious from the name)</p>"},{"location":"dev/ways-of-working/#tests","title":"Tests","text":"<ul> <li>All new code should be unit tested. Where this is not possible the code should be invoked and the functionality should be tested in an integration test. In a small number of cases this will not be possible - instead steps to verify the code should be thoroughly documented.</li> <li>Tests should cover edge cases and exception cases as well as normal expected behavior.</li> <li>Keep each test decoupled and don't rely on tests running in a given order - don't save state between tests.</li> <li>For a given code change, aim to improve the code coverage.</li> <li>Unit test classes should test a single class and be named [testClass]Test.</li> <li>Integration test classes should be named [functionalityUnderTest]IT.</li> <li>Tests should be readable and self documenting.</li> <li>Each test should focus on testing one small piece of functionality invoked from a single method call.</li> <li>Tests should use JUnit 5 and assertJ.</li> <li>We suggest the following pattern:</li> </ul> <pre><code>@Test\npublic void should[DoSomething|ReturnSomething] {\n// Given\n[Setup your test here]\n// When\n[Invoke the test method]\n// Then\n[assertThat the method did what was expected]\n}\n</code></pre>"},{"location":"dev/ways-of-working/#gaffer-2","title":"Gaffer 2","text":"<p>During the Gaffer 2 development process there is a v2-alpha branch, which acts as the develop branch for changes that will only be added to Gaffer 2.</p>"},{"location":"gaffer2.0/accumulo-kerberos/","title":"Accumulo Kerberos Support","text":"<p>This page contains information on Kerberos Authentication support for Gaffer's Accumulo Store. This functionality was introduced in version <code>2.0.0-alpha-0.3.1</code> of Gaffer.</p>"},{"location":"gaffer2.0/accumulo-kerberos/#using-the-accumulo-store-with-kerberos","title":"Using the Accumulo Store with Kerberos","text":""},{"location":"gaffer2.0/accumulo-kerberos/#prerequisites","title":"Prerequisites","text":"<p>To use Gaffer's Accumulo Store with Kerberos authentication:</p> <ul> <li>The Accumulo cluster to connect with must be correctly configured to use Kerberos.</li> <li>A principal for the system/host Gaffer will be running on must be created in the Key Distribution Center (KDC) database.</li> <li>The Gaffer principal should use the standard <code>primary/instance@realm</code> format. Using principals without an instance qualification has not been tested.</li> <li>A keytab for the Gaffer principal must be created and transferred to the Gaffer host.</li> <li>The Gaffer principal must have been added as an Accumulo user with suitable permissions granted.</li> <li>Kerberos client utilities should be installed on the host and <code>krb5.conf</code> must be correctly configured.</li> <li>An Accumulo client configuration should be available on the host and contain the correct options to enable Kerberos.</li> <li>The Gaffer store.properties should state that Kerberos is to be used, specify the principal name and the keytab path.</li> </ul> <p>The sections below cover some of these points in more detail.</p>"},{"location":"gaffer2.0/accumulo-kerberos/#accumulo-user-for-gaffer","title":"Accumulo user for Gaffer","text":"<p>When Kerberos is used with Accumulo, any client with a principal can connect without requiring an Accumulo user to have been created previously. This works by creating an Accumulo user automatically when a new client connects. These users are not granted any permissions.</p> <p>Users can still be created manually via the Accumulo shell, with Gaffer's full principal (with all components) given as the username. Permissions to create and read tables can then be granted to this user. If this isn't done, Accumulo will create the user automatically when Gaffer first connects. In this case Gaffer will fail to start as the required permissions will not have been granted - they can then be granted via the shell and Gaffer restarted.</p>"},{"location":"gaffer2.0/accumulo-kerberos/#accumulo-client-configuration","title":"Accumulo Client configuration","text":"<p>Depending on the version of Accumulo used, an <code>accumulo-client.properties</code> (2.x) or <code>client.conf</code> (1.x) must be populated as described in the respective version of the Accumulo documentation. The only value which needs to be altered is the Kerberos server primary. This should reflect the primary part of the principals used by the Accumulo cluster.</p> <p>The location of this config file can be specified using the <code>ACCUMULO_CLIENT_CONF_PATH</code> environment variable. If this is not set, then default paths will be checked.</p> <p>Other than this file, Accumulo libraries and configuration files do not need to be installed on the Gaffer host. </p>"},{"location":"gaffer2.0/accumulo-kerberos/#gaffer-storeproperties-configuration","title":"Gaffer <code>store.properties</code> configuration","text":"<p>In addition to the usual Accumulo Store settings, these extra options must be specified for Kerberos: <pre><code>accumulo.kerberos.enable=true\naccumulo.kerberos.principal=gaffer/host.domain@REALM.NAME\naccumulo.kerberos.keytab=/gaffer/config/gaffer.keytab\n</code></pre> The <code>accumulo.username</code> and <code>accumulo.password</code> values do not need to be set and are ignored when <code>accumulo.kerberos.enable</code> is true.</p> <p>The <code>kinit</code> Kerberos command does not need to be used, although it might be useful for ensuring the client principal works correctly. All Kerberos ticket management, renewal and re-login is handled automatically.</p>"},{"location":"gaffer2.0/accumulo-kerberos/#specifying-a-different-krb5conf","title":"Specifying a different <code>krb5.conf</code>","text":"<p>If the <code>krb5.conf</code> in the default system location is not suitable, or if it's stored in a non-standard location, then  custom a custom <code>krb5.conf</code> location can be specified when starting Gaffer by setting the system property value <code>java.security.krb5.conf</code>. The simplest way to do this is by using the option flag <code>-Djava.security.krb5.conf=/my/path/to/krb5.conf</code> when launching the Gaffer JAR.</p>"},{"location":"gaffer2.0/accumulo-kerberos/#federation-considerations","title":"Federation Considerations","text":"<p>Due to the way Kerberos is implemented in Accumulo, it is not possible for Gaffer to use multiple principals at the same time. For the <code>FederatedStore</code>, this prevents adding graphs which are on different Accumulo clusters, if those clusters require different principals. In practice this is unlikely to be a problem, as different Accumulo clusters would only need separate client principals if they were on separate Kerberos Realms or using different KDCs.</p> <p>This only impacts Accumulo clusters which require Kerberos. It doesn't impact on adding graphs which are stored in clusters using basic authentication and not Kerberos. Nor does it affect adding graphs from a Kerberos cluster and also adding graphs from a non Kerberos cluster in the same <code>FederatedStore</code>.</p> <p>If this limitation is a problem, it can be worked around by running additional Gaffer instances and connecting to them using a <code>ProxyStore</code> in the <code>FederatedStore</code>, rather than connecting directly using an <code>AccumuloStore</code>.</p>"},{"location":"gaffer2.0/accumulo-kerberos/#hdfs-considerations","title":"HDFS Considerations","text":"<p>When using the <code>AddElementsFromHdfs</code> operation Gaffer acts as a HDFS client. When Kerberos is used (Hadoop Secure Mode), HDFS clients must have native libraries installed and configured correctly; else Hadoop will raise a Runtime Exception stating that \"Secure IO is not possible without native code extensions\".</p> <p>The HDFS client also requires the Hadoop configuration files <code>core-site.xml</code> and <code>hdfs-site.xml</code> to both be present and configured as below. The location of these files can be specified using the <code>HADOOP_CONF_DIR</code> environment variable.</p> <pre><code>&lt;!--Properties in core-site.xml--&gt;\n&lt;property&gt;\n&lt;name&gt;hadoop.security.authentication&lt;/name&gt;\n&lt;value&gt;kerberos&lt;/value&gt;\n&lt;/property&gt;\n&lt;property&gt;\n&lt;name&gt;hadoop.security.authorization&lt;/name&gt;\n&lt;value&gt;true&lt;/value&gt;\n&lt;/property&gt;\n</code></pre> <p>In particular, <code>hdfs-site.xml</code> requires the <code>yarn.resourcemanager.principal</code> property to be set to the HDFS client principal - should be the same one as in the Gaffer Store properties. If this is missing Hadoop will fail to connect and raise an IO Exception with \"Can't get Master Kerberos principal for use as renewer\".</p> <pre><code>&lt;!--Properties in hdfs-site.xml--&gt;\n&lt;property&gt;\n&lt;name&gt;yarn.resourcemanager.principal&lt;/name&gt;\n&lt;value&gt;primary/instance@realm&lt;/value&gt;\n&lt;/property&gt;\n</code></pre> <p>Note that the <code>core-site.xml</code> and <code>hdfs-site.xml</code> files are only required if <code>AddElementsFromHdfs</code> is going to be used. For Accumulo connections the Hadoop properties (from <code>core-site.xml</code>) used for enabling Kerberos are set automatically in Gaffer's connection code.</p>"},{"location":"gaffer2.0/accumulo-kerberos/#spark-accumulo-library","title":"Spark Accumulo Library","text":"<p>The Spark Accumulo Library has not yet been updated to support Kerberos. This prevents Spark Operations from being used with an <code>AccumuloStore</code> which has Kerberos authentication enabled. It is on the backlog for support to be added in future.</p>"},{"location":"gaffer2.0/accumulo-kerberos/#troubleshooting","title":"Troubleshooting","text":"<p>Kerberos is not easy to configure and familiarity with Kerberos concepts is recommended. There are some useful links to introductory information in the Accumulo Kerberos docs.</p> <p>Improperly configured DNS will cause problems with Kerberos. Ensure all hostnames used in Principals resolved correctly, include reverse lookup. Due to how the system's hostname is used by the Hadoop Kerberos libraries, a mismatch between the configured hostname and the hostname resolved by a reverse lookup can prevent authentication from working correctly.</p> <p>Various environment variables can be set for debugging Kerberos, see the Hadoop docs for more information. These variables are applicable to Accumulo (see docs) because its Kerberos implementation uses Hadoop libraries. The Gaffer logging level (set in <code>log4.xml</code>) should be increased to at least <code>INFO</code> when using these environment variables.</p>"},{"location":"gaffer2.0/accumulo-migration/","title":"Accumulo Migration","text":"<p>This page contains information on changes to the Accumulo/Hadoop versions supported by Gaffer and how to continue using the previously supported versions.</p>"},{"location":"gaffer2.0/accumulo-migration/#accumulo-2-hadoop-3-become-default-versions","title":"Accumulo 2 &amp; Hadoop 3 become default versions","text":"<p>From the <code>2.0.0-alpha-3</code> release of Gaffer, the default version of Accumulo has been upgraded to Accumulo 2.0.1. Hadoop has also been upgraded to the latest version (currently 3.3.3). This is because Hadoop 2.x is not compatible with Accumulo 2.</p>"},{"location":"gaffer2.0/accumulo-migration/#retained-support-for-accumulo-1-hadoop-2","title":"Retained support for Accumulo 1 &amp; Hadoop 2","text":"<p>Support for certain versions of Accumulo 1 and Hadoop 2 (specifically 1.9.3 &amp; 2.6.5) has been retained and can be enabled by using a Maven profile when building from source. This facilitates testing with these versions and creates shaded JARs (e.g. spring-rest exec, accumulo-store iterators) with the appropriate versions of supporting libraries. As described in the source docs, other versions of Accumulo 1.x and Hadoop 2.x might also work.</p>"},{"location":"gaffer2.0/accumulo-migration/#building-gaffer-with-the-legacy-profile","title":"Building Gaffer with the 'legacy' profile","text":"<p>To build Gaffer using Accumulo 1.9.3 and Hadoop 2.6.5, the 'legacy' Maven profile needs to be used. This is enabled by supplying <code>-Dlegacy=true</code> as an extra argument at the command line when running Maven. For example, <code>mvn clean install -Pcoverage -Dlegacy=true</code> will perform a full build/test of Gaffer with this profile enabled. Java 11 cannot be used with this profile because only Hadoop 3.3.0 and higher support it.</p> <p>With the 'legacy' Maven profile active, the filenames of all shaded JARs produced are appended with <code>-legacy</code>. This is to differentiate them from the default shaded JARs which contain different libraries and different library versions. A default Gaffer Accumulo REST API JAR will not work with an Accumulo 1 cluster, and the 'legacy' version will not work with Accumulo 2.</p>"},{"location":"gaffer2.0/accumulo-migration/#migrating-from-accumulo-1-to-2","title":"Migrating from Accumulo 1 to 2","text":"<p>See the Accumulo documentation for guidance on upgrading from Accumulo 1 to 2. Of particular significance is the deprecation of the dynamic reloading classpath directory functionality in Accumulo 2. This affects where and how the Gaffer iterators JAR can be installed. See the Accumulo store documentation for these installation details.</p> <p>Otherwise, no Accumulo specific Gaffer configuration needs to be changed and migrating from Accumulo 1 to 2 should be as simple as swapping the Gaffer dependency versions/JARs, although this has not been actively tested.</p>"},{"location":"gaffer2.0/changelist/","title":"Gaffer 2 Changelist","text":"<p>Below is a summary of changes that have been made in Gaffer version 2.   </p>"},{"location":"gaffer2.0/changelist/#accumulo-2-support","title":"Accumulo 2 Support","text":"<p>The Accumulo store now supports Accumulo 2 and Hadoop 3 by default, with support for Accumulo 1 and Hadoop 2 retained. See the Accumulo Migration page for more information about this change.</p>"},{"location":"gaffer2.0/changelist/#federated-store-improvements","title":"Federated Store Improvements","text":"<p>The Federated Operation was added to greatly improve flexibility of using a Federated Store.  </p> <p>Breaking change</p> <p>To migrate, please see the Federated Store Changes page.</p>"},{"location":"gaffer2.0/changelist/#cache-improvements-and-fixes","title":"Cache Improvements and fixes","text":"<p>All \"caches\" within Gaffer received a lot of bug fixes which should make them significantly more stable and consistent over time. This should improve usability of FederatedStores, NamedOperations and NamedViews.</p> <p>Breaking change</p> <p>The cache will need to be reloaded, as the new internal cache interface has changed.  To do this, export all of the contents of your cache, upgrade, then re-add everything manually.  </p>"},{"location":"gaffer2.0/changelist/#removal-of-deprecated-code","title":"Removal of Deprecated code","text":"<p>All of Gaffer 1's deprecated code has been removed.  </p> <p>Breaking change</p> <p>To migrate, please see the deprecations page.</p>"},{"location":"gaffer2.0/changelist/#dependency-upgrades","title":"Dependency Upgrades","text":"<p>Dependencies have been updated, where possible to the latest version, removing vulnerabilities.  </p> <p>Breaking change</p> <p>You will need to migrate your dependencies to be compatible with Gaffer 2's new dependency versions. Please see the dependencies page for full details.</p>"},{"location":"gaffer2.0/changelist/#federated-and-proxy-store-fixes","title":"Federated and Proxy store fixes","text":"<p>A lot of bugs have been fixed that should facilitate FederatedStores with ProxyStores in them.  </p> <p>Breaking change</p> <p>The unique store trait <code>DYNAMIC_SCHEMA</code> has been removed from Gaffer. Simply removing it from custom FederatedStore implementations should be an adequate fix.</p>"},{"location":"gaffer2.0/changelist/#removal-of-closeableiterable","title":"Removal of CloseableIterable","text":"<p>The <code>CloseableIterable</code> class has been removed so Operations like <code>GetAllElements</code> now return an <code>Iterable</code> instead, but the result still implements <code>Closeable</code>.   </p> <p>Breaking change</p> <p>Everywhere <code>CloseableIterable</code> was used in client code should be replaced with an <code>Iterable</code>: <pre><code>final CloseableIterable&lt;? extends Element&gt; results = graph.execute(new GetAllElements(), USER);\n</code></pre> <pre><code>final Iterable&lt;? extends Element&gt; results = graph.execute(new GetAllElements(), USER);\n</code></pre></p>"},{"location":"gaffer2.0/changelist/#removal-of-hbase-and-parquet-stores","title":"Removal of HBase and Parquet stores","text":"<p>The HBase and Parquet stores have been removed from Gaffer in version 2. We made posts for both the HBase and Parquet stores to understand the levels of usage. It was then decided to remove both stores as this would make introducing various improvements easier in the long term. HBase and Parquet remain available in Gaffer version 1. In the future, they could be reimplemented for Gaffer 2, though we do not plan to currently.  </p> <p>Breaking change</p> <p>We would recommend instead using an Accumulo Store. If you would like these store implementations in Gaffer 2, or any other potential store for that matter, please make an issue on GitHub.  </p>"},{"location":"gaffer2.0/changelist/#gaffer-now-builds-with-java-8-and-java-11","title":"Gaffer now builds with Java 8 and Java 11","text":"<p>There is now a maven profile that will swap dependency versions so you can build Gaffer with Java 11. The code has also been updated to build with both Java versions.</p>"},{"location":"gaffer2.0/changelist/#accumulo-kerberos-authentication-support","title":"Accumulo Kerberos Authentication Support","text":"<p>The Accumulo store now supports authenticating to Accumulo and HDFS using Kerberos, in addition to username/password. For more information, see the Kerberos support page.</p>"},{"location":"gaffer2.0/changelist/#csv-import-and-export","title":"CSV Import and Export","text":"<p>Basic support for importing and exporting CSVs has been added.</p>"},{"location":"gaffer2.0/changelist/#all-operations-can-now-be-used-within-namedoperations","title":"All operations can now be used within NamedOperations","text":"<p>Previously, <code>GetElementsBetweenSets</code> could not be used within a NamedOperation as it used <code>inputB</code>. <code>GetElementsBetweenSets</code> and <code>inputB</code> have both been deprecated and instead you should use <code>GetElementsBetweenSetsPairs</code>.</p> Example <p>Old operation now deprecated: <pre><code>{\n\"class\": \"GetElementsBetweenSets\",\n\"input\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"firstInput\"\n}\n],\n\"inputB\": [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"secondInput\"\n}\n]\n}\n</code></pre> New operation that will work within NamedOperations: <pre><code>{\n\"class\": \"GetElementsBetweenSetsPairs\",\n\"input\": {\n\"class\": \"Pair\",\n\"first\": {\n\"ArrayList\" : [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"firstInput\"\n}\n]\n},\n\"second\": {\n\"ArrayList\" : [\n{\n\"class\": \"EntitySeed\",\n\"vertex\": \"secondInput\"\n}\n]\n}\n}\n}\n</code></pre></p>"},{"location":"gaffer2.0/changelist/#ability-to-set-operationdeclarations-during-addgraph","title":"Ability to set OperationDeclarations during AddGraph","text":"<p>This will mean subgraphs added to FederatedStores can have additional operation handlers set when they are added. You can directly provide the OperationsDeclarations json to the store properties with <code>gaffer.store.operation.declarations.json</code>.</p> Example <pre><code>{\n\"class\": \"AddGraph\",\n\"graphId\": \"myGraph\",\n\"schema\": {}, // (1)\n\"storeProperties\": {\n\"gaffer.store.class\": \"MapStore\",\n\"gaffer.store.operation.declarations.json\": {\n\"operations\": [\n{\n\"operation\": \"ImportFromLocalFile\", // (2)\n\"handler\": {\n\"class\": \"ImportFromLocalFileHandler\"\n}\n}\n]\n}\n}\n}\n</code></pre> <ol> <li>Schema left empty for brevity</li> <li>This example operation enables file import. Read more in the CSV docs.</li> </ol>"},{"location":"gaffer2.0/dependencies/","title":"Dependency Upgrades","text":"<p>This page lists the dependencies that have been upgraded as part of Gaffer 2.</p> <ul> <li>Assertj: 3.20.2 -&gt; 3.22.0</li> <li>Junit5: 5.6.0 -&gt; 5.8.2</li> <li>Mockito: 3.3.3 -&gt; 4.3.1</li> <li>Slf4j: 1.7.25 -&gt; 1.7.36</li> <li>Log4j: 1.2.17 -&gt; Reload4j: 1.2.18.3</li> <li>Koryphe: 1.14.0 -&gt; 2.1.0</li> <li>Avro: 1.7.7 -&gt; 1.8.2</li> <li>Jackson: 2.6.5 -&gt; 2.12.6</li> <li>Hazelcast: 3.8 -&gt; 5.1</li> <li>Spring Boot: 1.3.2 -&gt; 2.5.12</li> <li>Spring API Swagger: 2.6.0 -&gt; 3.0.0</li> <li>Commons-codec: 1.6 -&gt; 1.15</li> <li>Commons-io: 2.7 -&gt; 2.11.0</li> <li>Commons-lang: 3.3.2 -&gt; 3.12.0</li> <li>Commons-logging: 1.1.3 -&gt; 1.2</li> <li>Commons-math: 2.1 -&gt; 2.2</li> <li>Commons-math3: 3.4.1 -&gt; 3.6.1</li> <li>Commons-csv: 1.4 -&gt; 1.9.0</li> <li>Curator: 2.6.0 -&gt; 2.11.1</li> <li>Javassist: 3.19.0-GA -&gt; 3.28.0-GA</li> <li>Jersey: 2.25 -&gt; 2.36</li> <li>Paranamer: 2.6 -&gt; 2.8</li> <li>Reflections: 0.9.10 -&gt; 0.9.12</li> </ul>"},{"location":"gaffer2.0/deprecations/","title":"Deprecations","text":"<p>This page describes deprecated code which has been removed in Gaffer 2 and how to migrate to better equivalents. Each heading for a section below refers to a classname from <code>uk.gov.gchq.gaffer</code> where there have been changes or where that class has been removed entirely. The section headings link to the code on GitHub for that class (as of the Gaffer 1.21.1 release).</p> <p>Deprecations impacting the serialisers used in schemas are listed first, followed by changes to Seed Matching and changes to Traits. Other deprecations are then listed in alphabetical order.</p>"},{"location":"gaffer2.0/deprecations/#serialisers","title":"Serialisers","text":""},{"location":"gaffer2.0/deprecations/#migrating-away-from-deprecated-serialisers","title":"Migrating away from deprecated Serialisers","text":"<p>Various deprecated serialisers have been removed completely (details below). If any of these are being used in an existing schema, a new graph and schema will need to be created (see below for replacement serialisers to use) and data from existing graphs migrated. Data will need to be migrated (export and reimport) from graphs using deprecated serialisers before upgrading to Gaffer v2.</p> <p>It is essential to migrate data stored using deprecated serialisers. Simply replacing these serialisers is not enough because this will prevent existing data from being read and potentially put the backing store into a corrupted state.</p>"},{"location":"gaffer2.0/deprecations/#preservation-of-ordering","title":"Preservation of ordering","text":"<p>When using an ordered store (such as Accumulo), all serialisers used on vertices must preserve order. As such, <code>compactRaw</code> serialisers (which do not preserve order) cannot be used on vertices in ordered stores.</p> <p>However, when preserving order is not required, such as for properties, <code>compactRaw</code> serialisers are the most effective solution and should always be used. Using an ordered serialiser on a property would reduce performance without providing any benefit. See the schemas documentation for more detail.</p>"},{"location":"gaffer2.0/deprecations/#serialisationimplementationrawrawdateserialiser","title":"<code>serialisation.implementation.raw.RawDateSerialiser</code>","text":"<ul> <li>This class has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDateSerialiser</code> instead - note that this will preserve order.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationdateserialiser","title":"<code>serialisation.DateSerialiser</code>","text":"<ul> <li>This has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDateSerialiser</code> instead - note that this will preserve order. This doesn't implement <code>.deserialiseString(String)</code>, instead use <code>new Date(Long.parseLong(value))</code> in place of this.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationimplementationrawrawdoubleserialiser","title":"<code>serialisation.implementation.raw.RawDoubleSerialiser</code>","text":"<ul> <li>This has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDoubleSerialiser</code> instead - note that this will preserve order.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationdoubleserialiser","title":"<code>serialisation.DoubleSerialiser</code>","text":"<ul> <li>This has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedDoubleSerialiser</code> instead - note that this will preserve order. This doesn't implement <code>.deserialiseString(String)</code>, instead use <code>Double.parseDouble(value)</code> in place of this.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationimplementationrawrawfloatserialiser","title":"<code>serialisation.implementation.raw.RawFloatSerialiser</code>","text":"<ul> <li>This has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedFloatSerialiser</code> instead - note that this will preserve order.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationfloatserialiser","title":"<code>serialisation.FloatSerialiser</code>","text":"<ul> <li>This has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedFloatSerialiser</code> instead - note that this will preserve order.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationintegerserialiser","title":"<code>serialisation.IntegerSerialiser</code>","text":"<ul> <li>This has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser</code> instead, this will preserve order.</li> <li>If object ordering does not need to be preserved, <code>uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawIntegerSerialiser</code> could also be used instead.</li> <li>Neither of these implement <code>.deserialiseString(String)</code>, instead use <code>Integer.parseInt(value)</code> in place of this.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationimplementationrawrawintegerserialiser","title":"<code>serialisation.implementation.raw.RawIntegerSerialiser</code>","text":"<ul> <li>This has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser</code> instead, this will preserve order.</li> <li>If object ordering does not need to be preserved, <code>uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawIntegerSerialiser</code> should instead be used.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationlongserialiser","title":"<code>serialisation.LongSerialiser</code>","text":"<ul> <li>This has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedLongSerialiser</code> instead, this will preserve order.</li> <li>If object ordering does not need to be preserved, <code>uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawLongSerialiser</code> could also be used instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationimplementationrawrawlongserialiser","title":"<code>serialisation.implementation.raw.RawLongSerialiser</code>","text":"<ul> <li>This has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedLongSerialiser</code> instead, this will preserve order.</li> <li>If object ordering does not need to be preserved, <code>uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawLongSerialiser</code> should instead be used.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationtobytesserialiser","title":"<code>serialisation.ToBytesSerialiser</code>","text":"<ul> <li>The method <code>deserialise(byte[])</code> has been marked as deprecated. It cannot be deleted as it is needed to implement the Serialiser interface.</li> <li>It is recommended for speed/performance to use the other implementation with an offset and a length - <code>deserialise(byte[], int, int)</code>.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationtobytesviastringdeserialiser","title":"<code>serialisation.ToBytesViaStringDeserialiser</code>","text":"<ul> <li>The method <code>deserialise(byte[])</code> has been marked as deprecated. It cannot be deleted as it is needed to implement the Serialiser interface.</li> <li>It is recommended for speed/performance to use the other implementation with an offset and a length - <code>deserialise(byte[], int, int)</code>.</li> </ul>"},{"location":"gaffer2.0/deprecations/#removal-of-seed-matching","title":"Removal of Seed Matching","text":""},{"location":"gaffer2.0/deprecations/#operationseedmatching","title":"<code>operation.SeedMatching</code>","text":"<ul> <li>This class has been removed.</li> <li>Use a View instead. See the Gaffer v1 docs for more detail on how to replace seed matching with a view.</li> </ul>"},{"location":"gaffer2.0/deprecations/#changes-to-store-traits","title":"Changes to Store Traits","text":""},{"location":"gaffer2.0/deprecations/#storestore","title":"<code>store.Store</code>","text":"<ul> <li>The method <code>getTraits()</code> has been removed. Use <code>Store.execute(Operation, Context)</code> with the <code>GetTraits</code> operation instead.</li> <li>The method <code>hasTrait(StoreTrait)</code> has been removed. Use <code>Store.execute(Operation, Context)</code> with the <code>HasTrait</code> operation instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#federatedstorefederatedgraphstorage","title":"<code>federatedstore.FederatedGraphStorage</code>","text":"<ul> <li>The method <code>getTraits(GetTraits, Context)</code> has been removed. Use <code>Store.execute(Operation, Context)</code> with the <code>GetTraits</code> operation instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#federatedstorefederatedstore","title":"<code>federatedstore.FederatedStore</code>","text":"<ul> <li>The methods <code>getTraits()</code> and <code>getTraits(GetTraits, Context)</code> have been removed. Use <code>Store.execute(Operation, Context)</code> with the <code>GetTraits</code> operation instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#all-other-deprecations","title":"All other Deprecations","text":""},{"location":"gaffer2.0/deprecations/#accumulostoreaccumuloproperties","title":"<code>accumulostore.AccumuloProperties</code>","text":"<ul> <li>The <code>TABLE</code> setting/variable plus the methods <code>getTable()</code> and <code>setTable(String)</code> have been removed. For <code>getTable()</code>, uk.gov.gchq.gaffer.accumulostore.getTableName() could be used instead.</li> <li>A <code>graphId</code> should be supplied instead of setting <code>TABLE</code> directly.</li> </ul>"},{"location":"gaffer2.0/deprecations/#accumulostoremockaccumulostore","title":"<code>accumulostore.MockAccumuloStore</code>","text":"<ul> <li>This class has been removed.</li> <li>For in memory graphs, use <code>uk.gov.gchq.gaffer.mapstore.MapStore</code> instead.</li> <li>For tests use <code>uk.gov.gchq.gaffer.accumulostore.MiniAccumuloStore</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#commonutiltesttypes","title":"<code>commonutil.TestTypes</code>","text":"<ul> <li>This class has been removed.</li> <li>Use the equivalent <code>TestTypes</code> class in the store module <code>uk.gov.gchq.gaffer.store.TestTypes</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#dataelementdefinitionviewnamedviewdetail","title":"<code>data.elementdefinition.view.NamedViewDetail</code>","text":"<ul> <li>The method <code>hasWriteAccess(final String userId, final Set&lt;String&gt; opAuths, final String adminAuth)</code> has been removed.</li> <li>Use <code>hasWriteAccess(final User user, final String adminAuth)</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#dataelementdefinitionviewviewelementdefinition","title":"<code>data.elementdefinition.view.ViewElementDefinition</code>","text":"<ul> <li>The method <code>setAggregator(final ElementAggregator aggregator)</code> has been removed.</li> <li>A <code>ViewElementDefinition</code> should be constructed using the builder <code>uk.gov.gchq.gaffer.data.elementdefinition.view.ViewElementDefinition.Builder</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#federatedstorefederatedaccess","title":"<code>federatedstore.FederatedAccess</code>","text":"<ul> <li>The method <code>isAddingUser(User)</code> has been removed.</li> <li>Use <code>hasReadAccess(User user, String adminAuth)</code>/<code>hasWriteAccess(User user, String adminAuth)</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#federatedstorefederatedgraphstorage_1","title":"<code>federatedstore.FederatedGraphStorage</code>","text":"<ul> <li>The methods <code>getAllIdsAsAdmin()</code>, <code>getAllGraphAndAccessAsAdmin(List&lt;String&gt;)</code> and <code>changeGraphAccessAsAdmin(String, FederatedAccess)</code> have all been removed.</li> <li>The method <code>remove(String graphId)</code> has been removed. The following can be used instead:<ul> <li><code>remove(String graphId, User user)</code></li> <li><code>remove(String graphId, User user, String adminAuth)</code></li> <li><code>remove(String graphId, Predicate&lt;Entry&lt;FederatedAccess, Set&lt;Graph&gt;&gt;&gt; entryPredicateForGraphRemoval)</code></li> </ul> </li> </ul>"},{"location":"gaffer2.0/deprecations/#federatedstorefederatedstore_1","title":"<code>federatedstore.FederatedStore</code>","text":"<ul> <li>The method <code>updateOperationForGraph(Operation, Graph)</code> has been removed. Use <code>FederatedStoreUtil.updateOperationForGraph(Operation, Graph)</code> instead.</li> <li>The method <code>addGraphs(Set&lt;String&gt; graphAuths, String addingUserId, GraphSerialisable... graphs)</code> has been removed. The following can be used instead:<ul> <li><code>addGraphs(Set&lt;String&gt; graphAuths, String addingUserId, boolean isPublic, GraphSerialisable... graphs)</code></li> <li><code>addGraphs(Set&lt;String&gt; graphAuths, String addingUserId, boolean isPublic, boolean disabledByDefault, GraphSerialisable... graphs)</code></li> <li><code>addGraphs(Set&lt;String&gt; graphAuths, String addingUserId, boolean isPublic, boolean disabledByDefault, AccessPredicate readAccessPredicate, AccessPredicate writeAccessPredicate, GraphSerialisable... graphs)</code></li> <li><code>addGraphs(FederatedAccess access, GraphSerialisable... graphs)</code></li> </ul> </li> </ul>"},{"location":"gaffer2.0/deprecations/#federatedstoreoperationremovegraph","title":"<code>federatedstore.operation.RemoveGraph</code>","text":"<ul> <li>The method <code>Builder.setGraphId(final String graphId)</code> has been removed.</li> <li>Use <code>Builder.graphId(final String graphId)</code> which has identical behaviour instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#graphgraph","title":"<code>graph.Graph</code>","text":"<ul> <li>The methods <code>Builder.graphId</code>, <code>Builder.library</code>, <code>Builder.view</code>, <code>Builder.addHook</code>, <code>Builder.addHooks</code> have all been removed in all forms.</li> <li>Instead of using these methods, use <code>.config()</code> to set the <code>graphConfig</code>.</li> </ul>"},{"location":"gaffer2.0/deprecations/#hdfsoperationmapreduce","title":"<code>hdfs.operation.MapReduce</code>","text":"<ul> <li>The methods <code>getNumReduceTasks()</code> and <code>setNumReduceTasks(Integer)</code> have been removed.</li> <li>Gaffer\u2019s operations that inherit <code>MapReduce</code> did not make use of <code>numReduceTasks</code>, either setting it to a constant number in the <code>JobFactory</code> or using Accumulo to automatically set the number (recommended for performance) and using min/max to keep it within a range. Therefore, <code>numReduceTasks</code>, <code>getNumReduceTasks</code> and <code>setNumReduceTasks</code> have been removed from this interface.</li> </ul>"},{"location":"gaffer2.0/deprecations/#hdfsoperationaddelementsfromhdfs","title":"<code>hdfs.operation.AddElementsFromHdfs</code>","text":"<ul> <li>The methods <code>getNumReduceTasks()</code> and <code>setNumReduceTasks(Integer)</code> have been removed.</li> <li>The number of reduce tasks should not be set.  By default the number of reduce tasks should match the number of tablets.  Use minimum and maximum reduce tasks to specify boundaries for the number of reduce tasks.</li> </ul>"},{"location":"gaffer2.0/deprecations/#hdfsoperationsampledataforsplitpoints","title":"<code>hdfs.operation.SampleDataForSplitPoints</code>","text":"<ul> <li>The methods <code>getNumReduceTasks()</code> and <code>setNumReduceTasks(Integer)</code> have been removed.</li> <li>These methods were not required as <code>NumReduceTasks</code> was always set to 1 in any case.</li> </ul>"},{"location":"gaffer2.0/deprecations/#jobtrackerjobdetail","title":"<code>jobtracker.JobDetail</code>","text":"<ul> <li>The constructors which took <code>userId</code> as a <code>String</code> have been removed.</li> <li>Instead, a <code>User</code> (<code>uk.gov.gchq.gaffer.user.User</code>) should be used in its place. See the Builder for User.</li> <li><code>getUserId</code> and <code>setUserId</code> have also been removed. For getting the <code>UserId</code>, <code>getUser().getUserId()</code> can be used instead. See the Javadoc for User.</li> </ul>"},{"location":"gaffer2.0/deprecations/#jsonserialisationjsonserialiser","title":"<code>jsonserialisation.JSONSerialiser</code>","text":"<ul> <li>The method <code>update(final String jsonSerialiserClass, final String jsonSerialiserModules)</code> has been removed.</li> <li>Use <code>update(final String jsonSerialiserClass, final String jsonSerialiserModules, final Boolean strictJson)</code> instead. Passing <code>strictJson</code> as <code>null</code> will result in the same behaviour.</li> </ul>"},{"location":"gaffer2.0/deprecations/#operationoperation","title":"<code>operation.Operation</code>","text":"<ul> <li>The method <code>asOperationChain(final Operation operation)</code> has been removed.</li> <li>Use <code>OperationChain.wrap</code> with the <code>Operation</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#operationimplgetwalks","title":"<code>operation.impl.GetWalks</code>","text":"<ul> <li>The method <code>Builder.operation</code> has been removed.</li> <li>Use the vararg method <code>Builder.addOperations</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#operationimplsplitstore","title":"<code>operation.impl.SplitStore</code>","text":"<ul> <li>This class has been removed.</li> <li>It is replaced by <code>SplitStoreFromFile</code> which is identical except in name.</li> </ul>"},{"location":"gaffer2.0/deprecations/#operationimpljoinmethodsjoinfunction","title":"<code>operation.impl.join.methods.JoinFunction</code>","text":"<ul> <li>The method <code>join(final Iterable keys, final String keyName, final String matchingValuesName, final Match match, final Boolean flatten)</code> which was not implemented has been removed.</li> </ul>"},{"location":"gaffer2.0/deprecations/#restsystemproperty","title":"<code>rest.SystemProperty</code>","text":"<ul> <li><code>GRAPH_ID</code>, <code>GRAPH_HOOKS_PATH</code>, <code>GRAPH_LIBRARY_PATH</code> and <code>GRAPH_LIBRARY_CONFIG</code> have been removed.</li> <li>These config options have been removed in favour of providing a <code>graphConfig</code> JSON and using <code>GRAPH_CONFIG_PATH</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#restservicev2exampleexamplesfactory","title":"<code>rest.service.v2.example.ExamplesFactory</code>","text":"<ul> <li>This class has been removed.</li> <li>It is replaced by <code>uk.gov.gchq.gaffer.rest.factory.ExamplesFactory</code>, which can be used instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#storestoreproperties","title":"<code>store.StoreProperties</code>","text":"<ul> <li>Store ID (<code>gaffer.store.id</code>) and related methods (<code>getId()</code> + <code>setId(String)</code>) have been removed.</li> <li>The ID is instead set in <code>GraphLibrary</code> when adding (with <code>add</code>) the <code>StoreProperties</code>.</li> <li>See the Javadoc for GraphLibrary for more detail.</li> </ul>"},{"location":"gaffer2.0/deprecations/#storecontext","title":"<code>store.Context</code>","text":"<ul> <li>The private constructor <code>Context(final User user, final Map&lt;String, Object&gt; config, final String jobId)</code> has been removed; along with the <code>jobId(String)</code> method.</li> <li>Use <code>Context(final User user, final Map&lt;String, Object&gt; config)</code> instead. This does not support supplying the Job ID, this will be set automatically. To get the Job ID use <code>.getJobId()</code>.</li> </ul>"},{"location":"gaffer2.0/deprecations/#storeschematypedefinition","title":"<code>store.schema.TypeDefinition</code>","text":"<ul> <li>The method <code>getSerialiserClass()</code> has been removed. Instead, use <code>getSerialiser()</code> with <code>.getClass()</code> and related methods.</li> <li>The method <code>setSerialiserClass(String)</code> has been removed. Instead, set the Serialiser directly using <code>setSerialiser(Serialiser)</code>.</li> </ul>"},{"location":"gaffer2.0/deprecations/#storeschemaschema","title":"<code>store.schema.Schema</code>","text":"<ul> <li>Schema ID (<code>gaffer.store.id</code>) and related methods have been removed. The ID is now defined in <code>GraphLibrary</code> when adding the schema.</li> <li><code>timestampProperty</code> and related methods have been removed. Instead, this is specified by setting <code>\"config\": {\"timestampProperty\": \"timestamp\"}</code> (where <code>\"timestamp\"</code> is the property name to use as a time stamp) in the Schema. See this example schema for more info.</li> <li>The method <code>getVertexSerialiserClass()</code> has been removed. It can be replaced by calling <code>vertexSerialiser.getClass()</code> and converting the result as appropriate, e.g. <code>getVertexSerialiserClass()</code> used <code>SimpleClassNameIdResolver.getSimpleClassName(vertexSerialiser.getClass())</code>.</li> </ul>"},{"location":"gaffer2.0/deprecations/#storelibrarygraphlibrary","title":"<code>store.library.GraphLibrary</code>","text":"<ul> <li>The method <code>addSchema(final Schema schema)</code> has been removed. Use <code>addSchema(final String id, final Schema schema)</code> instead.</li> <li>The method <code>addProperties(final StoreProperties properties)</code> has been removed. Use <code>addProperties(final String id, final StoreProperties properties)</code> instead.</li> <li>Both of these now require the schema ID to be supplied.</li> </ul>"},{"location":"gaffer2.0/deprecations/#storeoperationoperationchainvalidator","title":"<code>store.operation.OperationChainValidator</code>","text":"<ul> <li>The method <code>validateViews(final Operation op, final ValidationResult validationResult, final Schema schemaNotUsed, final Store store)</code> has been removed. Use <code>validateViews(final Operation op, final User user, final Store store, final ValidationResult validationResult)</code> instead, passing <code>user</code> as <code>null</code> will result in the same behaviour.</li> <li>The method <code>validateComparables(final Operation op, final ValidationResult validationResult, final Schema schemaNotUsed, final Store store)</code> has been removed. Use <code>validateComparables(final Operation op, final User user, final Store store, final ValidationResult validationResult)</code> instead, passing <code>user</code> as <code>null</code> will result in the same behaviour.</li> </ul>"},{"location":"gaffer2.0/deprecations/#storeoperationhandlernamedcachenamedviewcache","title":"<code>store.operation.handler.named.cache.NamedViewCache</code>","text":"<ul> <li>The method <code>deleteNamedView(final String name)</code> has been removed. Use <code>deleteNamedView(final String name, final User user)</code> instead, passing <code>user</code> as <code>null</code> will result in the same behaviour.</li> <li>The method <code>getNamedView(final String name)</code> has been removed. Use <code>getNamedView(final String name, final User user)</code> instead.</li> <li>The method <code>getAllNamedViews()</code> has been removed. Use <code>getAllNamedViews(final User user)</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#typesintegerfreqmap","title":"<code>types.IntegerFreqMap</code>","text":"<ul> <li>This class has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.types.FreqMap</code> instead, this is identical except for using Long rather than Integer.</li> </ul>"},{"location":"gaffer2.0/deprecations/#typesfunctionintegerfreqmapaggregator","title":"<code>types.function.IntegerFreqMapAggregator</code>","text":"<ul> <li>This class has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.types.function.FreqMapAggregator</code> instead.</li> </ul>"},{"location":"gaffer2.0/deprecations/#serialisationintegerfreqmapserialiser","title":"<code>serialisation.IntegerFreqMapSerialiser</code>","text":"<ul> <li>This class has been removed.</li> <li>Use <code>uk.gov.gchq.gaffer.serialisation.FreqMapSerialiser</code> instead.</li> </ul>"},{"location":"gaffer2.0/federation-changes/","title":"Federated Store Changes","text":"<p>This page contains information on the changes to Gaffer's Federated Store. This functionality was introduced in version <code>2.0.0-alpha-0.4</code> of Gaffer. The main changes were the addition of the Federated Operation, and a change to how results are merged by default.</p>"},{"location":"gaffer2.0/federation-changes/#the-federated-operation","title":"The Federated Operation","text":"<p>The <code>FederatedOperationChain</code> was removed and replaced with a new Operation, the <code>FederatedOperation</code>. This was added to improve the control you have over how operations are federated. The Federated Operation has 3 key parameters: <code>operation</code>, <code>graphIds</code> and <code>mergeFunction</code>: <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n},\n\"graphIds\": [ \"graphA\", \"graphB\" ],\n\"mergeFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n}\n}\n</code></pre></p>"},{"location":"gaffer2.0/federation-changes/#required-parameter-operation","title":"Required parameter: operation","text":"<p>This is the Operation you wish to be federated to the subgraphs. This can be a single Operation or an OperationChain. If you use an OperationChain, then the whole chain will be sent to the subgraphs.  </p>"},{"location":"gaffer2.0/federation-changes/#optional-parameter-graphids","title":"Optional parameter: graphIds","text":"<p>This is a list of graph IDs which you want to send the operation to.  </p> <p>If the user does not specify <code>graphIds</code> in the Operation, then the <code>storeConfiguredGraphIds</code> for that store will be used. If the admin has not configured the <code>storeConfiguredGraphIds</code> then all graphIds will be used.  </p> <p>For information on sending different operations in one chain to different subgraphs, see below.  </p>"},{"location":"gaffer2.0/federation-changes/#optional-parameter-mergefunction","title":"Optional parameter: mergeFunction","text":"<p>The <code>mergeFunction</code> parameter is the Function you want to use when merging the results from the subgraphs.  </p> <p>If the user does not specify a <code>mergeFunction</code> then it will be selected from the <code>storeConfiguredMergeFunctions</code> for that store. If the admin has not configured the <code>storeConfiguredMergeFunctions</code>, it will contain pre-populated <code>mergeFunctions</code>. Lastly, if a suitable <code>mergeFunction</code> is not found then a default <code>ConcatenateMergeFunction</code> is used.  </p> <p>For example, when GetElements is used as the operation inside a FederatedOperation and the user hasn't specified a <code>mergeFunction</code>, the pre-populated <code>ApplyViewToElementsFunction</code> will be selected from <code>storeConfiguredMergeFunctions</code>, unless the admin configured it to use something else.  </p>"},{"location":"gaffer2.0/federation-changes/#migrating-to-a-federatedoperation","title":"Migrating to a FederatedOperation","text":"<p>Previously, graphIds were selected in queries with the now deprecated option: <code>gaffer.federatedstore.operation.graphIds</code>. This is being supported while users migrate to using a FederatedOperation.  </p>"},{"location":"gaffer2.0/federation-changes/#sending-an-operation-to-specific-stores","title":"Sending an Operation to specific stores","text":"<p>As mentioned, the <code>gaffer.federatedstore.operation.graphIds</code> option is still being supported so if you have an Operation using that option, it will continue to work. Despite the option still being supported, we recommend you migrate to using a FederatedOperation.  </p> <p>The <code>gaffer.federatedstore.operation.graphIds</code> option does not work an OperationChain. Previously, if you wanted to send an entire OperationChain to specific graphs, then you had to use a FederatedOperationChain. This has been replaced by a FederatedOperation with an OperationChain as the payload. For migration, see below.  </p>"},{"location":"gaffer2.0/federation-changes/#deprecated-graphids-option-on-a-single-operation","title":"Deprecated graphIds option on a single Operation","text":"<pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\",\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphA\"\n}\n}\n</code></pre>"},{"location":"gaffer2.0/federation-changes/#new-federatedoperation-graphids-on-a-single-operation","title":"New FederatedOperation graphIds on a single Operation","text":"<pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n},\n\"graphIds\": [ \"graphA\" ]\n}\n</code></pre>"},{"location":"gaffer2.0/federation-changes/#deprecated-graphids-option-inside-an-operationchain","title":"Deprecated graphIds option inside an OperationChain","text":"<pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"ExampleOperation1\",\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphA\"\n}\n},\n{\n\"class\": \"ExampleOperation2\",\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphB\"\n}\n}\n]\n}\n</code></pre>"},{"location":"gaffer2.0/federation-changes/#new-federatedoperation-graphids-inside-an-operationchain","title":"New FederatedOperation graphIds inside an OperationChain","text":"<pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation1\"\n},\n\"graphIds\": [ \"graphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation2\"\n},\n\"graphIds\": [ \"graphB\" ]\n}\n]\n}\n</code></pre>"},{"location":"gaffer2.0/federation-changes/#breaking-change-removal-of-federatedoperationchain","title":"Breaking change: Removal of FederatedOperationChain","text":"<p>The FederatedOperationChain has been removed, and where you would have used it before you should instead use a FederatedOperation with an OperationChain inside.  </p> <p>This is useful if you have an OperationChain and want to send different parts of the chain to different subgraphs.</p>"},{"location":"gaffer2.0/federation-changes/#individually-sending-a-sequence-of-operations-to-a-subgraph","title":"Individually sending a sequence of Operations to a subgraph","text":"<p>You could send a sequence of operations within one chain to the same subgraph using <code>graphIds</code>, however, this is not always efficient: <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation1\"\n},\n\"graphIds\": [ \"graphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation2\"\n},\n\"graphIds\": [ \"graphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation3\"\n},\n\"graphIds\": [ \"graphB\" ]\n}\n]\n}\n</code></pre></p>"},{"location":"gaffer2.0/federation-changes/#removed-federatedoperationchain-sending-a-sequence-of-operations-to-a-subgraph","title":"Removed FederatedOperationChain sending a sequence of operations to a subgraph","text":"<p>It is more efficient to group together sequences of Operations that will go to the same subgraph. This used to be done with a FederatedOperationChain: <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperationChain\",\n\"operations\": {\n[\n\"class\": \"ExampleOperation1\",\n\"class\": \"ExampleOperation2\"\n]\n},\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphA\"\n}\n},\n{\n\"class\": \"ExampleOperation3\",\n\"options\": {\n\"gaffer.federatedstore.operation.graphIds\": \"graphB\"\n}\n}\n]\n}\n</code></pre></p>"},{"location":"gaffer2.0/federation-changes/#new-federatedoperation-sending-a-sequence-of-operations-to-a-subgraph","title":"New FederatedOperation sending a sequence of operations to a subgraph","text":"<p>Now you should instead wrap an OperationChain inside a FederatedOperation: <pre><code>{\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": [\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n\"operations\": {\n[\n\"class\": \"ExampleOperation1\",\n\"class\": \"ExampleOperation2\"\n]\n}\n},\n\"graphIds\": [ \"graphA\" ]\n},\n{\n\"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n\"operation\": {\n\"class\": \"ExampleOperation3\"\n},\n\"graphIds\": [ \"graphB\" ]\n}\n]\n}\n</code></pre></p>"},{"location":"gaffer2.0/federation-changes/#default-results-merging","title":"Default results merging","text":"<p>As described above, FederatedStores now have <code>storeConfiguredMergeFunctions</code> that dictate how the FederatedStore will merge results from different subgraphs dependent on the Operation.  </p> <p>In places, these new defaults do differ from previous behaviour, hence results will too. This can be overriden on a per Operation basis using the <code>mergeFunction</code> parameter described above, or a per store basis by overriding <code>storeConfiguredMergeFunctions</code>. The previous behaviour was that all Operation results were concatenated together, this is now a mergeFunction within Gaffer called <code>ConcatenateMergeFunction</code>. Therefore, if you wanted a FederatedOperation to use this old behaviour, you can set the <code>mergeFunction</code> to <code>ConcatenateMergeFunction</code> (as shown above).  </p>"},{"location":"gaffer2.0/federation-changes/#new-merge-function-examples","title":"New Merge function examples","text":"<p>By default, <code>GetElements</code> results will be merged with <code>ApplyViewToElementsFunction</code>. This uses the View from the operation and applies it to all of the results, meaning the results are now re-aggregated and re-filtered using the Schema, locally in the FederatedStore. This makes the results look like they came from one graph, rather than getting back a list of Elements from different subgraphs.  </p> <p>By default, <code>GetTraits</code> results will be merged with <code>CollectionIntersect</code>. This returns the intersection of common store traits from the subgraphs. This behaviour is the same, but now it can be overriden.  </p> <p>By default, <code>GetSchema</code> results will be merged with <code>MergeSchema</code>. This returns an aggregated schema from the subgraphs, unless there is a conflict. This behaviour is the same, but now it can be overriden. For example, you may wish to use the <code>ConcatenateMergeFunction</code> if there is a schema conflict.  </p>"},{"location":"gaffer2.0/federation-changes/#default-storeconfiguredmergefunctions","title":"Default storeConfiguredMergeFunctions","text":"Operation Merge function GetElements ApplyViewToElementsFunction GetAllElements ApplyViewToElementsFunction GetSchema MergeSchema GetTraits CollectionIntersect others ConcatenateMergeFunction"},{"location":"gaffer2.0/log4j/","title":"Log4j in Gaffer","text":"<p>This page contains information on how logging is done in Gaffer and on previous use of Log4j in Gaffer.</p>"},{"location":"gaffer2.0/log4j/#log4j-version","title":"Log4j Version","text":"<p>Log4j version 1 (1.2.17), was used by Gaffer versions 1.21 and below. From Gaffer 1.22, Log4j was replaced with Reload4j. The newer version of Log4j, Log4j2 - which is susceptible to the major Log4Shell attack, has never been used by Gaffer or its dependencies. </p>"},{"location":"gaffer2.0/log4j/#how-logging-is-done","title":"How Logging is done","text":"<p>Gaffer uses SLF4J (Simple Logging Facade for Java) for all logging. This is a framework/abstraction layer which allows for different loggers to be used (known as bindings). The binding used by Gaffer is <code>org.slf4j:slf4j-reload4j:jar:1.7.36</code>.</p>"},{"location":"gaffer2.0/log4j/#impact-of-log4j-removal-on-projects-incorporating-gaffer","title":"Impact of Log4j removal on projects incorporating Gaffer","text":"<p>Gaffer now uses Reload4j via SLF4J. This may impact projects which are using Gaffer if they are using Log4j directly or through a transitive dependency. To help avoid dependency conflicts, we have configured <code>maven-enforcer-plugin</code> to block use of Log4j with Gaffer. If you are using Gaffer in your project and your build fails because of this plugin, you will need to add a dependency exclusion to any dependencies which depend transitively on Log4j. These can be found by using the Maven dependency tree (ideally in verbose mode).</p>"},{"location":"gaffer2.0/log4j/#dependencies-of-gaffer-using-log4j-1217","title":"Dependencies of Gaffer using Log4j 1.2.17","text":"<p>Some major Gaffer dependencies (listed below) use Log4j internally (either directly or through SLF4J). From Gaffer version 1.22 these transitive dependencies are excluded and replaced with Reload4j, such that Log4j does not appear on the classpath at all.</p> <ul> <li>GCHQ Koryphe 1.14.0 - Uses SLF4J with Log4j.</li> <li>Apache HBase 1.3.0 - Multiple artefacts used from the group <code>org.apache.hbase</code>. All depend directly on Log4j.</li> <li>Apache Hadoop 2.6.5 - Multiple artefacts used from the group <code>org.apache.hadoop</code>. All depend directly on Log4j.</li> <li>Apache Accumulo 1.9.3 - Multiple artefacts used from the group <code>org.apache.accumulo</code>. All depend directly on Log4j.</li> <li>Apache Kafka 0.10.0.0 - Artefact depends indirectly on Log4j through a sub dependency (<code>com.101tec:zkclient</code>).</li> <li>Apache Spark 2.3.2 - Artefact depends directly on Log4j.</li> </ul>"},{"location":"gaffer2.0/log4j/#log4j-vulnerabilities","title":"Log4j Vulnerabilities","text":"<p>Current vulnerabilities in Log4j 1.12.17 relate to the JDBC, SMTP and JMS appenders, the JMS Sink and the Socket Server. Gaffer never used any of this. In its default configuration, we don't believe Gaffer is vulnerable to any of these problems. If the Log4j configuration is altered, changes could be made which may cause Gaffer to be vulnerable to one or more of the above vulnerabilities. Standard security processes to prevent unauthorised access and modification of configuration files should preclude this possibility.</p>"},{"location":"getting-started/basics/","title":"Gaffer Basics","text":"<p>Work in Progress</p> <p>This page is under construction.</p> <p>Proposed content: Guide covering key Gaffer concepts (e.g. Store, Schema).</p>"},{"location":"getting-started/deploying/","title":"Deploying Gaffer","text":"<p>Work in Progress</p> <p>This page is under construction.</p> <p>Proposed content: Guide with info on how to install and configure a production level Gaffer with Accumulo.</p>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>Work in Progress</p> <p>This page is under construction.</p> <p>Proposed content: A quickstart guide which contains steps to get a local instance of Gaffer going.</p>"},{"location":"getting-started/guide/csv/","title":"Csv Import and Export","text":"<p>Gaffer supports both importing from and exporting to csv.  </p> <p>If you configure your Gaffer graph to support the <code>ImportFromLocalFile</code> and <code>ExportToLocalFile</code> operations, then it can do this from/to a local file.  </p> Enabling these operations on your Gaffer graph <p>To enable these operations on your Gaffer graph, you would need to add the following to your <code>operationsDeclarations.json</code>: <pre><code>{\n\"operations\": [\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ImportFromLocalFile\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ImportFromLocalFileHandler\"\n}\n},\n{\n\"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ExportToLocalFile\",\n\"handler\": {\n\"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ExportToLocalFileHandler\"\n}\n}\n]\n}\n</code></pre></p>"},{"location":"getting-started/guide/csv/#csv-import","title":"Csv Import","text":"<p>Importing is done with an OperationChain in multiple parts: <pre><code>{\n\"class\": \"OperationChain\",\n\"operations\": [\n{\n\"class\": \"ImportFromLocalFile\", // (1)\n\"filePath\": \"mydata.csv\"\n},\n{\n\"class\": \"GenerateElements\", // (2)\n\"elementGenerator\": \"Neo4jCsvElementGenerator\"\n},\n{\n\"class\": \"AddElements\" // (3)\n}\n]\n}\n</code></pre></p> <ol> <li>The <code>ImportFromLocalFile</code> operation reads each line from the file <code>mydata.csv</code> and will stream each string into the next parts of the chain.  </li> <li>The <code>GenerateElements</code> operation will transform each line of the file into a Gaffer Element. You will need to provide an element generator that is suitable for the file you have provided. The two CsvElementGenerators provided in core Gaffer are <code>Neo4jElementGenerator</code> and <code>NeptuneCsvElementGenerator</code>.  </li> <li>Finally, the stream of Gaffer Elements are added with an <code>AddElements</code> operation.  </li> </ol>"},{"location":"getting-started/guide/csv/#csv-export","title":"Csv Export","text":"<p>Exporting to csv is done with a similar OperationChain: <pre><code>{\n\"class\": \"OperationChain\",\n\"operations\": [\n{\n\"class\": \"GetAllElements\" // (1)\n},\n{\n\"class\": \"ToCsv\", // (2)\n\"csvGenerator\": \"Neo4jCsvGenerator\"\n},\n{\n\"class\": \"ExportToLocalFile\", // (3)\n\"filePath\": \"output.csv\"\n}\n]\n}\n</code></pre></p> <ol> <li>Firstly, you need to get the Elements which you want to export, in this example we simply <code>GetAllElements</code>.  </li> <li>The <code>ToCsv</code> operation is then used to turn each Element into a csv formatted string. You must supply a <code>CsvGenerator</code> to do this. You can build a custom <code>CsvGenerator</code>, or use a supplied one. The two <code>CsvGenerators</code> provided in core Gaffer are <code>Neo4jCsvGenerator</code> and <code>NeptuneCsvGenerator</code>.  </li> <li>Then the <code>ExportToLocalFile</code> operation is used to save this string output into a local file.  </li> </ol>"},{"location":"getting-started/guide/csv/#formats","title":"Formats","text":""},{"location":"getting-started/guide/csv/#custom-formats","title":"Custom formats","text":"<p>You can customise CsvGenerator to create a custom export format in a ToCsv operation. For example, the following operation: <pre><code>{\n\"class\": \"ToCsv\",\n\"csvGenerator\":\n{\n\"class\": \"CsvGenerator\",\n\"fields\": [\"prop1\", \"SOURCE\", \"DESTINATION\", \"prop2\", \"GROUP\"],\n\"constants\": [\"constant1\", \"constant2\"]\n}\n}\n</code></pre> Would produce csv rows that look like: <pre><code>prop1Value,sourceValue,destinationValue,prop2,groupValue,constant1,constant2\n</code></pre></p> <p>Currently, custom import formats are not supported. Instead you should use one of the two OpenCypher formats.  </p>"},{"location":"getting-started/guide/csv/#opencypher-formats","title":"OpenCypher Formats","text":"<p>Core Gaffer has some generators provided that can import from and export to OpenCypher csvs. These will work with other graph databases like Neo4j and Neptune.  </p> <p>Please note that when using these, Gaffer might change your property name headers. All instances of <code>-</code> are replaced with <code>_</code>, and invalid characters are stripped as outlined in PropertiesUtil.  </p> <p>As shown later in the examples, OpenCypher formats let you dictate property types in the header, like <code>propertyName:type</code>. Below is a table that shows which Gaffer tansform function is used to deserialise each OpenCypher data type during import:</p> Gaffer Transform Function OpenCypher Data Types <code>ToString</code> <code>String</code> <code>Char</code> <code>Duration</code> <code>Point</code> <code>Date</code> <code>LocalDate</code> <code>LocalDateTime</code> <code>ToBoolean</code> <code>Bool</code> <code>Boolean</code> <code>ToInteger</code> <code>Int</code> <code>Short</code> <code>Byte</code> <code>ToLong</code> <code>Long</code> <code>ToFloat</code> <code>Float</code> <code>ToDouble</code> <code>Double</code> <code>ParseTime</code> <code>DateTime</code>"},{"location":"getting-started/guide/csv/#neo4j-generators","title":"Neo4j Generators","text":"<p>You can import csv from Neo4j using the <code>Neo4jCsvElementGenerator</code> and export using the <code>Neo4jCsvGenerator</code>. The format used is defined here.  </p> Example <pre><code>_id,  name:String,  age:Int,  lang:String,   _label,   _start,  _end,    _type,  weight:Double\nv1,        marko,       29,             ,   person,         ,      ,         ,\nv2,          lop,       ,           java, software,         ,      ,         ,\ne1,             ,         ,             ,         ,       v1,    v2,  created,            0.4\n</code></pre>"},{"location":"getting-started/guide/csv/#neptune-generators","title":"Neptune Generators","text":"<p>You can import csv from Neptune using the <code>NeptuneCsvElementGenerator</code> and export using the <code>NeptuneCsvGenerator</code>. The format used is defined here.  </p> Example <pre><code>:ID,  name:String,  age:Int,  lang:String,  :LABEL,  :START_ID,  :END_ID,   :TYPE,  weight:Double\nv1,        marko,       29,             ,  person,           ,         ,        ,\nv2,          lop,         ,         java,software,           ,         ,        ,\ne1,             ,         ,             ,        ,         v1,       v2, created,            0.4\n</code></pre>"},{"location":"getting-started/guide/guide/","title":"Gaffer Guide","text":"<p>Work in Progress</p> <p>This page is under construction.</p> <p>Proposed content: Guide to cover in more detail/lower level than the basic guide; content would link to reference pages.</p>"},{"location":"getting-started/guide/rest-api-sketches/","title":"Using Sketches with the REST API","text":"<p>This page explains some nuances and special steps required when using classes from the Sketches library with the REST API.</p>"},{"location":"getting-started/guide/rest-api-sketches/#sketches-library","title":"Sketches Library","text":"<p>To learn more about the Sketches library see advanced properties reference page.  The sketches library is included with the Map and Accumulo stores. The  SketchesJsonModules  are returned in <code>String</code> format by the <code>getJsonSerialiserModules</code> method in the  Map  and Accumulo  property stores. The modules are then loaded by the JSONSerialiser  and used during the deserialisation of the REST JSON queries.</p>"},{"location":"getting-started/guide/rest-api-sketches/#hyperloglogplus","title":"HyperLogLogPlus","text":"<p>The <code>HyperLogLogPlus</code> sketch can be used to store an approximation of  cardinality of an element. The <code>JSON</code> of the query is converted to <code>Java</code> <code>objects</code> during desialisation using the <code>JSONSerialiser</code>. During the  deserialisation the <code>HyperLogLogPlus</code> JSON representation is converted to a  <code>HyperLogLogPlus</code> Java object using the <code>ObjectMapper</code> module which uses the  HyperLogLogPlusJsonDeserialiser.  In order to convert the <code>offer</code> values (which are offered to the  <code>HyperLogLogPlus</code> on instantiation) to <code>Java</code> objects, the <code>JSON</code> values  need to contain the special <code>string</code> field class containing the class name  of the object. The <code>deserialiser</code> uses this <code>class</code> field when deserialising  using the JSONSerialiser <code>deserialise</code> method. The <code>HyperLogLogPlus</code> object is instantiated and offered  the values. The object can then be serialised and stored in the datastore.  For Gaffer, at present only the ClearSpring  algorithm is used which requires that the object is offered using its <code>toString</code>  representation of the object.</p> Note <p>As the algorithm uses the <code>toString</code> method, any user defined type  introduced must override the <code>toString</code> method returning meaningful string  value representing the object rather than the default class instance  identifier. User defined types can be introduced by either adding further  types  to <code>Gaffer</code> or by adding a <code>JAR</code> with the extra type(s) to the <code>Gaffer</code>  classpath on startup.</p> <p>The <code>HyperLogLogPlusJsonDesialiser</code> deserialises from <code>JSON</code> to <code>Java</code> using the  HyperLogLogPlusWithOffers  object. The <code>HyperLogLogPlusWithOffers</code> includes the following annotation on  the <code>List</code> field: </p> <pre><code>@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = \"class\")\nprivate List&lt;?&gt; offers = new ArrayList&lt;&gt;();\n</code></pre> <p>This signals to the <code>Jackson</code> <code>ObjectMapper</code> that it needs to look for the  <code>class</code> field in each object and translate to the correct object type.</p> <p>Java types are converted to the correct format by <code>Jackson</code> <code>ObjectMapper</code> automatically. Here are some examples of the values:</p> StringIntegerFloatDoubleLongBoolean <p><code>\"offers\": [\"valueA\", \"value2\",...]</code></p> <p><code>\"offers\": [1, 2,...]</code></p> <p><code>\"offers\": [1.1, 2.2,...]</code></p> <p><code>\"offers\": [1.1, 2.2,...]</code></p> <p><code>\"offers\": [12345678910111121314,...]</code></p> <p><code>\"offers\": [true,false,...]</code></p> <p>The user defined types require that the <code>class</code> field is added to the <code>JSON</code>  object, so it knows how to convert to the correct format on deserialisation.  Here are the <code>Gaffer</code> user defined types:</p> FreqMapCustomMapTypeValueTypeSubTypeValue <pre><code>\"offers\": [\n  {\n    \"class\": \"uk.gov.gchq.gaffer.types.FreqMap\",\n    \"test\": 1\n  },\n  ...\n]\n</code></pre> <pre><code>\"offers\": [\n  {\n    \"class\": \"uk.gov.gchq.gaffer.types.CustomMap\",\n    \"keySerialiser\": {\n      \"class\": \"uk.gov.gchq.gaffer.serialisation.implementation.BooleanSerialiser\"\n    },\n    \"valueSerialiser\": {\n      \"class\": \"uk.gov.gchq.gaffer.serialisation.implementation.BooleanSerialiser\"\n    },\n    \"jsonStorage\": []\n  },\n  ...\n]\n</code></pre> <pre><code>\"offers\": [\n  {\n    \"class\" : \"uk.gov.gchq.gaffer.types.TypeValue\",\n    \"type\" : \"type\",\n    \"value\" : \"value\"\n  },\n  ...\n]\n</code></pre> <pre><code>\"offers\": [\n  {\n    \"class\" : \"uk.gov.gchq.gaffer.types.TypeSubTypeValue\",\n    \"type\" : \"type\",\n    \"subType\" : \"subType\",\n    \"value\" : \"value\"\n  },\n  ...\n]\n</code></pre> Note <p>The subclass fields must also have the <code>class</code> field set (for  example, the <code>keySerialiser</code> <code>CustoMap</code> type) if not a standard Java Object  so that the Jackson <code>ObjectMapper</code> knows how to convert the correct values  to Java objects.</p>"},{"location":"getting-started/guide/rest-api-sketches/#composing-using-java","title":"Composing using Java","text":"<p>If you are composing the <code>HyperLogLogPlus</code> with offers using <code>Java</code> before  converting to <code>JSON</code> and sending via <code>REST</code>, you need ensure that the <code>offer</code>  objects are translated to <code>JSON</code> with the correct <code>class</code> field added.  To make sure of this, you could add the <code>sketches-library</code> JAR and use the  HyperLogLogPlusWithOffers  object to construct your query. This way you know that all the objects have the  correct field added. You can then convert the <code>HyperLogLogPlusWithOffers</code> to  JSON using the  JSONSerialiser <code>serialisation</code> method. If you want to create your own class instead, ensure  that the <code>offers</code> list has the correct annotation so the <code>class</code> is added on  conversion using by the <code>Jackson</code> <code>ObjectMapper</code>:</p> <pre><code>@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = \"class\")\nprivate List&lt;?&gt; offers = new ArrayList&lt;&gt;();\n</code></pre>"},{"location":"getting-started/guide/rest-api-sketches/#composing-using-python","title":"Composing using Python","text":"<p>To be added.</p>"},{"location":"getting-started/guide/rest-api-sketches/#hyperloglogplus-example","title":"HyperLogLogPlus Example","text":"<p>For a HyperLogLogPlus example see this section on the advanced properties reference page.</p>"},{"location":"getting-started/guide/rest-api-sketches/#adding-user-defined-types","title":"Adding user defined types","text":"<p>To add a user defined type you must ensure that:</p> <ul> <li>the type is on the <code>Gaffer</code> classpath</li> <li>the type must override the <code>toString</code> method</li> <li>the type contains the correct annotations if you are converting from <code>Java</code> to   <code>JSON</code> before sending via <code>REST</code></li> </ul> <p>The following user defined type example features the annotation required as  well as the <code>@Override</code> of the <code>toString</code> method:</p> <pre><code>@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = \"class\")\npublic class ExampleType implements Comparable&lt;ExampleType&gt;, Serializable {\n\n   private String value...;\n\n   // getters and setters\n\n   @Override\n   public String toString() {\n       return ...;\n   }\n}\n</code></pre>"},{"location":"reference/intro/","title":"Introduction","text":"<p>These Reference pages contain documentation for the Properties, Operations, Predicates, Functions and Binary Operators in Gaffer.</p> <p>Info</p> <p>In general, this documentation covers the most common use cases, it doesn't cover everything. The Javadocs for Gaffer and Koryphe have more specialised information.</p>"},{"location":"reference/binary-operators-guide/binary-operators/","title":"Binary Operators Guide","text":"<p>Binary Operators are aggregation functions. Basic operators come from the Koryphe library, the rest are part of Gaffer itself.</p>"},{"location":"reference/binary-operators-guide/binary-operators/#table-of-all-gaffer-binary-operators","title":"Table of all Gaffer Binary Operators","text":"<p>Note</p> <p>Binary Operators below which are missing a link have not been documented on this site yet.</p> <p>Some examples of Binary Operators in use can be found in the properties guide.</p> Binary Operator Origin <code>binaryoperator.AdaptedBinaryOperator</code> Koryphe <code>binaryoperator.BinaryOperatorComposite</code> Koryphe <code>binaryoperator.BinaryOperatorMap</code> Koryphe <code>impl.binaryoperator.And</code> Koryphe <code>impl.binaryoperator.CollectionConcat</code> Koryphe <code>impl.binaryoperator.CollectionIntersect</code> Koryphe <code>impl.binaryoperator.First</code> Koryphe <code>impl.binaryoperator.Last</code> Koryphe <code>impl.binaryoperator.Max</code> Koryphe <code>impl.binaryoperator.Min</code> Koryphe <code>impl.binaryoperator.Or</code> Koryphe <code>impl.binaryoperator.Product</code> Koryphe <code>impl.binaryoperator.StringConcat</code> Koryphe <code>impl.binaryoperator.StringDeduplicateConcat</code> Koryphe <code>impl.binaryoperator.Sum</code> Koryphe <code>tuple.binaryoperator.TupleAdaptedBinaryOperator</code> Koryphe <code>tuple.binaryoperator.TupleAdaptedBinaryOperatorComposite</code> Koryphe <code>data.element.function.ElementAggregator</code> Gaffer <code>types.function.FreqMapAggregator</code> Gaffer <code>bitmap.function.aggregate.RoaringBitmapAggregator</code> Gaffer <code>types.binaryoperator.CustomMapAggregator</code> Gaffer <code>time.binaryoperator.BoundedTimestampSetAggregator</code> Gaffer <code>time.binaryoperator.LongTimeSeriesAggregator</code> Gaffer <code>time.binaryoperator.RBMBackedTimestampSetAggregator</code> Gaffer <code>store.util.AggregatorUtil$IngestElementBinaryOperator</code> Gaffer <code>store.util.AggregatorUtil$IngestPropertiesBinaryOperator</code> Gaffer <code>store.util.AggregatorUtil$QueryElementBinaryOperator</code> Gaffer <code>store.util.AggregatorUtil$QueryPropertiesBinaryOperator</code> Gaffer <code>sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator</code> Gaffer <code>sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator</code> Gaffer <code>sketches.datasketches.cardinality.binaryoperator.HllUnionAggregator</code> Gaffer <code>sketches.datasketches.frequencies.binaryoperator.LongsSketchAggregator</code> Gaffer <code>sketches.datasketches.frequencies.binaryoperator.StringsSketchAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.DoublesSketchAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.DoublesUnionAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.KllFloatsSketchAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.StringsSketchAggregator</code> Gaffer <code>sketches.datasketches.quantiles.binaryoperator.StringsUnionAggregator</code> Gaffer <code>sketches.datasketches.sampling.binaryoperator.ReservoirItemsSketchAggregator</code> Gaffer <code>sketches.datasketches.sampling.binaryoperator.ReservoirItemsUnionAggregator</code> Gaffer <code>sketches.datasketches.sampling.binaryoperator.ReservoirLongsSketchAggregator</code> Gaffer <code>sketches.datasketches.sampling.binaryoperator.ReservoirLongsUnionAggregator</code> Gaffer <code>sketches.datasketches.theta.binaryoperator.SketchAggregator</code> Gaffer <code>sketches.datasketches.theta.binaryoperator.UnionAggregator</code> Gaffer"},{"location":"reference/binary-operators-guide/koryphe-operators/","title":"Koryphe Operators","text":"<p>Operators from the Koryphe library.</p>"},{"location":"reference/binary-operators-guide/koryphe-operators/#and","title":"And","text":"<p>Applies the logical AND operation to 2 booleans. Javadoc</p> <p>Input type: <code>java.lang.Boolean</code></p> Example And with Booleans or Nulls JavaJSON <pre><code>final And and = new And();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.And\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Boolean true and true java.lang.Boolean true java.lang.Boolean true and false java.lang.Boolean false java.lang.Boolean false and false java.lang.Boolean false java.lang.Boolean false and null java.lang.Boolean false java.lang.Boolean true and null java.lang.Boolean true null and null null"},{"location":"reference/binary-operators-guide/koryphe-operators/#or","title":"Or","text":"<p>Applies the logical OR operation to 2 booleans. Javadoc</p> <p>Input type: <code>java.lang.Boolean</code></p> Example Or with Booleans, Nulls or other JavaJSON <pre><code>final Or or = new Or();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Or\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Boolean true and true java.lang.Boolean true java.lang.Boolean true and false java.lang.Boolean true java.lang.Boolean false and false java.lang.Boolean false java.lang.Boolean false and null java.lang.Boolean false java.lang.Boolean true and null java.lang.Boolean true null and null null java.lang.String test and 3 ClassCastException: java.lang.String cannot be cast to java.lang.Boolean java.lang.Integer 0 and 0 ClassCastException: java.lang.Integer cannot be cast to java.lang.Boolean java.lang.Integer 1 and 0 ClassCastException: java.lang.Integer cannot be cast to java.lang.Boolean"},{"location":"reference/binary-operators-guide/koryphe-operators/#first","title":"First","text":"<p>Returns the first non-null value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example First with String and Null JavaJSON <pre><code>final First first = new First();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String first and second java.lang.String first java.lang.String first and null java.lang.String first null and second java.lang.String second null and null null"},{"location":"reference/binary-operators-guide/koryphe-operators/#min","title":"Min","text":"<p>Returns the min value. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example Min with String, Integer and Null JavaJSONPython <pre><code>final Min function = new Min();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n}\n</code></pre> <pre><code>g.Min()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Integer 5 and 6 java.lang.Integer 5 java.lang.String inputString and anotherInputString java.lang.String anotherInputString null and 1 java.lang.Integer 1"},{"location":"reference/binary-operators-guide/koryphe-operators/#max","title":"Max","text":"<p>Returns the max value. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example Max with String, Integer and Null JavaJSONPython <pre><code>final Max function = new Max();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n</code></pre> <pre><code>g.Max()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Integer 5 and 6 java.lang.Integer 6 java.lang.String inputString and anotherInputString java.lang.String inputString null and 1 java.lang.Integer 1"},{"location":"reference/binary-operators-guide/koryphe-operators/#product","title":"Product","text":"<p>Calculates the product of 2 numbers. Javadoc</p> <p>Input type: <code>java.lang.Number</code></p> Example Product with Numbers JavaJSON <pre><code>final Product product = new Product();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Product\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Long 20 and 3 java.lang.Long 60 java.lang.Integer 300 and 400 java.lang.Integer 120000 java.lang.Double 0.0 and 3.0 java.lang.Double 0.0 java.lang.Short 50 and 50 java.lang.Short 2500 java.lang.Short 500 and 500 java.lang.Short 32767 java.lang.Integer -5 and 5 java.lang.Integer -25 java.lang.Long 20 and null java.lang.Long 20"},{"location":"reference/binary-operators-guide/koryphe-operators/#sum","title":"Sum","text":"<p>Calculates the sum of 2 numbers. Javadoc</p> <p>Input type: <code>java.lang.Number</code></p> Example Sum with Numbers JavaJSONPython <pre><code>final Sum sum = new Sum();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n</code></pre> <pre><code>g.Sum()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.Long 20 and 3 java.lang.Long 23 java.lang.Integer 300 and 400 java.lang.Integer 700 java.lang.Double 0.0 and 3.0 java.lang.Double 3.0 java.lang.Short 50 and 50 java.lang.Short 100 java.lang.Short 30000 and 10000 java.lang.Short 32767 java.lang.Integer -5 and 5 java.lang.Integer 0 java.lang.Long 20 and null java.lang.Long 20"},{"location":"reference/binary-operators-guide/koryphe-operators/#collectionconcat","title":"CollectionConcat","text":"<p>Concatenates two collections together. Javadoc</p> <p>Input type: <code>java.util.Collection</code></p> Example CollectionConcat JavaJSONPython <pre><code>final CollectionConcat collectionConcat = new CollectionConcat();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n}\n</code></pre> <pre><code>g.CollectionConcat()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.util.ArrayList [test1] and [test2, test3] java.util.ArrayList [test1, test2, test3] java.util.ArrayList [1] and [test2, test3] java.util.ArrayList [1, test2, test3] java.util.ArrayList [] and [abc, cde] java.util.ArrayList [abc, cde] java.util.ArrayList [test1] and null java.util.ArrayList [test1] java.util.HashSet [a, b] and [b, c] java.util.HashSet [a, b, c]"},{"location":"reference/binary-operators-guide/koryphe-operators/#collectionintersect","title":"CollectionIntersect","text":"<p>Returns items common to two collections. Javadoc</p> <p>Input type: <code>java.util.Collection</code></p> Example CollectionIntersect JavaJSONPython <pre><code>final CollectionIntersect collectionIntersect = new CollectionIntersect();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionIntersect\"\n}\n</code></pre> <pre><code>g.CollectionIntersect()\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.util.ArrayList [test1] and [test2, test3] java.util.ArrayList [] java.util.ArrayList [1] and [1, 2] java.util.ArrayList [1] java.util.ArrayList [] and [abc, cde] java.util.ArrayList [] java.util.ArrayList [test1] and null java.util.ArrayList [test1] java.util.HashSet [a, b] and [b, c] java.util.HashSet [b]"},{"location":"reference/binary-operators-guide/koryphe-operators/#stringconcat","title":"StringConcat","text":"<p>Concatenates 2 strings. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringConcat with separator JavaJSON <pre><code>final StringConcat stringConcat = new StringConcat();\nstringConcat.setSeparator(\" \");\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\",\n\"separator\" : \" \"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String hello and world java.lang.String hello world java.lang.String abc and null java.lang.String abc null and null null Example StringConcat with default separator JavaJSON <pre><code>final StringConcat stringConcat = new StringConcat();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\",\n\"separator\" : \",\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String hello and world java.lang.String hello,world java.lang.String abc and null java.lang.String abc null and null null"},{"location":"reference/binary-operators-guide/koryphe-operators/#stringdeduplicateconcat","title":"StringDeduplicateConcat","text":"<p>Concatenates 2 strings and omits duplicates. Javadoc</p> <p>Input type: <code>type</code></p> Example StringDeduplicateConcat with separator JavaJSON <pre><code>final StringDeduplicateConcat stringDeduplicateConcat = new StringDeduplicateConcat();\nstringDeduplicateConcat.setSeparator(\" \");\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringDeduplicateConcat\",\n\"separator\" : \" \"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String hello and world java.lang.String hello world java.lang.String abc and null java.lang.String abc null and null null java.lang.String abc, and abc java.lang.String abc, abc Example StringDeduplicateConcat with default separator JavaJSON <pre><code>final StringDeduplicateConcat stringDeduplicateConcat = new StringDeduplicateConcat();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringDeduplicateConcat\",\n\"separator\" : \",\"\n}\n</code></pre> <p>Example inputs:</p> Input Type Inputs Result Type Results java.lang.String hello and world java.lang.String hello,world java.lang.String abc and null java.lang.String abc null and null null java.lang.String abc, and abc java.lang.String abc"},{"location":"reference/functions-guide/functions/","title":"Functions Guide","text":"<p>Functions. Basic functions come from the Koryphe library, the others are part of Gaffer itself.</p>"},{"location":"reference/functions-guide/functions/#table-of-all-gaffer-functions","title":"Table of all Gaffer Functions","text":"<p>Note</p> <p>Functions below which are missing a link have not been documented on this site yet.</p> Function Origin <code>impl.function.ApplyBiFunction</code> Koryphe <code>impl.function.Base64Decode</code> Koryphe <code>impl.function.CallMethod</code> Koryphe <code>impl.function.Cast</code> Koryphe <code>impl.function.Concat</code> Koryphe <code>impl.function.CreateObject</code> Koryphe <code>impl.function.CsvLinesToMaps</code> Koryphe <code>impl.function.CsvToMaps</code> Koryphe <code>impl.function.CurrentDate</code> Koryphe <code>impl.function.CurrentTime</code> Koryphe <code>impl.function.DefaultIfEmpty</code> Koryphe <code>impl.function.DefaultIfNull</code> Koryphe <code>impl.function.DeserialiseJson</code> Koryphe <code>impl.function.DeserialiseXml</code> Koryphe <code>impl.function.DictionaryLookup</code> Koryphe <code>impl.function.Divide</code> Koryphe <code>impl.function.DivideBy</code> Koryphe <code>impl.function.ExtractKeys</code> Koryphe <code>impl.function.ExtractValue</code> Koryphe <code>impl.function.ExtractValues</code> Koryphe <code>impl.function.FirstItem</code> Koryphe <code>impl.function.FirstValid</code> Koryphe <code>impl.function.FunctionChain</code> Koryphe <code>impl.function.Gunzip</code> Koryphe <code>impl.function.Identity</code> Koryphe <code>impl.function.If</code> Koryphe <code>impl.function.Increment</code> Koryphe <code>impl.function.IsEmpty</code> Koryphe <code>impl.function.IterableConcat</code> Koryphe <code>impl.function.IterableFilter</code> Koryphe <code>impl.function.IterableFlatten</code> Koryphe <code>impl.function.IterableFunction</code> Koryphe <code>impl.function.IterableLongest</code> Koryphe <code>impl.function.LastItem</code> Koryphe <code>impl.function.Length</code> Koryphe <code>impl.function.Longest</code> Koryphe <code>impl.function.MapFilter</code> Koryphe <code>impl.function.MapToTuple</code> Koryphe <code>impl.function.Multiply</code> Koryphe <code>impl.function.MultiplyBy</code> Koryphe <code>impl.function.MultiplyLongBy</code> Koryphe <code>impl.function.NthItem</code> Koryphe <code>impl.function.ParseDate</code> Koryphe <code>impl.function.ParseTime</code> Koryphe <code>impl.function.ReverseString</code> Koryphe <code>impl.function.SetValue</code> Koryphe <code>impl.function.Size</code> Koryphe <code>impl.function.StringAppend</code> Koryphe <code>impl.function.StringJoin</code> Koryphe <code>impl.function.StringPrepend</code> Koryphe <code>impl.function.StringRegexReplace</code> Koryphe <code>impl.function.StringRegexSplit</code> Koryphe <code>impl.function.StringReplace</code> Koryphe <code>impl.function.StringSplit</code> Koryphe <code>impl.function.StringTrim</code> Koryphe <code>impl.function.StringTruncate</code> Koryphe <code>impl.function.ToArray</code> Koryphe <code>impl.function.ToBoolean</code> Koryphe <code>impl.function.ToBytes</code> Koryphe <code>impl.function.ToDateString</code> Koryphe <code>impl.function.ToDouble</code> Koryphe <code>impl.function.ToFloat</code> Koryphe <code>impl.function.ToInteger</code> Koryphe <code>impl.function.ToList</code> Koryphe <code>impl.function.ToLong</code> Koryphe <code>impl.function.ToLowerCase</code> Koryphe <code>impl.function.ToNull</code> Koryphe <code>impl.function.ToSet</code> Koryphe <code>impl.function.ToString</code> Koryphe <code>impl.function.ToTuple</code> Koryphe <code>impl.function.ToUpperCase</code> Koryphe <code>tuple.TupleInputAdapter</code> Koryphe <code>tuple.function.TupleAdaptedFunction</code> Koryphe <code>tuple.function.TupleAdaptedFunctionComposite</code> Koryphe <code>function.FunctionComposite</code> Koryphe <code>function.FunctionMap</code> Koryphe <code>data.element.function.ElementTransformer</code> Gaffer <code>data.element.function.ExtractGroup</code> Gaffer <code>data.element.function.ExtractId</code> Gaffer <code>data.element.function.ExtractProperty</code> Gaffer <code>data.element.function.PropertiesTransformer</code> Gaffer <code>data.element.function.ReduceRelatedElements</code> Gaffer <code>data.element.function.ToElementTuple</code> Gaffer <code>data.element.function.ToPropertiesTuple</code> Gaffer <code>data.element.function.TupleToElements</code> Gaffer <code>data.element.function.TuplesToElements</code> Gaffer <code>data.element.function.TypeSubTypeValueToTuple</code> Gaffer <code>data.element.function.TypeValueToTuple</code> Gaffer <code>data.element.function.UnwrapEntityId</code> Gaffer <code>data.generator.CsvElementGenerator</code> Gaffer <code>data.generator.CsvGenerator</code> Gaffer <code>data.generator.JsonToElementGenerator</code> Gaffer <code>data.generator.MapGenerator</code> Gaffer <code>data.graph.function.walk.ExtractWalkEdges</code> Gaffer <code>data.graph.function.walk.ExtractWalkEdgesFromHop</code> Gaffer <code>data.graph.function.walk.ExtractWalkEntities</code> Gaffer <code>data.graph.function.walk.ExtractWalkEntitiesFromHop</code> Gaffer <code>data.graph.function.walk.ExtractWalkVertex</code> Gaffer <code>operation.data.generator.EdgeIdExtractor</code> Gaffer <code>operation.data.generator.EntityIdExtractor</code> Gaffer <code>operation.function.FromElementId</code> Gaffer <code>operation.function.FromEntityId</code> Gaffer <code>operation.function.ToElementId</code> Gaffer <code>operation.function.ToEntityId</code> Gaffer <code>operation.function.ToTrailingWildcardPair</code> Gaffer <code>rest.example.ExampleDomainObjectGenerator</code> Gaffer <code>rest.example.ExampleElementGenerator</code> Gaffer <code>rest.example.ExampleTransformFunction</code> Gaffer <code>sketches.clearspring.cardinality.HyperLogLogPlusEntityGenerator</code> Gaffer <code>sketches.clearspring.cardinality.function.IterableToHyperLogLogPlus</code> Gaffer <code>sketches.clearspring.cardinality.function.ToHyperLogLogPlus</code> Gaffer <code>sketches.datasketches.cardinality.HllSketchEntityGenerator</code> Gaffer <code>sketches.datasketches.cardinality.function.IterableToHllSketch</code> Gaffer <code>sketches.datasketches.cardinality.function.ToHllSketch</code> Gaffer <code>store.util.AggregatorUtil$ToElementKey</code> Gaffer <code>store.util.AggregatorUtil$ToIngestElementKey</code> Gaffer <code>store.util.AggregatorUtil$ToQueryElementKey</code> Gaffer <code>time.function.DateToTimeBucketEnd</code> Gaffer <code>time.function.DateToTimeBucketStart</code> Gaffer <code>time.function.MaskTimestampSetByTimeRange</code> Gaffer <code>time.function.ToSingletonTreeSet</code> Gaffer <code>time.function.ToTimeBucket</code> Gaffer <code>time.function.ToTimeBucketEnd</code> Gaffer <code>time.function.ToTimeBucketStart</code> Gaffer <code>time.function.ToTimestampSet</code> Gaffer <code>types.function.FreqMapExtractor</code> Gaffer <code>types.function.FreqMapPredicator</code> Gaffer <code>types.function.IterableToFreqMap</code> Gaffer <code>types.function.StringsToTypeSubTypeValue</code> Gaffer <code>types.function.StringsToTypeValue</code> Gaffer <code>types.function.ToFreqMap</code> Gaffer <code>types.function.ToTypeSubTypeValue</code> Gaffer <code>types.function.ToTypeValue</code> Gaffer"},{"location":"reference/functions-guide/gaffer-functions/","title":"Gaffer Functions","text":"<p>Functions which are part of Gaffer.</p>"},{"location":"reference/functions-guide/gaffer-functions/#csvgenerator","title":"CsvGenerator","text":"<p>Generates a CSV string for each Element, based on the fields and constants provided. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example Elements to CSV JavaJSONPython <pre><code>final CsvGenerator function = new CsvGenerator.Builder()\n.group(\"Group Label\")\n.vertex(\"Vertex Label\")\n.source(\"Source Label\")\n.property(\"count\", \"Count Label\")\n.constant(\"A Constant\", \"Some constant value\")\n.quoted(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"CsvGenerator\",\n\"fields\" : {\n\"GROUP\" : \"Group Label\",\n\"VERTEX\" : \"Vertex Label\",\n\"SOURCE\" : \"Source Label\",\n\"count\" : \"Count Label\"\n},\n\"constants\" : {\n\"A Constant\" : \"Some constant value\"\n},\n\"quoted\" : false,\n\"commaReplacement\" : \" \"\n}\n</code></pre> <pre><code>g.CsvGenerator( \nfields={'GROUP': 'Group Label', 'VERTEX': 'Vertex Label', 'SOURCE': 'Source Label', 'count': 'Count Label'}, \nconstants={'A Constant': 'Some constant value'}, \nquoted=False, \ncomma_replacement=\" \" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [Entity[vertex=vertex1,group=Foo,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Entity[vertex=vertex2,group=Foo,properties=Properties[]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[]]] uk.gov.gchq.gaffer.data.generator.OneToOneObjectGenerator$1 [Foo,vertex1,,1,A Constant, Foo,vertex2,,,A Constant, Bar,,dest1,1,A Constant, Bar,,dest1,,A Constant] Example Elements to quoted CSV JavaJSONPython <pre><code>final CsvGenerator function = new CsvGenerator.Builder()\n.group(\"Group Label\")\n.vertex(\"Vertex Label\")\n.source(\"Source Label\")\n.property(\"count\", \"Count Label\")\n.constant(\"A Constant\", \"Some constant value\")\n.quoted(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"CsvGenerator\",\n\"fields\" : {\n\"GROUP\" : \"Group Label\",\n\"VERTEX\" : \"Vertex Label\",\n\"SOURCE\" : \"Source Label\",\n\"count\" : \"Count Label\"\n},\n\"constants\" : {\n\"A Constant\" : \"Some constant value\"\n},\n\"quoted\" : true,\n\"commaReplacement\" : \" \"\n}\n</code></pre> <pre><code>g.CsvGenerator( \nfields={'GROUP': 'Group Label', 'VERTEX': 'Vertex Label', 'SOURCE': 'Source Label', 'count': 'Count Label'}, \nconstants={'A Constant': 'Some constant value'}, \nquoted=True, \ncomma_replacement=\" \" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [Entity[vertex=vertex1,group=Foo,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Entity[vertex=vertex2,group=Foo,properties=Properties[]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[]]] uk.gov.gchq.gaffer.data.generator.OneToOneObjectGenerator$1 [\"Foo\",\"vertex1\",,\"1\",\"A Constant\", \"Foo\",\"vertex2\",,,\"A Constant\", \"Bar\",,\"dest1\",\"1\",\"A Constant\", \"Bar\",,\"dest1\",,\"A Constant\"]"},{"location":"reference/functions-guide/gaffer-functions/#extractgroup","title":"ExtractGroup","text":"<p>Extracts a group from an element. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.element.Element</code></p> Example ExtractGroup <p>The function will simply extract the group from a given Element.</p> JavaJSONPython <pre><code>final ExtractGroup function = new ExtractGroup();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractGroup\"\n}\n</code></pre> <pre><code>g.ExtractGroup()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.element.Edge Edge[source=src,destination=dest,directed=true,group=EdgeGroup,properties=Properties[]] java.lang.String EdgeGroup uk.gov.gchq.gaffer.data.element.Entity Entity[vertex=vertex,group=EntityGroup,properties=Properties[]] java.lang.String EntityGroup uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=vertex] ClassCastException: uk.gov.gchq.gaffer.operation.data.EntitySeed cannot be cast to uk.gov.gchq.gaffer.data.element.Element null null"},{"location":"reference/functions-guide/gaffer-functions/#extractid","title":"ExtractId","text":"<p>Extracts an identifier from an element. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.element.Element</code></p> Example ExtractId with Edge <p>The function will simply extract the value of the provided Id, for a given Element. This Id can either be an IdentifierType, or a String representation, eg \"SOURCE\".</p> JavaJSONPython <pre><code>final ExtractId function = new ExtractId(IdentifierType.SOURCE);\n</code></pre> <pre><code>{\n\"class\" : \"ExtractId\",\n\"id\" : \"SOURCE\"\n}\n</code></pre> <pre><code>g.ExtractId( \nid=\"SOURCE\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.element.Edge Edge[source=src,destination=dest,directed=true,group=edge,properties=Properties[]] java.lang.String src uk.gov.gchq.gaffer.data.element.Edge Edge[source=13.2,destination=15.642,directed=true,group=otherEdge,properties=Properties[]] java.lang.Double 13.2 Example ExtractId with Entity <p>This example simply demonstrates the same functionality but on an Entity.</p> JavaJSONPython <pre><code>final ExtractId function = new ExtractId(IdentifierType.VERTEX);\n</code></pre> <pre><code>{\n\"class\" : \"ExtractId\",\n\"id\" : \"VERTEX\"\n}\n</code></pre> <pre><code>g.ExtractId( \nid=\"VERTEX\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.element.Entity Entity[vertex=v1,group=entity,properties=Properties[]] java.lang.String v1"},{"location":"reference/functions-guide/gaffer-functions/#extractproperty","title":"ExtractProperty","text":"<p>Extracts a property from an element. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.element.Element</code></p> Example ExtractProperty from Element <p>If present, the function will extract the value of the specified property, otherwise returning null.</p> JavaJSONPython <pre><code>final ExtractProperty function = new ExtractProperty(\"prop1\");\n</code></pre> <pre><code>{\n\"class\" : \"ExtractProperty\",\n\"name\" : \"prop1\"\n}\n</code></pre> <pre><code>g.ExtractProperty( \nname=\"prop1\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.element.Edge Edge[source=dest,destination=src,directed=false,group=edge,properties=Properties[prop2=&lt;java.lang.String&gt;test,prop1=&lt;java.lang.Integer&gt;3]] java.lang.Integer 3 uk.gov.gchq.gaffer.data.element.Entity Entity[vertex=vertex,group=entity,properties=Properties[prop2=&lt;java.lang.Integer&gt;2,prop1=&lt;java.lang.Integer&gt;12,prop3=&lt;java.lang.String&gt;test]] java.lang.Integer 12 uk.gov.gchq.gaffer.data.element.Edge Edge[directed=false,group=UNKNOWN,properties=Properties[]] null"},{"location":"reference/functions-guide/gaffer-functions/#extractwalkedges","title":"ExtractWalkEdges","text":"<p>An ExtractWalkEdges will extract a List of ALL Sets of Edges, from a given Walk. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.graph.Walk</code></p> Example ExtractWalkEdges JavaJSONPython <pre><code>final ExtractWalkEdges function = new ExtractWalkEdges();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractWalkEdges\"\n}\n</code></pre> <pre><code>g.ExtractWalkEdges()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]] java.util.LinkedList [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]]"},{"location":"reference/functions-guide/gaffer-functions/#extractwalkedgesfromhop","title":"ExtractWalkEdgesFromHop","text":"<p>An ExtractWalkEdgesFromHop will extract the Set of Edges at a given hop, from a provided Walk. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.graph.Walk</code></p> Example ExtractWalkEdgesFromHop with single set of Edges JavaJSONPython <pre><code>final ExtractWalkEdgesFromHop function = new ExtractWalkEdgesFromHop(1);\n</code></pre> <pre><code>{\n\"class\" : \"ExtractWalkEdgesFromHop\",\n\"hop\" : 1\n}\n</code></pre> <pre><code>g.ExtractWalkEdgesFromHop( \nhop=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]] java.util.HashSet [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]]"},{"location":"reference/functions-guide/gaffer-functions/#extractwalkentitiesfromhop","title":"ExtractWalkEntitiesFromHop","text":"<p>Extracts the set of entities from a single hop in a Walk. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.graph.Walk</code></p> Example ExtractWalkEntitiesFromHop with single set of Entities JavaJSONPython <pre><code>final ExtractWalkEntitiesFromHop function = new ExtractWalkEntitiesFromHop(1);\n</code></pre> <pre><code>{\n\"class\" : \"ExtractWalkEntitiesFromHop\",\n\"hop\" : 1\n}\n</code></pre> <pre><code>g.ExtractWalkEntitiesFromHop( \nhop=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]] java.util.HashSet [Entity[vertex=B,group=BasicEntity,properties=Properties[]], Entity[vertex=B,group=EnhancedEntity,properties=Properties[]]]"},{"location":"reference/functions-guide/gaffer-functions/#extractwalkvertex","title":"ExtractWalkVertex","text":"<p>Extracts the source vertex from a Walk. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.data.graph.Walk</code></p> Example ExtractWalkVertex JavaJSONPython <pre><code>final ExtractWalkVertex function = new ExtractWalkVertex();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractWalkVertex\"\n}\n</code></pre> <pre><code>g.ExtractWalkVertex()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]]] java.lang.String A"},{"location":"reference/functions-guide/gaffer-functions/#freqmapextractor","title":"FreqMapExtractor","text":"<p>Extracts a count from a frequency map for a given key. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.types.FreqMap</code></p> Example FreqMapExtractor JavaJSONPython <pre><code>final FreqMapExtractor function = new FreqMapExtractor(\"key1\");\n</code></pre> <pre><code>{\n\"class\" : \"FreqMapExtractor\",\n\"key\" : \"key1\"\n}\n</code></pre> <pre><code>g.FreqMapExtractor( \nkey=\"key1\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.types.FreqMap {key1=1, key2=2, key3=3} java.lang.Long 1 uk.gov.gchq.gaffer.types.FreqMap {key2=2, key3=3} null java.util.HashMap {key1=1, key2=2, key3=3} ClassCastException: java.util.HashMap cannot be cast to uk.gov.gchq.gaffer.types.FreqMap null null"},{"location":"reference/functions-guide/gaffer-functions/#mapgenerator","title":"MapGenerator","text":"<p>Converts an iterable of elements into an Iterable of Maps. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example MapGenerator JavaJSONPython <pre><code>final MapGenerator function = new MapGenerator.Builder()\n.group(\"Group Label\")\n.vertex(\"Vertex Label\")\n.source(\"Source Label\")\n.property(\"count\", \"Count Label\")\n.constant(\"A Constant\", \"Some constant value\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"MapGenerator\",\n\"fields\" : {\n\"GROUP\" : \"Group Label\",\n\"VERTEX\" : \"Vertex Label\",\n\"SOURCE\" : \"Source Label\",\n\"count\" : \"Count Label\"\n},\n\"constants\" : {\n\"A Constant\" : \"Some constant value\"\n}\n}\n</code></pre> <pre><code>g.MapGenerator( \nfields={'GROUP': 'Group Label', 'VERTEX': 'Vertex Label', 'SOURCE': 'Source Label', 'count': 'Count Label'}, \nconstants={'A Constant': 'Some constant value'} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [Entity[vertex=vertex1,group=Foo,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Entity[vertex=vertex2,group=Foo,properties=Properties[]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[count=&lt;java.lang.Integer&gt;1]], Edge[source=dest1,destination=source1,directed=false,group=Bar,properties=Properties[]]] uk.gov.gchq.gaffer.data.generator.OneToOneObjectGenerator$1 [{Group Label=Foo, Vertex Label=vertex1, Count Label=1, A Constant=Some constant value}, {Group Label=Foo, Vertex Label=vertex2, A Constant=Some constant value}, {Group Label=Bar, Source Label=dest1, Count Label=1, A Constant=Some constant value}, {Group Label=Bar, Source Label=dest1, A Constant=Some constant value}]"},{"location":"reference/functions-guide/gaffer-functions/#masktimestampsetbytimerange","title":"MaskTimestampSetByTimeRange","text":"<p>Applies a mask to a timestamp set based on a start and end date. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.time.RBMBackedTimestampSet</code></p> Example MaskTimestampSetByTimeRange with start date JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(10000L, null);\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"startTime\" : 10000,\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \nstart_time=10000, \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] Example MaskTimestampSetByTimeRange with end date JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(null, 20000L);\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"endTime\" : 20000,\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \nend_time=20000, \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z] Example MaskTimestampSetByTimeRange with start and end date JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(10000L, 20000L);\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"startTime\" : 10000,\n\"endTime\" : 20000,\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \nstart_time=10000, \nend_time=20000, \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:10Z,1970-01-01T00:00:20Z] Example MaskTimestampSetByTimeRange without start or end date JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange();\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] Example MaskTimestampSetByTimeRange with time unit JavaJSONPython <pre><code>MaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(10L, 25L, TimeUnit.SECOND);\n</code></pre> <pre><code>{\n\"class\" : \"MaskTimestampSetByTimeRange\",\n\"startTime\" : 10,\n\"endTime\" : 25,\n\"timeUnit\" : \"SECOND\"\n}\n</code></pre> <pre><code>g.MaskTimestampSetByTimeRange( \nstart_time=10, \nend_time=25, \ntime_unit=\"SECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:00Z,1970-01-01T00:00:10Z,1970-01-01T00:00:20Z,1970-01-01T00:00:30Z] uk.gov.gchq.gaffer.time.RBMBackedTimestampSet RBMBackedTimestampSet[timeBucket=SECOND,timestamps=1970-01-01T00:00:10Z,1970-01-01T00:00:20Z]"},{"location":"reference/functions-guide/gaffer-functions/#reducerelatedelements","title":"ReduceRelatedElements","text":"<p>This function takes an Iterable of Elements and combines all related elements using the provided aggregator and related group. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example ReduceRelatedElements - Basic <p>In this small example, vertex 1a is related to vertex 1b, and vertex 2a is related to vertex 2b. As well as this, vertex 1a is connected to vertex 2b with the basicEdge group. We setup the function to do a few things. Firstly, we set the visibility property name, then state we want to concatenate the visibility properties. Next we set the vertex aggregator to the Max Binary Operator. This will be used to compare and reduce vertices with. Finally, we assert the vertex groups that describe which vertices are related, in this case 'relatesTo'.  </p> <p>In our results we should expect to see that 1b and 2b are source and dest as they were aggregated with the Max operator. The other properties should be listed in the related properties. As well as this, the visiblities should be concatenated together.</p> JavaJSONPython <pre><code>final List&lt;Element&gt; elements = Arrays.asList(\nnew Edge.Builder()\n.source(\"1a\")\n.dest(\"2b\")\n.group(\"basicEdge\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"1a\")\n.dest(\"1b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"2a\")\n.dest(\"2b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"private\"))\n.build()\n);\nfinal ReduceRelatedElements function = new ReduceRelatedElements();\nfunction.setVisibilityProperty(\"visibility\");\nfunction.setVisibilityAggregator(new CollectionConcat&lt;&gt;());\nfunction.setVertexAggregator(new Max());\nfunction.setRelatedVertexGroups(Collections.singleton(\"relatesTo\"));\n</code></pre> <pre><code>{\n\"class\" : \"ReduceRelatedElements\",\n\"vertexAggregator\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n},\n\"visibilityAggregator\" : {\n\"class\" : \"CollectionConcat\"\n},\n\"visibilityProperty\" : \"visibility\",\n\"relatedVertexGroups\" : [ \"relatesTo\" ]\n}\n</code></pre> <pre><code>g.ReduceRelatedElements( \nvisibility_aggregator=g.CollectionConcat(), \nvertex_aggregator=g.Max(), \nrelated_vertex_groups=[ \n\"relatesTo\" \n], \nvisibility_property=\"visibility\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Arrays$ArrayList [Edge[source=1a,destination=2b,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=1a,destination=1b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=2a,destination=2b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[private]]]] uk.gov.gchq.koryphe.util.IterableUtil$ChainedIterable [Edge[source=1b,destination=2b,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public, private],sourceRelatedVertices=&lt;java.util.HashSet&gt;[1a],destinationRelatedVertices=&lt;java.util.HashSet&gt;[2a]]]] null null Example ReduceRelatedElements - Complex JavaJSONPython <pre><code>final List&lt;Element&gt; elements = Arrays.asList(\nnew Edge.Builder()\n.source(\"1b\")\n.dest(\"2a\")\n.group(\"basicEdge\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"1a\")\n.dest(\"3a\")\n.group(\"basicEdge\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Entity.Builder()\n.vertex(\"2a\")\n.group(\"basicEntity\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"1b\")\n.dest(\"1a\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"2a\")\n.dest(\"2b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"3a\")\n.dest(\"3b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"private\"))\n.build(),\nnew Edge.Builder()\n.source(\"2a\")\n.dest(\"3b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"private\"))\n.build(),\nnew Edge.Builder()\n.source(\"2b\")\n.dest(\"3a\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build(),\nnew Edge.Builder()\n.source(\"3a\")\n.dest(\"4b\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"private\"))\n.build(),\nnew Edge.Builder()\n.source(\"5b\")\n.dest(\"4a\")\n.group(\"relatesTo\")\n.property(\"visibility\", Sets.newHashSet(\"public\"))\n.build()\n);\nfinal ReduceRelatedElements function = new ReduceRelatedElements();\nfunction.setVisibilityProperty(\"visibility\");\nfunction.setVisibilityAggregator(new CollectionConcat&lt;&gt;());\nfunction.setVertexAggregator(new Max());\nfunction.setRelatedVertexGroups(Collections.singleton(\"relatesTo\"));\n</code></pre> <pre><code>{\n\"class\" : \"ReduceRelatedElements\",\n\"vertexAggregator\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n},\n\"visibilityAggregator\" : {\n\"class\" : \"CollectionConcat\"\n},\n\"visibilityProperty\" : \"visibility\",\n\"relatedVertexGroups\" : [ \"relatesTo\" ]\n}\n</code></pre> <pre><code>g.ReduceRelatedElements( \nvisibility_aggregator=g.CollectionConcat(), \nvertex_aggregator=g.Max(), \nrelated_vertex_groups=[ \n\"relatesTo\" \n], \nvisibility_property=\"visibility\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Arrays$ArrayList [Edge[source=1b,destination=2a,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=1a,destination=3a,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Entity[vertex=2a,group=basicEntity,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=1a,destination=1b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=2a,destination=2b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=3a,destination=3b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[private]]], Edge[source=2a,destination=3b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[private]]], Edge[source=2b,destination=3a,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]], Edge[source=3a,destination=4b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[private]]], Edge[source=4a,destination=5b,directed=false,group=relatesTo,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public]]]] uk.gov.gchq.koryphe.util.IterableUtil$ChainedIterable [Edge[source=1b,destination=4b,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public, private],sourceRelatedVertices=&lt;java.util.HashSet&gt;[1a],destinationRelatedVertices=&lt;java.util.HashSet&gt;[2b, 3a, 2a, 3b]]], Edge[source=1b,destination=4b,directed=false,group=basicEdge,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public, private],sourceRelatedVertices=&lt;java.util.HashSet&gt;[1a],destinationRelatedVertices=&lt;java.util.HashSet&gt;[2b, 3a, 2a, 3b]]], Entity[vertex=4b,group=basicEntity,properties=Properties[visibility=&lt;java.util.HashSet&gt;[public, private],relatedVertices=&lt;java.util.HashSet&gt;[2b, 3a, 2a, 3b]]]]"},{"location":"reference/functions-guide/gaffer-functions/#tofreqmap","title":"ToFreqMap","text":"<p>Creates a new FreqMap and upserts a given value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToFreqMap JavaJSONPython <pre><code>Function toFreqMap = new ToFreqMap();\n</code></pre> <pre><code>{\n\"class\" : \"ToFreqMap\"\n}\n</code></pre> <pre><code>g.ToFreqMap()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String aString uk.gov.gchq.gaffer.types.FreqMap {aString=1} java.lang.Long 100 uk.gov.gchq.gaffer.types.FreqMap {100=1} java.lang.Integer 20 uk.gov.gchq.gaffer.types.FreqMap {20=1} uk.gov.gchq.gaffer.types.TypeValue TypeValue[type=type1,value=value1] uk.gov.gchq.gaffer.types.FreqMap {TypeValue[type=type1,value=value1]=1} null uk.gov.gchq.gaffer.types.FreqMap {null=1}"},{"location":"reference/functions-guide/gaffer-functions/#totypevalue","title":"ToTypeValue","text":"<p>Converts a value into a TypeValue. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToTypeValue JavaJSONPython <pre><code>Function toTypeValue = new ToTypeValue();\n</code></pre> <pre><code>{\n\"class\" : \"ToTypeValue\"\n}\n</code></pre> <pre><code>g.ToTypeValue()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String aString uk.gov.gchq.gaffer.types.TypeValue TypeValue[value=aString] java.lang.Long 100 uk.gov.gchq.gaffer.types.TypeValue TypeValue[value=100] java.lang.Integer 25 uk.gov.gchq.gaffer.types.TypeValue TypeValue[value=25] uk.gov.gchq.gaffer.types.TypeValue TypeValue[type=type1,value=value1] uk.gov.gchq.gaffer.types.TypeValue TypeValue[value=TypeValue[type=type1,value=value1]] null uk.gov.gchq.gaffer.types.TypeValue TypeValue[]"},{"location":"reference/functions-guide/gaffer-functions/#totypesubtypevalue","title":"ToTypeSubTypeValue","text":"<p>Converts a value into a TypeSubTypeValue. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToTypeSubTypeValue JavaJSONPython <pre><code>Function toTypeSubTypeValue = new ToTypeSubTypeValue();\n</code></pre> <pre><code>{\n\"class\" : \"ToTypeSubTypeValue\"\n}\n</code></pre> <pre><code>g.ToTypeSubTypeValue()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String aString uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[value=aString] java.lang.Long 100 uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[value=100] java.lang.Integer 25 uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[value=25] uk.gov.gchq.gaffer.types.TypeValue TypeValue[type=type1,value=value1] uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[value=TypeValue[type=type1,value=value1]] null uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[]"},{"location":"reference/functions-guide/gaffer-functions/#totrailingwildcardpair","title":"ToTrailingWildcardPair","text":"<p>Converts an input value into a pair of EntityIds representing a range. The end of range is customisable. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ToTrailingWildcardPair with default end of range JavaJSONPython <pre><code>final ToTrailingWildcardPair function = new ToTrailingWildcardPair();\n</code></pre> <pre><code>{\n\"class\" : \"ToTrailingWildcardPair\",\n\"endOfRange\" : \"~\"\n}\n</code></pre> <pre><code>g.ToTrailingWildcardPair( \nend_of_range=\"~\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String value1 uk.gov.gchq.gaffer.commonutil.pair.Pair Pair[first=EntitySeed[vertex=value1],second=EntitySeed[vertex=value1~]] java.lang.String value2 uk.gov.gchq.gaffer.commonutil.pair.Pair Pair[first=EntitySeed[vertex=value2],second=EntitySeed[vertex=value2~]] null null Example ToTrailingWildcardPair with custom end of range JavaJSONPython <pre><code>final ToTrailingWildcardPair function = new ToTrailingWildcardPair();\nfunction.setEndOfRange(\"custom\");\n</code></pre> <pre><code>{\n\"class\" : \"ToTrailingWildcardPair\",\n\"endOfRange\" : \"custom\"\n}\n</code></pre> <pre><code>g.ToTrailingWildcardPair( \nend_of_range=\"custom\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String value1 uk.gov.gchq.gaffer.commonutil.pair.Pair Pair[first=EntitySeed[vertex=value1],second=EntitySeed[vertex=value1custom]] java.lang.String value2 uk.gov.gchq.gaffer.commonutil.pair.Pair Pair[first=EntitySeed[vertex=value2],second=EntitySeed[vertex=value2custom]] null null"},{"location":"reference/functions-guide/gaffer-functions/#typesubtypevaluetotuple","title":"TypeSubTypeValueToTuple","text":"<p>Converts an TypeSubTypeValue into a Tuple. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.types.TypeSubTypeValue</code></p> Example TypeSubTypeValueToTuple JavaJSONPython <pre><code>final TypeSubTypeValueToTuple function = new TypeSubTypeValueToTuple();\n</code></pre> <pre><code>{\n\"class\" : \"TypeSubTypeValueToTuple\"\n}\n</code></pre> <pre><code>g.TypeSubTypeValueToTuple()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[type=type,subType=subType,value=value] [java.lang.String, java.lang.String, java.lang.String] [type, subType, value] null null"},{"location":"reference/functions-guide/gaffer-functions/#typevaluetotuple","title":"TypeValueToTuple","text":"<p>Converts an TypeValue into a Tuple. Javadoc</p> <p>Input type: <code>uk.gov.gchq.gaffer.types.TypeSubTypeValue</code></p> Example TypeValueToTuple JavaJSONPython <pre><code>final TypeValueToTuple function = new TypeValueToTuple();\n</code></pre> <pre><code>{\n\"class\" : \"TypeValueToTuple\"\n}\n</code></pre> <pre><code>g.TypeValueToTuple()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.types.TypeValue TypeValue[type=type,value=value] [java.lang.String, java.lang.String] [type, value] null null"},{"location":"reference/functions-guide/gaffer-functions/#unwrapentityid","title":"UnwrapEntityId","text":"<p>For input objects which are an EntityId, the vertex value will be unwrapped and returned, otherwise the original object will be returned. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example UnwrapEntityId JavaJSONPython <pre><code>final UnwrapEntityId function = new UnwrapEntityId();\n</code></pre> <pre><code>{\n\"class\" : \"UnwrapEntityId\"\n}\n</code></pre> <pre><code>g.UnwrapEntityId()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=vertex1] java.lang.String vertex1 uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=vertex2] java.lang.String vertex2 uk.gov.gchq.gaffer.data.element.Entity Entity[vertex=vertex2,group=group,properties=Properties[]] java.lang.String vertex2 java.lang.String a string java.lang.String a string java.lang.Integer 10 java.lang.Integer 10 null null"},{"location":"reference/functions-guide/koryphe-functions/","title":"Koryphe Functions","text":"<p>Functions from the Koryphe library.</p>"},{"location":"reference/functions-guide/koryphe-functions/#applybifunction","title":"ApplyBiFunction","text":"<p>Applies the given BiFunction. Javadoc</p> <p>Input type depends on the BiFunction given.</p> Example ApplyBiFunction using sum JavaJSONPython <pre><code>final ApplyBiFunction&lt;Number, Number, Number&gt; function = new ApplyBiFunction&lt;&gt;(new Sum());\n</code></pre> <pre><code>{\n\"class\" : \"ApplyBiFunction\",\n\"function\" : {\n\"class\" : \"Sum\"\n}\n}\n</code></pre> <pre><code>g.ApplyBiFunction( \nfunction=g.Sum() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [1, 2] java.lang.Integer 3 [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.lang.Integer 3 [java.lang.Double, java.lang.Double] [1.1, 2.2] java.lang.Double 3.3000000000000003 Example ApplyBiFunction using max JavaJSONPython <pre><code>final ApplyBiFunction&lt;Comparable, Comparable, Comparable&gt; function = new ApplyBiFunction&lt;&gt;(new Max());\n</code></pre> <pre><code>{\n\"class\" : \"ApplyBiFunction\",\n\"function\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n}\n</code></pre> <pre><code>g.ApplyBiFunction( \nfunction=g.Max() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [1, 2] java.lang.Integer 2 [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.lang.Integer 2 [java.lang.Double, java.lang.Double] [1.1, 2.2] java.lang.Double 2.2 Example ApplyBiFunction using min JavaJSONPython <pre><code>final ApplyBiFunction&lt;Comparable, Comparable, Comparable&gt; function = new ApplyBiFunction&lt;&gt;(new Min());\n</code></pre> <pre><code>{\n\"class\" : \"ApplyBiFunction\",\n\"function\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n}\n}\n</code></pre> <pre><code>g.ApplyBiFunction( \nfunction=g.Min() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [1, 2] java.lang.Integer 1 [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.lang.Integer 1 [java.lang.Double, java.lang.Double] [1.1, 2.2] java.lang.Double 1.1"},{"location":"reference/functions-guide/koryphe-functions/#base64decode","title":"Base64Decode","text":"<p>Decodes a base64 encoded byte array. Javadoc</p> <p>Input type: <code>byte[]</code></p> Example Base64Decode JavaJSONPython <pre><code>final Base64Decode function = new Base64Decode();\n</code></pre> <pre><code>{\n\"class\" : \"Base64Decode\"\n}\n</code></pre> <pre><code>g.Base64Decode()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result byte[] dGVzdCBzdHJpbmc= byte[] test string null null"},{"location":"reference/functions-guide/koryphe-functions/#callmethod","title":"CallMethod","text":"<p>Allows you to call any public no-argument method on an object. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example CallMethod with <code>toString</code> JavaJSONPython <pre><code>final CallMethod function = new CallMethod(\"toString\");\n</code></pre> <pre><code>{\n\"class\" : \"CallMethod\",\n\"method\" : \"toString\"\n}\n</code></pre> <pre><code>g.CallMethod( \nmethod=\"toString\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a string java.lang.String a string java.lang.Integer 1 java.lang.String 1 java.util.HashSet [item2, item1] java.lang.String [item2, item1] null null Example CallMethod with <code>toLowerCase</code> JavaJSONPython <pre><code>final CallMethod function = new CallMethod(\"toLowerCase\");\n</code></pre> <pre><code>{\n\"class\" : \"CallMethod\",\n\"method\" : \"toLowerCase\"\n}\n</code></pre> <pre><code>g.CallMethod( \nmethod=\"toLowerCase\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String STRING1 java.lang.String string1 java.lang.String String2 java.lang.String string2 java.lang.Integer 10 RuntimeException: Unable to invoke toLowerCase on object class class java.lang.Integer null null"},{"location":"reference/functions-guide/koryphe-functions/#cast","title":"Cast","text":"<p>Casts input to specified class. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example Cast JavaJSONPython <pre><code>final Cast function = new Cast(String.class);\n</code></pre> <pre><code>{\n\"class\" : \"Cast\",\n\"outputClass\" : \"String\"\n}\n</code></pre> <pre><code>g.Cast( \noutput_class=\"java.lang.String\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 5 ClassCastException: Cannot cast java.lang.Integer to java.lang.String java.lang.String inputString java.lang.String inputString null null"},{"location":"reference/functions-guide/koryphe-functions/#concat","title":"Concat","text":"<p>Objects are concatenated by concatenating the outputs from calling <code>toString</code> on each object. The default separator is a comma. Javadoc</p> <p>Input type: <code>java.lang.Object, java.lang.Object</code></p> Example Concat JavaJSONPython <pre><code>final Concat function = new Concat(\",\");\n</code></pre> <pre><code>{\n\"class\" : \"Concat\",\n\"separator\" : \",\"\n}\n</code></pre> <pre><code>g.Concat( \nseparator=\",\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.String, java.lang.String] [foo, bar] java.lang.String foo,bar [java.lang.String, ] [foo, null] java.lang.String foo [java.lang.String, java.lang.String] [foo, ] java.lang.String foo, [java.lang.String, java.lang.Double] [foo, 1.2] java.lang.String foo,1.2 [ ,java.lang.String] [null, bar] java.lang.String bar [java.lang.Integer, java.lang.Integer] [1, 2] java.lang.String 1,2"},{"location":"reference/functions-guide/koryphe-functions/#createobject","title":"CreateObject","text":"<p>Creates a new object of a given type. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example CreateObject with String JavaJSONPython <pre><code>final CreateObject createObject = new CreateObject(String.class);\n</code></pre> <pre><code>{\n\"class\" : \"CreateObject\",\n\"objectClass\" : \"String\"\n}\n</code></pre> <pre><code>g.CreateObject( \nobject_class=\"java.lang.String\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a normal string java.lang.String a normal string byte[] some bytes java.lang.String some bytes null java.lang.String java.lang.Integer 123 RuntimeException: Unable to create a new instance of java.lang.String. No constructors were found that accept a java.lang.Integer [C [C@246c4b32 java.lang.String a char array Example CreateObject with List JavaJSONPython <pre><code>final CreateObject createObject = new CreateObject(ArrayList.class);\n</code></pre> <pre><code>{\n\"class\" : \"CreateObject\",\n\"objectClass\" : \"ArrayList\"\n}\n</code></pre> <pre><code>g.CreateObject( \nobject_class=\"java.util.ArrayList\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [list, example] java.util.ArrayList [list, example] java.util.HashSet [set, example] java.util.ArrayList [set, example] java.util.HashMap {} RuntimeException: Unable to create a new instance of java.util.ArrayList. No constructors were found that accept a java.util.HashMap null java.util.ArrayList []"},{"location":"reference/functions-guide/koryphe-functions/#csvlinestomaps","title":"CsvLinesToMaps","text":"<p>Parses CSV lines into Maps. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example CsvLinesToMaps with delimiter JavaJSONPython <pre><code>final CsvLinesToMaps function = new CsvLinesToMaps()\n.header(\"header1\", \"header2\", \"header3\")\n.firstRow(1)\n.delimiter('|');\n</code></pre> <pre><code>{\n\"class\" : \"CsvLinesToMaps\",\n\"header\" : [ \"header1\", \"header2\", \"header3\" ],\n\"firstRow\" : 1,\n\"delimiter\" : \"|\"\n}\n</code></pre> <pre><code>g.CsvLinesToMaps( \ndelimiter=\"|\", \nheader=[ \n\"header1\", \n\"header2\", \n\"header3\" \n], \nfirst_row=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Arrays$ArrayList <code>[header1|header2|header3, value1|value2|value3]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}]</code> java.util.Arrays$ArrayList <code>[header1|header2|header3, value1||value3]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=, header1=value1}]</code> java.util.Arrays$ArrayList <code>[header1|header2|header3, value1|value2]</code> IllegalArgumentException: CSV has 2 columns, but there are 3 provided column names java.util.Arrays$ArrayList <code>[header1||header3, value1|value2|value3]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}]</code> java.util.Arrays$ArrayList <code>[header1|header2, value1|value2|value3]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}]</code> java.util.Arrays$ArrayList <code>[header1|header2|header3, value1|value2|value3, value4|value5|value6]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}, {header3=value6, header2=value5, header1=value4}]</code> java.util.Arrays$ArrayList <code>[header1|header2|header3, , value4|value5|value6]</code> NoSuchElementException: No more CSV records available java.util.Arrays$ArrayList <code>[header1|header2|header3, null, value4|value5|value6]</code> NullPointerException: null java.util.Arrays$ArrayList <code>[value1|value2|value3, value4|value5|value6]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}, {header3=value6, header2=value5, header1=value4}]</code> java.util.Arrays$ArrayList <code>[null, value1|value2|value3, value4|value5|value6]</code> <code>uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable</code> <code>[{header3=value3, header2=value2, header1=value1}, {header3=value6, header2=value5, header1=value4}]</code>"},{"location":"reference/functions-guide/koryphe-functions/#csvtomaps","title":"CsvToMaps","text":"<p>Parses CSVs into Maps. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example CsvToMaps JavaJSONPython <pre><code>final CsvToMaps function = new CsvToMaps().header(\"header1\", \"header2\", \"header3\").firstRow(1);\n</code></pre> <pre><code>{\n\"class\" : \"CsvToMaps\",\n\"header\" : [ \"header1\", \"header2\", \"header3\" ],\n\"firstRow\" : 1\n}\n</code></pre> <pre><code>g.CsvToMaps( \nheader=[ \n\"header1\", \n\"header2\", \n\"header3\" \n], \nfirst_row=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String header1,header2,header3 \\n value1,value2,value3 uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [{header3=value3, header2=value2, header1=value1}] java.lang.String header1,header2,header3 \\n value1,value2,value3 \\n value4,value5,value6 uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [{header3=value3, header2=value2, header1=value1}, {header3=value6\", header2=value5, header1=value4}] java.lang.String header1,header2,header3 \\n ,,value3 \\n value4,value5,value6 uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [{header3=value3, header2=, header1=}, {header3=value6\", header2=value5, header1=value4}] java.lang.String header1,header2,header3,header4 \\n value1,value2,value3,value4 \\n value5,value6,value7,value8 NoSuchElementException: null null null java.lang.String uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable []"},{"location":"reference/functions-guide/koryphe-functions/#currentdate","title":"CurrentDate","text":"<p>Returns the current date and time, input is ignored. Javadoc</p> <p>Input type (ignored): <code>java.lang.Object</code></p> Example getting CurrentDate JavaJSONPython <pre><code>final CurrentDate currentDate = new CurrentDate();\n</code></pre> <pre><code>{\n\"class\" : \"CurrentDate\"\n}\n</code></pre> <pre><code>g.CurrentDate()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result null java.util.Date Mon Nov 07 11:00:17 GMT 2022"},{"location":"reference/functions-guide/koryphe-functions/#currenttime","title":"CurrentTime","text":"<p>Returns the current time in milliseconds, input is ignored. Javadoc</p> <p>Input type (ignored): <code>java.lang.Object</code></p> Example getting CurrentTime JavaJSONPython <pre><code>final CurrentTime currentTime = new CurrentTime();\n</code></pre> <pre><code>{\n\"class\" : \"CurrentTime\"\n}\n</code></pre> <pre><code>g.CurrentTime()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result null java.lang.Long 1667818817897"},{"location":"reference/functions-guide/koryphe-functions/#defaultifempty","title":"DefaultIfEmpty","text":"<p>Provides a default value if the input is empty. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example DefaultIfEmpty JavaJSONPython <pre><code>final DefaultIfEmpty function = new DefaultIfEmpty();\n</code></pre> <pre><code>{\n\"class\" : \"DefaultIfEmpty\"\n}\n</code></pre> <pre><code>g.DefaultIfEmpty()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String String input java.lang.String String input java.lang.Long 5 IllegalArgumentException: Could not determine the size of the provided value null null java.lang.String null"},{"location":"reference/functions-guide/koryphe-functions/#defaultifnull","title":"DefaultIfNull","text":"<p>Provides a default value if the input is null. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example DefaultIfNull JavaJSONPython <pre><code>final DefaultIfNull function = new DefaultIfNull(\"DEFAULT\");\n</code></pre> <pre><code>{\n\"class\" : \"DefaultIfNull\",\n\"defaultValue\" : \"DEFAULT\"\n}\n</code></pre> <pre><code>g.DefaultIfNull( \ndefault_value=\"DEFAULT\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String String input java.lang.String String input java.lang.Long 5 java.lang.Long 5 null java.lang.String DEFAULT java.lang.String java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#deserialisejson","title":"DeserialiseJson","text":"<p>Parses a JSON string into Java objects. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example DeserialiseJson JavaJSONPython <pre><code>final DeserialiseJson function = new DeserialiseJson();\n</code></pre> <pre><code>{\n\"class\" : \"DeserialiseJson\"\n}\n</code></pre> <pre><code>g.DeserialiseJson()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String {\"elements\": [{\"value\": \"value1\"}, {\"value\": \"value2\"}]} java.util.LinkedHashMap {elements=[{value=value1}, {value=value2}]} java.lang.String [ \"ListValue1\", \"ListValue2\", \"ListValue3\" ] java.util.ArrayList [ListValue1, ListValue2, ListValue3] java.lang.String { \"number\":30 } java.util.LinkedHashMap {number=30} java.lang.String { \"false\":true } java.util.LinkedHashMap {false=true} java.lang.String { \"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\", \"vertex\" : 1 } java.util.LinkedHashMap {class=uk.gov.gchq.gaffer.operation.data.EntitySeed, vertex=1} java.lang.String [ \"listValue1\", \"listValue1\", \"listValue1\" ] java.util.ArrayList [listValue1, listValue1, listValue1] java.lang.String { \"key1\" : 1.0, \"key2\" : 2.2, \"key3\" : 3.3 } java.util.LinkedHashMap {key1=1.0, key2=2.2, key3=3.3}"},{"location":"reference/functions-guide/koryphe-functions/#deserialisexml","title":"DeserialiseXml","text":"<p>Parses an XML document into multiple Maps. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example DeserialiseXml JavaJSONPython <pre><code>final DeserialiseXml function = new DeserialiseXml();\n</code></pre> <pre><code>{\n\"class\" : \"DeserialiseXml\"\n}\n</code></pre> <pre><code>g.DeserialiseXml()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String &lt;element1&gt;value&lt;/element1&gt; java.util.HashMap {element1=value} java.lang.String &lt;root&gt;&lt;element1&gt;value1&lt;/element1&gt;&lt;element2&gt;value2&lt;/element2&gt;&lt;/root&gt; java.util.HashMap {root={element1=value1, element2=value2}} java.lang.String &lt;root&gt;&lt;element1&gt;&lt;element2&gt;value1&lt;/element2&gt;&lt;/element1&gt;&lt;element1&gt;&lt;element2&gt;value2&lt;/element2&gt;&lt;/element1&gt;&lt;/root&gt; java.util.HashMap {root={element1=[{element2=value1}, {element2=value2}]}}"},{"location":"reference/functions-guide/koryphe-functions/#dictionarylookup","title":"DictionaryLookup","text":"<p>Looks up a value in a Map. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example DictionaryLookup JavaJSONPython <pre><code>final DictionaryLookup&lt;Integer, String&gt; dictionaryLookup = new DictionaryLookup&lt;&gt;(map);\n</code></pre> <pre><code>{\n\"class\" : \"DictionaryLookup\",\n\"dictionary\" : {\n\"1\" : \"one\",\n\"2\" : \"two\",\n\"3\" : \"three\"\n}\n}\n</code></pre> <pre><code>g.DictionaryLookup( \ndictionary={'1': 'one', '2': 'two', '3': 'three'} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 1 java.lang.String one null null java.lang.Integer 4 null java.lang.Long 2 null"},{"location":"reference/functions-guide/koryphe-functions/#divide","title":"Divide","text":"<p>Divides the input integers, the resulting object is a Tuple2 containing the quotient and remainder. [x, y] -&gt; [x/y, remainder]. Javadoc</p> <p>Input type: <code>java.lang.Integer, java.lang.Integer</code></p> Example Divide JavaJSONPython <pre><code>final Divide function = new Divide();\n</code></pre> <pre><code>{\n\"class\" : \"Divide\"\n}\n</code></pre> <pre><code>g.Divide()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [6, 2] [java.lang.Integer, java.lang.Integer] [3, 0] [java.lang.Integer, java.lang.Integer] [6, 4] [java.lang.Integer, java.lang.Integer] [1, 2] [java.lang.Integer, java.lang.Integer] [6, 8] [java.lang.Integer, java.lang.Integer] [0, 6] [ ,java.lang.Integer] [null, 2] null [java.lang.Integer, ] [6, null] [java.lang.Integer, java.lang.Integer] [6, 0] [java.lang.Double, java.lang.Double] [6.1, 2.1] IllegalArgumentException: Input tuple values do not match the required function input types"},{"location":"reference/functions-guide/koryphe-functions/#divideby","title":"DivideBy","text":"<p>Divide the input integer by the provided integer, the resulting object is a Tuple2 containing the quotient and remainder. x -&gt; [x/divideBy, remainder]. Javadoc</p> <p>Input type: <code>java.lang.Integer</code></p> Example DivideBy JavaJSONPython <pre><code>final DivideBy function = new DivideBy(2);\n</code></pre> <pre><code>{\n\"class\" : \"DivideBy\",\n\"by\" : 2\n}\n</code></pre> <pre><code>g.DivideBy( \nby=2 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 6 [java.lang.Integer, java.lang.Integer] [3, 0] java.lang.Integer 5 [java.lang.Integer, java.lang.Integer] [2, 1] null null java.lang.Double 6.1 ClassCastException: java.lang.Double cannot be cast to java.lang.Integer"},{"location":"reference/functions-guide/koryphe-functions/#extractkeys","title":"ExtractKeys","text":"<p>An ExtractKeys will return the Set of keys from the provided Java Map. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example ExtractKeys JavaJSONPython <pre><code>final ExtractKeys&lt;String, Integer&gt; function = new ExtractKeys&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractKeys\"\n}\n</code></pre> <pre><code>g.ExtractKeys()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {firstKey=2, thirdKey=9, secondKey=4} java.util.HashMap$KeySet [firstKey, thirdKey, secondKey]"},{"location":"reference/functions-guide/koryphe-functions/#extractvalue","title":"ExtractValue","text":"<p>An ExtractValue will return the value associated with the pre-configured key, from a supplied Java Map. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example ExtractValue JavaJSONPython <pre><code>final ExtractValue&lt;String, Integer&gt; function = new ExtractValue&lt;&gt;(\"blueKey\");\n</code></pre> <pre><code>{\n\"class\" : \"ExtractValue\",\n\"key\" : \"blueKey\"\n}\n</code></pre> <pre><code>g.ExtractValue( \nkey=\"blueKey\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {yellowKey=4, greenKey=9, redKey=5, blueKey=25} java.lang.Integer 25"},{"location":"reference/functions-guide/koryphe-functions/#extractvalues","title":"ExtractValues","text":"<p>An ExtractValues will return a Collection of the values from a provided Java Map. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example ExtractValues JavaJSONPython <pre><code>final ExtractValues&lt;String, Integer&gt; function = new ExtractValues&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"ExtractValues\"\n}\n</code></pre> <pre><code>g.ExtractValues()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {theKey=1, theWholeKey=2, nothingButTheKey=3} java.util.HashMap$Values [1, 2, 3]"},{"location":"reference/functions-guide/koryphe-functions/#firstitem","title":"FirstItem","text":"<p>For a given Iterable, a FirstItem will extract the first item. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example FirstItem JavaJSONPython <pre><code>final FirstItem&lt;Integer&gt; function = new FirstItem&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"FirstItem\"\n}\n</code></pre> <pre><code>g.FirstItem()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [2, 3, 5] java.lang.Integer 2 java.util.ArrayList [7, 11, 13] java.lang.Integer 7 java.util.ArrayList [17, 19, null] java.lang.Integer 17 java.util.ArrayList [null, 19, 27] null null IllegalArgumentException: Input cannot be null"},{"location":"reference/functions-guide/koryphe-functions/#firstvalid","title":"FirstValid","text":"<p>Provides the first valid item from an iterable based on a predicate. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example FirstValid with a predicate JavaJSONPython <pre><code>final FirstValid function = new FirstValid(new StringContains(\"my\"));\n</code></pre> <pre><code>{\n\"class\" : \"FirstValid\",\n\"predicate\" : {\n\"class\" : \"StringContains\",\n\"value\" : \"my\",\n\"ignoreCase\" : false\n}\n}\n</code></pre> <pre><code>g.FirstValid( \npredicate=g.StringContains( \nvalue=\"my\", \nignore_case=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3] ClassCastException: java.lang.Integer cannot be cast to java.lang.String java.util.ArrayList [Hello, my, value] java.lang.String my java.util.ArrayList [MY, tummy, my, My] java.lang.String tummy null null Example FirstValid without a predicate <p>FirstValid always returns null if no predicate is specified</p> JavaJSONPython <pre><code>final FirstValid function = new FirstValid(null);\n</code></pre> <pre><code>{\n\"class\" : \"FirstValid\"\n}\n</code></pre> <pre><code>g.FirstValid()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [a, b, c] null java.util.ArrayList [1, 2, 3] null java.util.ArrayList [] null"},{"location":"reference/functions-guide/koryphe-functions/#functionchain","title":"FunctionChain","text":"<p>Applies the given functions consecutively. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example FunctionChain using tuple adapted functions JavaJSONPython <pre><code>final FunctionChain function = new FunctionChain.Builder&lt;&gt;()\n.execute(new Integer[]{0}, new ToUpperCase(), new Integer[]{1})\n.execute(new Integer[]{1}, new ToSet(), new Integer[]{2})\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"FunctionChain\",\n\"functions\" : [ {\n\"class\" : \"TupleAdaptedFunction\",\n\"selection\" : [ 0 ],\n\"function\" : {\n\"class\" : \"ToUpperCase\"\n},\n\"projection\" : [ 1 ]\n}, {\n\"class\" : \"TupleAdaptedFunction\",\n\"selection\" : [ 1 ],\n\"function\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToSet\"\n},\n\"projection\" : [ 2 ]\n} ]\n}\n</code></pre> <pre><code>g.FunctionChain( \nfunctions=[ \ng.TupleAdaptedFunction( \nselection=[ \n0 \n], \nfunction=g.ToUpperCase(), \nprojection=[ \n1 \n] \n), \ng.TupleAdaptedFunction( \nselection=[ \n1 \n], \nfunction=g.ToSet(), \nprojection=[ \n2 \n] \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.String,  ,] [someString, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [someString, SOMESTRING, [SOMESTRING]] [java.lang.String,  ,] [SOMESTRING, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [SOMESTRING, SOMESTRING, [SOMESTRING]] [java.lang.String,  ,] [somestring, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [somestring, SOMESTRING, [SOMESTRING]] [java.lang.String,  ,] [@\u00a3$%, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [@\u00a3$%, @\u00a3$%, [@\u00a3$%]] [java.lang.String,  ,] [1234, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [1234, 1234, [1234]] [java.lang.String,  ,] [, null, null] [java.lang.String, java.lang.String, java.util.HashSet] [, , []] [ , ,] [null, null, null] [ , ,java.util.HashSet] [null, null, [null]] [java.lang.Integer,  ,] [1234, null, null] [java.lang.Integer, java.lang.String, java.util.HashSet] [1234, 1234, [1234]] Example FunctionChain using standard functions JavaJSONPython <pre><code>final FunctionChain function = new FunctionChain.Builder&lt;&gt;()\n.execute(new ToLowerCase())\n.execute(new ToTypeSubTypeValue())\n.execute(new ToEntityId())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"FunctionChain\",\n\"functions\" : [ {\n\"class\" : \"ToLowerCase\"\n}, {\n\"class\" : \"ToTypeSubTypeValue\"\n}, {\n\"class\" : \"ToEntityId\"\n} ]\n}\n</code></pre> <pre><code>g.FunctionChain( \nfunctions=[ \ng.ToLowerCase(), \ng.ToTypeSubTypeValue(), \ng.ToEntityId() \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a string uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=TypeSubTypeValue[value=a string]] java.lang.String UPPER uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=TypeSubTypeValue[value=upper]] null uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=TypeSubTypeValue[]] java.lang.Integer 12 uk.gov.gchq.gaffer.operation.data.EntitySeed EntitySeed[vertex=TypeSubTypeValue[value=12]]"},{"location":"reference/functions-guide/koryphe-functions/#functionmap","title":"FunctionMap","text":"<p>Applies a function to all values in a map. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example using FunctionMap to multiply all map values by 10 JavaJSONPython <pre><code>final FunctionMap&lt;String, Integer, Integer&gt; function = new FunctionMap&lt;&gt;(new MultiplyBy(10));\n</code></pre> <pre><code>{\n\"class\" : \"FunctionMap\",\n\"function\" : {\n\"class\" : \"MultiplyBy\",\n\"by\" : 10\n}\n}\n</code></pre> <pre><code>g.FunctionMap( \nfunction=g.MultiplyBy( \nby=10 \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {key1=1, key2=2, key3=3} java.util.HashMap {key1=10, key2=20, key3=30} java.util.HashMap {key1=null, key2=2, key3=3} java.util.HashMap {key1=null, key2=20, key3=30} null null"},{"location":"reference/functions-guide/koryphe-functions/#gunzip","title":"Gunzip","text":"<p>Decompresses gzipped data. Javadoc</p> <p>Input type: <code>byte[]</code></p> Example Gunzip JavaJSONPython <pre><code>final Gunzip gunzip = new Gunzip();\n</code></pre> <pre><code>{\n\"class\" : \"Gunzip\"\n}\n</code></pre> <pre><code>g.Gunzip()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result byte[] \u001f\ufffd\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000+I-.Q(.)\ufffd\ufffdK\u0007\u0000E\u0015G\u0013\u000b\u0000\u0000\u0000 byte[] test string"},{"location":"reference/functions-guide/koryphe-functions/#identity","title":"Identity","text":"<p>Just returns the input. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example Identity JavaJSONPython <pre><code>final Identity function = new Identity();\n</code></pre> <pre><code>{\n\"class\" : \"Identity\"\n}\n</code></pre> <pre><code>g.Identity()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 6 java.lang.Integer 6 java.lang.Double 6.1 java.lang.Double 6.1 java.lang.String input1 java.lang.String input1 java.util.ArrayList [1, 2, 3] java.util.ArrayList [1, 2, 3] null null"},{"location":"reference/functions-guide/koryphe-functions/#if","title":"If","text":"<p>Conditionally applies a function. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example If <p>This example tests first whether the input contains 'upper'. If so, then it is converted to upper case. Otherwise, it is converted to lower case.</p> JavaJSONPython <pre><code>final If&lt;String, String&gt; predicate = new If&lt;String, String&gt;()\n.predicate(new StringContains(\"upper\"))\n.then(new ToUpperCase())\n.otherwise(new ToLowerCase());\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.If\",\n\"predicate\" : {\n\"class\" : \"StringContains\",\n\"value\" : \"upper\",\n\"ignoreCase\" : false\n},\n\"then\" : {\n\"class\" : \"ToUpperCase\"\n},\n\"otherwise\" : {\n\"class\" : \"ToLowerCase\"\n}\n}\n</code></pre> <pre><code>g.If( \npredicate=g.StringContains( \nvalue=\"upper\", \nignore_case=False \n), \nthen=g.ToUpperCase(), \notherwise=g.ToLowerCase() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result null null java.lang.String Convert me to upper case java.lang.String CONVERT ME TO UPPER CASE java.lang.String Convert me to lower case java.lang.String convert me to lower case java.lang.String java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#increment","title":"Increment","text":"<p>Adds a given number to the input, returned value type will match the input type. Javadoc</p> <p>Input type: <code>java.lang.Number</code></p> Example Increment with Int JavaJSONPython <pre><code>final Increment increment = new Increment(3);\n</code></pre> <pre><code>{\n\"class\" : \"Increment\",\n\"increment\" : 3\n}\n</code></pre> <pre><code>g.Increment( \nincrement=3 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 2 java.lang.Integer 5 java.lang.Double 2.0 java.lang.Integer 5 java.lang.Float 2.0 java.lang.Integer 5 java.lang.Long 2 java.lang.Integer 5 Example Increment with Double JavaJSONPython <pre><code>final Increment increment = new Increment(3.0);\n</code></pre> <pre><code>{\n\"class\" : \"Increment\",\n\"increment\" : 3.0\n}\n</code></pre> <pre><code>g.Increment( \nincrement=3.0 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 2 java.lang.Double 5.0 java.lang.Double 2.0 java.lang.Double 5.0 java.lang.Float 2.0 java.lang.Double 5.0 java.lang.Long 2 java.lang.Double 5.0 java.lang.String 33 ClassCastException: java.lang.String cannot be cast to java.lang.Number java.lang.String three ClassCastException: java.lang.String cannot be cast to java.lang.Number null java.lang.Double 3.0 Example Increment with Float JavaJSONPython <pre><code>final Increment increment = new Increment(3.0f);\n</code></pre> <pre><code>{\n\"class\" : \"Increment\",\n\"increment\" : {\n\"Float\" : 3.0\n}\n}\n</code></pre> <pre><code>g.Increment( \nincrement={'java.lang.Float': 3.0} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 2 java.lang.Float 5.0 java.lang.Double 2.0 java.lang.Float 5.0 java.lang.Float 2.0 java.lang.Float 5.0 java.lang.Long 2 java.lang.Float 5.0 java.lang.String 33 ClassCastException: java.lang.String cannot be cast to java.lang.Number java.lang.String three ClassCastException: java.lang.String cannot be cast to java.lang.Number null java.lang.Float 3.0"},{"location":"reference/functions-guide/koryphe-functions/#iterableconcat","title":"IterableConcat","text":"<p>For a given Iterable of Iterables, an IterableConcat will essentially perform a FlatMap on the input, by concatenating each of the nested iterables into a single flattened iterable. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableConcat JavaJSONPython <pre><code>final IterableConcat&lt;Integer&gt; function = new IterableConcat&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"IterableConcat\"\n}\n</code></pre> <pre><code>g.IterableConcat()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [[2, 3, 5], [7, 11, 13], [17, 19, 23]] uk.gov.gchq.koryphe.util.IterableUtil$ChainedIterable [2, 3, 5, 7, 11, 13, 17, 19, 23] java.util.ArrayList [[29, 31, 37]] uk.gov.gchq.koryphe.util.IterableUtil$ChainedIterable [29, 31, 37] java.util.ArrayList [[2, 3, 5], [7, 11, 13], null] NullPointerException: null null IllegalArgumentException: iterables are required"},{"location":"reference/functions-guide/koryphe-functions/#iterablefilter","title":"IterableFilter","text":"<p>An IterableFilter applies a given predicate to each element in an Iterable and returns the filtered iterable. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableFilter with IsMoreThan JavaJSONPython <pre><code>final IterableFilter&lt;Integer&gt; function = new IterableFilter&lt;&gt;(new IsMoreThan(5));\n</code></pre> <pre><code>{\n\"class\" : \"IterableFilter\",\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n}\n}\n</code></pre> <pre><code>g.IterableFilter( \npredicate=g.IsMoreThan( \nvalue=5, \nor_equal_to=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3] uk.gov.gchq.koryphe.util.IterableUtil$FilteredIterable [] java.util.ArrayList [5, 10, 15] uk.gov.gchq.koryphe.util.IterableUtil$FilteredIterable [10, 15] java.util.ArrayList [7, 9, 11] uk.gov.gchq.koryphe.util.IterableUtil$FilteredIterable [7, 9, 11] java.util.ArrayList [1, null, 3] uk.gov.gchq.koryphe.util.IterableUtil$FilteredIterable [] null null"},{"location":"reference/functions-guide/koryphe-functions/#iterableflatten","title":"IterableFlatten","text":"<p>Combines the items in an iterable into a single item based on the supplied operator. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableFlatten without Binary Operator JavaJSONPython <pre><code>final IterableFlatten function = new IterableFlatten(null);\n</code></pre> <pre><code>{\n\"class\" : \"IterableFlatten\"\n}\n</code></pre> <pre><code>g.IterableFlatten()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [a, b, c] null Example IterableFlatten with Binary Operator JavaJSONPython <pre><code>final IterableFlatten function = new IterableFlatten&lt;&gt;(new Max());\n</code></pre> <pre><code>{\n\"class\" : \"IterableFlatten\",\n\"operator\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n}\n</code></pre> <pre><code>g.IterableFlatten( \noperator=g.Max() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3, 1] java.lang.Integer 3 java.util.ArrayList [1, null, 6] java.lang.Integer 6 java.util.ArrayList [] null null null"},{"location":"reference/functions-guide/koryphe-functions/#iterablefunction","title":"IterableFunction","text":"<p>An IterableFunction is useful for applying a provided function, or functions, to each entry of a supplied Iterable. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableFunction with a single function JavaJSONPython <pre><code>final IterableFunction&lt;Integer, Integer&gt; function = new IterableFunction&lt;&gt;(new MultiplyBy(2));\n</code></pre> <pre><code>{\n\"class\" : \"IterableFunction\",\n\"functions\" : [ {\n\"class\" : \"MultiplyBy\",\n\"by\" : 2\n} ]\n}\n</code></pre> <pre><code>g.IterableFunction( \nfunctions=[ \ng.MultiplyBy( \nby=2 \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [2, 4, 6] java.util.ArrayList [5, 10, 15] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [10, 20, 30] java.util.ArrayList [7, 9, 11] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [14, 18, 22] java.util.ArrayList [1, null, 3] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [2, null, 6] null null Example IterableFunction with multiple functions <p>Here we build a chain of functions using the IterableFunction's Builder, whereby the output of one function is the input to the next.</p> JavaJSONPython <pre><code>final IterableFunction&lt;Integer, Integer&gt; function = new IterableFunction.Builder&lt;Integer&gt;()\n.first(new MultiplyBy(2))\n.then(new MultiplyBy(4))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"IterableFunction\",\n\"functions\" : [ {\n\"class\" : \"MultiplyBy\",\n\"by\" : 2\n}, {\n\"class\" : \"MultiplyBy\",\n\"by\" : 4\n} ]\n}\n</code></pre> <pre><code>g.IterableFunction( \nfunctions=[ \ng.MultiplyBy( \nby=2 \n), \ng.MultiplyBy( \nby=4 \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [2, 4, 10] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [16, 32, 80] java.util.ArrayList [3, 9, 11] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [24, 72, 88] java.util.ArrayList [1, null, 3] uk.gov.gchq.koryphe.util.IterableUtil$MappedIterable [8, null, 24] null null"},{"location":"reference/functions-guide/koryphe-functions/#iterablelongest","title":"IterableLongest","text":"<p>Returns the longest item in the provided iterable. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example IterableLongest JavaJSONPython <pre><code>final IterableLongest function = new IterableLongest();\n</code></pre> <pre><code>{\n\"class\" : \"IterableLongest\"\n}\n</code></pre> <pre><code>g.IterableLongest()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [[1, 2], [1.5]] java.util.ArrayList [1, 2] java.util.ArrayList [which, is, the, longest, word] java.lang.String longest java.util.ArrayList [] null null null"},{"location":"reference/functions-guide/koryphe-functions/#lastitem","title":"LastItem","text":"<p>For a given Iterable, a LastItem will extract the last item. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example LastItem JavaJSONPython <pre><code>final LastItem&lt;Integer&gt; function = new LastItem&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"LastItem\"\n}\n</code></pre> <pre><code>g.LastItem()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3] java.lang.Integer 3 java.util.ArrayList [5, 8, 13] java.lang.Integer 13 java.util.ArrayList [21, 34, 55] java.lang.Integer 55 java.util.ArrayList [1, null, 3] java.lang.Integer 3 java.util.ArrayList [1, 2, null] null null IllegalArgumentException: Input cannot be null"},{"location":"reference/functions-guide/koryphe-functions/#length","title":"Length","text":"<p>Attempts to return the length of an object. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example Length JavaJSONPython <pre><code>final Length function = new Length();\n</code></pre> <pre><code>{\n\"class\" : \"Length\"\n}\n</code></pre> <pre><code>g.Length()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [Entity[vertex=1,group=entity,properties=Properties[]], Entity[vertex=2,group=entity,properties=Properties[]], Entity[vertex=3,group=entity,properties=Properties[]], Entity[vertex=4,group=entity,properties=Properties[]], Entity[vertex=5,group=entity,properties=Properties[]]] java.lang.Integer 5 java.util.HashMap {option3=value3, option1=value1, option2=value2} java.lang.Integer 3 uk.gov.gchq.gaffer.data.graph.Walk [[Edge[source=A,destination=B,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=B,destination=C,directed=true,group=EnhancedEdge,properties=Properties[]], Edge[source=B,destination=C,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=C,destination=A,directed=true,group=BasicEdge,properties=Properties[]]], [Edge[source=A,destination=E,directed=true,group=BasicEdge,properties=Properties[]]]] java.lang.Integer 4 java.lang.Integer 5 IllegalArgumentException: Could not determine the size of the provided value java.lang.String some string java.lang.Integer 11 java.lang.String[] [1, 2] java.lang.Integer 2 null java.lang.Integer 0"},{"location":"reference/functions-guide/koryphe-functions/#longest","title":"Longest","text":"<p>Determines which of two input objects is the longest. Javadoc</p> <p>Input type: <code>java.lang.Object, java.lang.Object</code></p> Example Longest JavaJSONPython <pre><code>final Longest function = new Longest();\n</code></pre> <pre><code>{\n\"class\" : \"Longest\"\n}\n</code></pre> <pre><code>g.Longest()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.String, java.lang.String] [smaller, long string] java.lang.String long string [java.util.ArrayList, java.util.HashSet] [[1, 2], [1.5]] java.util.ArrayList [1, 2] [ ,java.lang.String] [null, value] java.lang.String value null IllegalArgumentException: Input tuple is required"},{"location":"reference/functions-guide/koryphe-functions/#mapfilter","title":"MapFilter","text":"<p>A Function which applies the given predicates to the keys and/or values. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example MapFilter on keys <p>MapFilter with key predicate.</p> JavaJSONPython <pre><code>final MapFilter keyFilter = new MapFilter().keyPredicate(\nnew StringContains(\"a\")\n);\n</code></pre> <pre><code>{\n\"class\" : \"MapFilter\",\n\"keyPredicate\" : {\n\"class\" : \"StringContains\",\n\"value\" : \"a\",\n\"ignoreCase\" : false\n}\n}\n</code></pre> <pre><code>g.MapFilter(\nkey_predicate=g.StringContains( \nvalue=\"a\", \nignore_case=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {giraffe=0, cat=3, dog=2} java.util.HashMap {giraffe=0, cat=3} Example MapFilter on values <p>MapFilter with value predicate.</p> JavaJSONPython <pre><code>final MapFilter valueFilter = new MapFilter().valuePredicate(\nnew IsMoreThan(10)\n);\n</code></pre> <pre><code>{\n\"class\" : \"MapFilter\",\n\"valuePredicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n}\n}\n</code></pre> <pre><code>g.MapFilter( \nvalue_predicate=g.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {Pizza=30, Casserole=4, Steak=12} java.util.HashMap {Pizza=30, Steak=12} Example MapFilter on keys and values <p>MapFilter with key-value Predicate.</p> JavaJSONPython <pre><code>final MapFilter keyValueFilter = new MapFilter()\n.keyValuePredicate(new AreEqual());\n</code></pre> <pre><code>{\n\"class\" : \"MapFilter\",\n\"keyValuePredicate\" : {\n\"class\" : \"AreEqual\"\n}\n}\n</code></pre> <pre><code>g.MapFilter( \nkey_value_predicate=g.AreEqual() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {1=2, 3=3, 6=4} java.util.HashMap {3=3}"},{"location":"reference/functions-guide/koryphe-functions/#maptotuple","title":"MapToTuple","text":"<p>Converts a Map to a Tuple. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example MapToTuple JavaJSONPython <pre><code>final MapToTuple&lt;String&gt; function = new MapToTuple&lt;&gt;();\n</code></pre> <pre><code>{\n\"class\" : \"MapToTuple\"\n}\n</code></pre> <pre><code>g.MapToTuple()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.HashMap {A=1, B=2, C=3} uk.gov.gchq.koryphe.tuple.MapTuple [1, 2, 3] uk.gov.gchq.gaffer.types.FreqMap {value2=1, value1=2} uk.gov.gchq.koryphe.tuple.MapTuple [1, 2]"},{"location":"reference/functions-guide/koryphe-functions/#multiply","title":"Multiply","text":"<p>The input integers are multiplied together. Javadoc</p> <p>Input type: <code>java.lang.Integer, java.lang.Integer</code></p> Example Multiply JavaJSONPython <pre><code>final Multiply function = new Multiply();\n</code></pre> <pre><code>{\n\"class\" : \"Multiply\"\n}\n</code></pre> <pre><code>g.Multiply()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result [java.lang.Integer, java.lang.Integer] [2, 3] java.lang.Integer 6 [ ,java.lang.Integer] [null, 3] null [java.lang.Integer, ] [2, null] java.lang.Integer 2 [java.lang.Double, java.lang.Double] [2.1, 3.1] IllegalArgumentException: Input tuple values do not match the required function input types"},{"location":"reference/functions-guide/koryphe-functions/#multiplyby","title":"MultiplyBy","text":"<p>Multiply the input integer by the provided number. Javadoc</p> <p>Input type: <code>java.lang.Integer</code></p> Example MultiplyBy JavaJSONPython <pre><code>final MultiplyBy function = new MultiplyBy(2);\n</code></pre> <pre><code>{\n\"class\" : \"MultiplyBy\",\n\"by\" : 2\n}\n</code></pre> <pre><code>g.MultiplyBy( \nby=2 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 6 java.lang.Integer 12 java.lang.Integer 5 java.lang.Integer 10 null null java.lang.Double 6.1 ClassCastException: java.lang.Double cannot be cast to java.lang.Integer"},{"location":"reference/functions-guide/koryphe-functions/#multiplylongby","title":"MultiplyLongBy","text":"<p>Multiply the input Long by the provided number. Javadoc</p> <p>Input type: <code>java.lang.Long</code></p> Example MultiplyLongBy JavaJSONPython <pre><code>final MultiplyLongBy function = new MultiplyLongBy(2L);\n</code></pre> <pre><code>{\n\"class\" : \"MultiplyLongBy\",\n\"by\" : 2\n}\n</code></pre> <pre><code>g.MultiplyLongBy( \nby=2 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Long 6 java.lang.Long 12 java.lang.Long 5 java.lang.Long 10 null null java.lang.Double 6.1 ClassCastException: java.lang.Double cannot be cast to java.lang.Long"},{"location":"reference/functions-guide/koryphe-functions/#nthitem","title":"NthItem","text":"<p>For a given Iterable, an NthItem will extract the item at the Nth index, where n is a user-provided selection. (Consider that this is array-backed, so a selection of \"1\" will extract the item at index 1, ie the 2nd item). Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example NthItem JavaJSONPython <pre><code>final NthItem&lt;Integer&gt; function = new NthItem&lt;&gt;(2);\n</code></pre> <pre><code>{\n\"class\" : \"NthItem\",\n\"selection\" : 2\n}\n</code></pre> <pre><code>g.NthItem( \nselection=2 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [3, 1, 4] java.lang.Integer 4 java.util.ArrayList [1, 5, 9] java.lang.Integer 9 java.util.ArrayList [2, 6, 5] java.lang.Integer 5 java.util.ArrayList [2, null, 5] java.lang.Integer 5 java.util.ArrayList [2, 6, null] null null IllegalArgumentException: Input cannot be null"},{"location":"reference/functions-guide/koryphe-functions/#parsedate","title":"ParseDate","text":"<p>Parses a date string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ParseDate with GMT+4 JavaJSONPython <pre><code>final ParseDate parseDate = new ParseDate();\nparseDate.setFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\nparseDate.setTimeZone(\"Etc/GMT+4\");\n</code></pre> <pre><code>{\n\"class\" : \"ParseDate\",\n\"format\" : \"yyyy-MM-dd HH:mm:ss.SSS\",\n\"timeZone\" : \"Etc/GMT+4\",\n\"microseconds\" : false\n}\n</code></pre> <pre><code>g.ParseDate( \ntime_zone=\"Etc/GMT+4\", \nformat=\"yyyy-MM-dd HH:mm:ss.SSS\", \nmicroseconds=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10-21 16:29:00.000 java.util.Date Wed Oct 21 21:29:00 BST 2015 java.lang.String 1985-10-26 09:00:00.000 java.util.Date Sat Oct 26 14:00:00 BST 1985 java.lang.String 1885-01-01 12:00:00.000 java.util.Date Thu Jan 01 16:00:00 GMT 1885 Example ParseDate with GMT+0 JavaJSONPython <pre><code>final ParseDate parseDate = new ParseDate();\nparseDate.setFormat(\"yyyy-MM-dd HH:mm\");\nparseDate.setTimeZone(\"Etc/GMT+0\");\n</code></pre> <pre><code>{\n\"class\" : \"ParseDate\",\n\"format\" : \"yyyy-MM-dd HH:mm\",\n\"timeZone\" : \"Etc/GMT+0\",\n\"microseconds\" : false\n}\n</code></pre> <pre><code>g.ParseDate( \ntime_zone=\"Etc/GMT+0\", \nformat=\"yyyy-MM-dd HH:mm\", \nmicroseconds=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10-21 16:29 java.util.Date Wed Oct 21 17:29:00 BST 2015 java.lang.String 1985-10-26 09:00 java.util.Date Sat Oct 26 10:00:00 BST 1985 java.lang.String 1885-01-01 12:00 java.util.Date Thu Jan 01 12:00:00 GMT 1885"},{"location":"reference/functions-guide/koryphe-functions/#parsetime","title":"ParseTime","text":"<p>Parses a date string into a timestamp. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ParseTime JavaJSONPython <pre><code>final ParseTime parseTime = new ParseTime();\n</code></pre> <pre><code>{\n\"class\" : \"ParseTime\",\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.ParseTime( \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10-21 16:29:00.000 java.lang.Long 1445441340000 java.lang.String 1985-10-26 09:00:00.000 java.lang.Long 499161600000 java.lang.String 1885-01-01 12:00:00.000 java.lang.Long -2682244800000 Example ParseTime with format JavaJSONPython <pre><code>final ParseTime parseTime = new ParseTime().format(\"yyyy-MM hh:mm\");\n</code></pre> <pre><code>{\n\"class\" : \"ParseTime\",\n\"format\" : \"yyyy-MM hh:mm\",\n\"timeUnit\" : \"MILLISECOND\"\n}\n</code></pre> <pre><code>g.ParseTime( \nformat=\"yyyy-MM hh:mm\", \ntime_unit=\"MILLISECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10 16:29 java.lang.Long 1443713340000 java.lang.String 1985-10 09:00 java.lang.Long 497001600000 java.lang.String 1885-01 12:00 java.lang.Long -2682288000000 java.lang.String 2015-10-21 16:29 IllegalArgumentException: Date string could not be parsed: 2015-10-21 16:29 Example ParseTime with format and GMT JavaJSONPython <pre><code>final ParseTime parseTime = new ParseTime()\n.format(\"yyyy-MM-dd\")\n.timeUnit(\"SECOND\")\n.timeZone(\"GMT\");\n</code></pre> <pre><code>{\n\"class\" : \"ParseTime\",\n\"format\" : \"yyyy-MM-dd\",\n\"timeZone\" : \"GMT\",\n\"timeUnit\" : \"SECOND\"\n}\n</code></pre> <pre><code>g.ParseTime( \ntime_zone=\"GMT\", \nformat=\"yyyy-MM-dd\", \ntime_unit=\"SECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String 2015-10-21 16:29:00.000 java.lang.Long 1445385600 java.lang.String 1985-10-26 09:00:00.000 java.lang.Long 499132800 java.lang.String 1885-01-01 12:00:00.000 java.lang.Long -2682288000"},{"location":"reference/functions-guide/koryphe-functions/#reversestring","title":"ReverseString","text":"<p>Reverse characters in string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ReverseString JavaJSONPython <pre><code>final ReverseString function = new ReverseString();\n</code></pre> <pre><code>{\n\"class\" : \"ReverseString\"\n}\n</code></pre> <pre><code>g.ReverseString()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String reverse java.lang.String esrever java.lang.String esrever java.lang.String reverse null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#setvalue","title":"SetValue","text":"<p>Returns a set value from any input. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example SetValue JavaJSONPython <pre><code>final SetValue function = new SetValue(5);\n</code></pre> <pre><code>{\n\"class\" : \"SetValue\",\n\"value\" : 5\n}\n</code></pre> <pre><code>g.SetValue(\nvalue=5 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.Integer 5 java.lang.Integer 5 java.lang.Integer 5 java.lang.String aString java.lang.Integer 5 java.util.Arrays$ArrayList [4, 5] java.lang.Integer 5 null java.lang.Integer 5"},{"location":"reference/functions-guide/koryphe-functions/#stringappend","title":"StringAppend","text":"<p>Appends a provided suffix to a string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringAppend JavaJSONPython <pre><code>final StringAppend function = new StringAppend(\"mySuffix\");\n</code></pre> <pre><code>{\n\"class\" : \"StringAppend\",\n\"suffix\" : \"mySuffix\"\n}\n</code></pre> <pre><code>g.StringAppend( \nsuffix=\"mySuffix\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a string of some kind java.lang.String a string of some kindmySuffix java.lang.String java.lang.String mySuffix null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringjoin","title":"StringJoin","text":"<p>Joins together all strings in an iterable using the supplied delimiter. Javadoc</p> <p>Input type: <code>java.lang.Iterable</code></p> Example StringJoin without a delimiter JavaJSONPython <pre><code>final StringJoin function = new StringJoin();\n</code></pre> <pre><code>{\n\"class\" : \"StringJoin\"\n}\n</code></pre> <pre><code>g.StringJoin()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [here, are, my, strings] java.lang.String herearemystrings java.util.ArrayList [single] java.lang.String single java.util.ArrayList [] java.lang.String null null Example StringJoin with a delimiter JavaJSONPython <pre><code>final StringJoin function = new StringJoin(\"-\");\n</code></pre> <pre><code>{\n\"class\" : \"StringJoin\",\n\"delimiter\" : \"-\"\n}\n</code></pre> <pre><code>g.StringJoin( \ndelimiter=\"-\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [here, are, my, strings] java.lang.String here-are-my-strings java.util.ArrayList [single] java.lang.String single java.util.ArrayList [] java.lang.String null null"},{"location":"reference/functions-guide/koryphe-functions/#stringprepend","title":"StringPrepend","text":"<p>Prepends a string with the provided prefix. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringPrepend JavaJSONPython <pre><code>final StringPrepend function = new StringPrepend(\"myPrefix\");\n</code></pre> <pre><code>{\n\"class\" : \"StringPrepend\",\n\"prefix\" : \"myPrefix\"\n}\n</code></pre> <pre><code>g.StringPrepend( \nprefix=\"myPrefix\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String a string of some kind java.lang.String myPrefixa string of some kind java.lang.String java.lang.String myPrefix null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringregexreplace","title":"StringRegexReplace","text":"<p>Replace all portions of a string which match a regular expression. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringRegexReplace JavaJSONPython <pre><code>final StringRegexReplace function = new StringRegexReplace(\"[tT]ea\", \"cake\");\n</code></pre> <pre><code>{\n\"class\" : \"StringRegexReplace\",\n\"regex\" : \"[tT]ea\",\n\"replacement\" : \"cake\"\n}\n</code></pre> <pre><code>g.StringRegexReplace( \nregex=\"[tT]ea\", \nreplacement=\"cake\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String tea java.lang.String cake java.lang.String Tea java.lang.String cake java.lang.String TEA java.lang.String TEA java.lang.String brainteaser java.lang.String braincakeser null null java.lang.String coffee java.lang.String coffee java.lang.Long 5 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringregexsplit","title":"StringRegexSplit","text":"<p>Split a string using the provided regular expression. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringRegexSplit JavaJSONPython <pre><code>final StringRegexSplit function = new StringRegexSplit(\"[ \\\\t]+\");\n</code></pre> <pre><code>{\n\"class\" : \"StringRegexSplit\",\n\"regex\" : \"[ \\\\t]+\"\n}\n</code></pre> <pre><code>g.StringRegexSplit( \nregex=\"[ \\t]+\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String no-delimiters-in-this-string java.util.Arrays$ArrayList [no-delimiters-in-this-string] java.lang.String string  with  two  spaces java.util.Arrays$ArrayList [string, with, two, spaces] java.lang.String string with one space java.util.Arrays$ArrayList [string, with, one, space] java.lang.String tab  delimited   string java.util.Arrays$ArrayList [tab, delimited, string] java.lang.String java.util.Arrays$ArrayList [] null null"},{"location":"reference/functions-guide/koryphe-functions/#stringreplace","title":"StringReplace","text":"<p>Replace all portions of a string which match a regular expression. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringReplace JavaJSONPython <pre><code>final StringReplace function = new StringReplace(\"[tea\", \"cake\");\n</code></pre> <pre><code>{\n\"class\" : \"StringReplace\",\n\"replacement\" : \"cake\",\n\"searchString\" : \"[tea\"\n}\n</code></pre> <pre><code>g.StringReplace( \nsearch_string=\"[tea\", \nreplacement=\"cake\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String tea java.lang.String tea java.lang.String Tea java.lang.String Tea java.lang.String TEA java.lang.String TEA java.lang.String brainteaser java.lang.String brainteaser null null java.lang.String coffee java.lang.String coffee java.lang.Long 5 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringsplit","title":"StringSplit","text":"<p>Split a string using the provided regular expression. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringSplit JavaJSONPython <pre><code>final StringSplit function = new StringSplit(\" \");\n</code></pre> <pre><code>{\n\"class\" : \"StringSplit\",\n\"delimiter\" : \" \"\n}\n</code></pre> <pre><code>g.StringSplit( \ndelimiter=\" \" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String no-delimiters-in-this-string java.util.Arrays$ArrayList [no-delimiters-in-this-string] java.lang.String string  with  two  spaces java.util.Arrays$ArrayList [string, with, two, spaces] java.lang.String string with one space java.util.Arrays$ArrayList [string, with, one, space] java.lang.String tab  delimited   string java.util.Arrays$ArrayList [tab  delimited   string] java.lang.String java.util.Arrays$ArrayList [] null null"},{"location":"reference/functions-guide/koryphe-functions/#stringtrim","title":"StringTrim","text":"<p>Trims all whitespace around a string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringTrim JavaJSONPython <pre><code>final StringTrim function = new StringTrim();\n</code></pre> <pre><code>{\n\"class\" : \"StringTrim\"\n}\n</code></pre> <pre><code>g.StringTrim()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String trailing spaces java.lang.String trailing spaces java.lang.String leading spaces java.lang.String leading spaces java.lang.String noSpaces java.lang.String noSpaces null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#stringtruncate","title":"StringTruncate","text":"<p>Truncates a string, with optional ellipses. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example StringTruncate without ellipses JavaJSONPython <pre><code>final StringTruncate function = new StringTruncate(5, false);\n</code></pre> <pre><code>{\n\"class\" : \"StringTruncate\",\n\"length\" : 5,\n\"ellipses\" : false\n}\n</code></pre> <pre><code>g.StringTruncate(\nlength=5, \nellipses=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String no more than five java.lang.String no mo java.lang.String four java.lang.String four java.lang.String java.lang.String null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String Example StringTruncate with ellipses JavaJSONPython <pre><code>final StringTruncate function = new StringTruncate(5, true);\n</code></pre> <pre><code>{\n\"class\" : \"StringTruncate\",\n\"length\" : 5,\n\"ellipses\" : true\n}\n</code></pre> <pre><code>g.StringTruncate(\nlength=5, \nellipses=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String no more than five java.lang.String no mo... java.lang.String four java.lang.String four java.lang.String java.lang.String null null java.lang.Long 54 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#toarray","title":"ToArray","text":"<p>Converts an Object to an Array. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToArray JavaJSONPython <pre><code>final ToArray function = new ToArray();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToArray\"\n}\n</code></pre> <pre><code>g.ToArray()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String test java.lang.Object[] [test] null java.lang.Object[] [null] java.lang.Long 30 java.lang.Object[] [30] uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[type=t,subType=st,value=v] java.lang.Object[] [TypeSubTypeValue[type=t,subType=st,value=v]] java.util.Arrays$ArrayList [a, b, c] java.lang.Object[] [a, b, c] java.util.HashSet [1, 2] java.lang.Object[] [1, 2]"},{"location":"reference/functions-guide/koryphe-functions/#tobytes","title":"ToBytes","text":"<p>Extracts the bytes from a string. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example ToBytes JavaJSONPython <pre><code>final ToBytes toBytes = new ToBytes(StandardCharsets.UTF_16);\n</code></pre> <pre><code>{\n\"class\" : \"ToBytes\",\n\"charset\" : \"UTF-16\"\n}\n</code></pre> <pre><code>g.ToBytes( \ncharset=\"UTF-16\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String example String byte[] \ufffd\ufffd\u0000e\u0000x\u0000a\u0000m\u0000p\u0000l\u0000e\u0000 \u0000S\u0000t\u0000r\u0000i\u0000n\u0000g java.lang.String byte[] null null java.lang.Integer 1 ClassCastException: java.lang.Integer cannot be cast to java.lang.String"},{"location":"reference/functions-guide/koryphe-functions/#todatestring","title":"ToDateString","text":"<p>Converts a date to a String. Javadoc</p> <p>Input type: <code>java.util.Date</code></p> Example ToDateString with microsecond JavaJSONPython <pre><code>final ToDateString function = new ToDateString(\"yyyy-MM-dd HH:mm:ss.SSS\");\n</code></pre> <pre><code>{\n\"class\" : \"ToDateString\",\n\"format\" : \"yyyy-MM-dd HH:mm:ss.SSS\"\n}\n</code></pre> <pre><code>g.ToDateString( \nformat=\"yyyy-MM-dd HH:mm:ss.SSS\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Date Tue Jan 06 19:39:25 GMT 1970 java.lang.String 1970-01-06 19:39:25.200 java.util.Date Thu Jan 01 01:00:00 GMT 1970 java.lang.String 1970-01-01 01:00:00.000 java.lang.Long 1667818823612 ClassCastException: java.lang.Long cannot be cast to java.util.Date java.util.Date Fri Dec 26 06:20:34 GMT 1969 java.lang.String 1969-12-26 06:20:34.800 Example ToDateString with minute JavaJSONPython <pre><code>final ToDateString function = new ToDateString(\"yy-MM-dd HH:mm\");\n</code></pre> <pre><code>{\n\"class\" : \"ToDateString\",\n\"format\" : \"yy-MM-dd HH:mm\"\n}\n</code></pre> <pre><code>g.ToDateString( \nformat=\"yy-MM-dd HH:mm\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Date Tue Jan 06 19:39:25 GMT 1970 java.lang.String 70-01-06 19:39 java.util.Date Thu Jan 01 01:00:00 GMT 1970 java.lang.String 70-01-01 01:00 java.lang.Long 1667818823683 ClassCastException: java.lang.Long cannot be cast to java.util.Date java.util.Date Fri Dec 26 06:20:34 GMT 1969 java.lang.String 69-12-26 06:20 null null Example ToDateString with date only JavaJSONPython <pre><code>final ToDateString function = new ToDateString(\"yy-MM-dd\");\n</code></pre> <pre><code>{\n\"class\" : \"ToDateString\",\n\"format\" : \"yy-MM-dd\"\n}\n</code></pre> <pre><code>g.ToDateString( \nformat=\"yy-MM-dd\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.Date Tue Jan 06 19:39:25 GMT 1970 java.lang.String 70-01-06 java.util.Date Thu Jan 01 01:00:00 GMT 1970 java.lang.String 70-01-01 java.lang.Long 1667818823752 ClassCastException: java.lang.Long cannot be cast to java.util.Date java.util.Date Fri Dec 26 06:20:34 GMT 1969 java.lang.String 69-12-26 null null"},{"location":"reference/functions-guide/koryphe-functions/#tointeger","title":"ToInteger","text":"<p>Returns any input as Integer. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToInteger JavaJSONPython <pre><code>final ToInteger function = new ToInteger();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToInteger\"\n}\n</code></pre> <pre><code>g.ToInteger()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.Integer 4 java.lang.Long 5 java.lang.Integer 5 java.lang.String 5 java.lang.Integer 5 java.lang.String aString NumberFormatException: For input string: \"aString\" java.util.Arrays$ArrayList [6, 3] IllegalArgumentException: Could not convert value to Integer: [6, 3] null null"},{"location":"reference/functions-guide/koryphe-functions/#tolist","title":"ToList","text":"<p>Converts an Object to a List. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToList JavaJSONPython <pre><code>final ToList function = new ToList();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToList\"\n}\n</code></pre> <pre><code>g.ToList()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String test java.util.ArrayList [test] null java.util.ArrayList [null] java.lang.Long 30 java.util.ArrayList [30] uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[type=t,subType=st,value=v] java.util.ArrayList [TypeSubTypeValue[type=t,subType=st,value=v]] java.lang.String[] [a, b, c] java.util.ArrayList [a, b, c] java.util.HashSet [1, 2] java.util.ArrayList [1, 2]"},{"location":"reference/functions-guide/koryphe-functions/#tolong","title":"ToLong","text":"<p>Returns any input as Long. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToLong JavaJSONPython <pre><code>final ToLong function = new ToLong();\n</code></pre> <pre><code>{\n\"class\" : \"ToLong\"\n}\n</code></pre> <pre><code>g.ToLong()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.Long 4 java.lang.Long 5 java.lang.Long 5 java.lang.String 5 java.lang.Long 5 java.lang.String aString NumberFormatException: For input string: \"aString\" java.util.Arrays$ArrayList [6, 3] IllegalArgumentException: Could not convert value to Long: [6, 3] null null"},{"location":"reference/functions-guide/koryphe-functions/#tolowercase","title":"ToLowerCase","text":"<p>Performs toLowerCase on input object. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToLowerCase JavaJSONPython <pre><code>final ToLowerCase function = new ToLowerCase();\n</code></pre> <pre><code>{\n\"class\" : \"ToLowerCase\"\n}\n</code></pre> <pre><code>g.ToLowerCase()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.String 4 java.lang.Long 5 java.lang.String 5 java.lang.String ACAPTIALISEDSTRING java.lang.String acaptialisedstring java.lang.String alowercasestring java.lang.String alowercasestring java.lang.String aString java.lang.String astring java.util.Arrays$ArrayList [6, 3] java.lang.String [6, 3] null null"},{"location":"reference/functions-guide/koryphe-functions/#tonull","title":"ToNull","text":"<p>Returns <code>null</code> on any input object. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToNull JavaJSONPython <pre><code>final ToNull function = new ToNull();\n</code></pre> <pre><code>{\n\"class\" : \"ToNull\"\n}\n</code></pre> <pre><code>g.ToNull()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 null java.lang.Long 5 null java.lang.String aString null java.util.Arrays$ArrayList [6, 3] null null null"},{"location":"reference/functions-guide/koryphe-functions/#toset","title":"ToSet","text":"<p>Converts an Object to a Set. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToSet JavaJSONPython <pre><code>final ToSet function = new ToSet();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.function.ToSet\"\n}\n</code></pre> <pre><code>g.ToSet()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.String test java.util.HashSet [test] null java.util.HashSet [null] java.lang.Long 30 java.util.HashSet [30] uk.gov.gchq.gaffer.types.TypeSubTypeValue TypeSubTypeValue[type=t,subType=st,value=v] java.util.HashSet [TypeSubTypeValue[type=t,subType=st,value=v]] java.lang.String[] [a, b, c] java.util.HashSet [a, b, c] java.util.Arrays$ArrayList [test1, test2] java.util.HashSet [test2, test1]"},{"location":"reference/functions-guide/koryphe-functions/#tostring","title":"ToString","text":"<p>Calls toString on each input. If the input is null, null is returned. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToString JavaJSONPython <pre><code>final ToString function = new ToString();\n</code></pre> <pre><code>{\n\"class\" : \"ToString\"\n}\n</code></pre> <pre><code>g.ToString()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 1 java.lang.String 1 java.lang.Double 2.5 java.lang.String 2.5 java.lang.String abc java.lang.String abc null null"},{"location":"reference/functions-guide/koryphe-functions/#totuple","title":"ToTuple","text":"<p>Converts an Object into a Tuple. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToTuple JavaJSONPython <pre><code>final ToTuple function = new ToTuple();\n</code></pre> <pre><code>{\n\"class\" : \"ToTuple\"\n}\n</code></pre> <pre><code>g.ToTuple()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.util.ArrayList [1, 2, 3, 4] [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.lang.Integer[] [1, 2, 3, 4] [java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer] [1, 2, 3, 4] java.util.HashMap {A=1, B=2, C=3} uk.gov.gchq.koryphe.tuple.MapTuple [1, 2, 3]"},{"location":"reference/functions-guide/koryphe-functions/#touppercase","title":"ToUpperCase","text":"<p>Calls toString followed by toUpperCase on each input. If the input is null, null is returned. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example ToUpperCase JavaJSONPython <pre><code>final ToUpperCase function = new ToUpperCase();\n</code></pre> <pre><code>{\n\"class\" : \"ToUpperCase\"\n}\n</code></pre> <pre><code>g.ToUpperCase()\n</code></pre> <p>Example inputs:</p> Input Type Input Result Type Result java.lang.Integer 4 java.lang.String 4 java.lang.Long 5 java.lang.String 5 java.lang.String ACAPTIALISEDSTRING java.lang.String ACAPTIALISEDSTRING java.lang.String alowercasestring java.lang.String ALOWERCASESTRING java.lang.String aString java.lang.String ASTRING java.util.Arrays$ArrayList [6, 3] java.lang.String [6, 3] null null"},{"location":"reference/operations-guide/accumulo/","title":"HDFS Operations","text":"<p>These are special Operations for use with Accumulo Stores and will not work with other stores.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/accumulo/#getelementsbetweensets","title":"GetElementsBetweenSets","text":"<p>Gets edges that exist between 2 sets and entities in the first set. Javadoc</p> Example getting elements within set of vertices 1 and 2 and 4 JavaJSONPython <pre><code>final GetElementsBetweenSets operation = new GetElementsBetweenSets.Builder()\n.input(new EntitySeed(1))\n.inputB(new EntitySeed(2), new EntitySeed(4))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsBetweenSets\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"inputB\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 4\n} ]\n}\n</code></pre> <pre><code>g.GetElementsBetweenSets( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \ninput_b=[ \ng.EntitySeed( \nvertex=2 \n), \ng.EntitySeed( \nvertex=4 \n) \n] \n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> Example getting elements within set of vertices 1 and 2 and 4 with count greater than 2 JavaJSONPython <pre><code>final GetElementsBetweenSets operation = new GetElementsBetweenSets.Builder()\n.input(new EntitySeed(1))\n.inputB(new EntitySeed(2), new EntitySeed(4))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsBetweenSets\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"inputB\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 4\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElementsBetweenSets( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \ninput_b=[ \ng.EntitySeed( \nvertex=2 \n), \ng.EntitySeed( \nvertex=4 \n) \n] \n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre>"},{"location":"reference/operations-guide/accumulo/#getelementswithinset","title":"GetElementsWithinSet","text":"<p>Gets edges with both vertices in a given set and entities with vertices in a given set. Javadoc</p> Example getting elements within set of vertices 1 and 2 and 3 JavaJSONPython <pre><code>final GetElementsWithinSet operation = new GetElementsWithinSet.Builder()\n.input(new EntitySeed(1), new EntitySeed(2), new EntitySeed(3))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsWithinSet\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 3\n} ]\n}\n</code></pre> <pre><code>g.GetElementsWithinSet( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n), \ng.EntitySeed( \nvertex=3 \n) \n] \n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\n</code></pre> Example getting elements within set of vertices 1 and 2 and 3 with count greater than 2 JavaJSONPython <pre><code>final GetElementsWithinSet operation = new GetElementsWithinSet.Builder()\n.input(new EntitySeed(1), new EntitySeed(2), new EntitySeed(3))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsWithinSet\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 3\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElementsWithinSet( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n), \ng.EntitySeed( \nvertex=3 \n) \n] \n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre>"},{"location":"reference/operations-guide/accumulo/#getelementsinranges","title":"GetElementsInRanges","text":"<p>Gets elements that have vertices within a given range. Javadoc</p> Example getting all elements in the range from entity 1 to entity 4 JavaJSONPython <pre><code>final GetElementsInRanges operation = new GetElementsInRanges.Builder()\n.input(new Pair&lt;&gt;(new EntitySeed(1), new EntitySeed(4)))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsInRanges\",\n\"input\" : [ {\n\"class\" : \"Pair\",\n\"first\" : {\n\"EntitySeed\" : {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}\n},\n\"second\" : {\n\"EntitySeed\" : {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 4\n}\n}\n} ]\n}\n</code></pre> <pre><code>g.GetElementsInRanges( \ninput=[ \ng.SeedPair( \nfirst=g.EntitySeed( \nvertex=1 \n), \nsecond=g.EntitySeed( \nvertex=4 \n) \n) \n] \n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEdge[source=2,destination=3,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\n</code></pre> Example getting all elements in the range from entity 4 to edge 4-&gt;5 JavaJSONPython <pre><code>final GetElementsInRanges operation = new GetElementsInRanges.Builder()\n.input(new Pair&lt;&gt;(new EntitySeed(4), new EdgeSeed(4, 5, DirectedType.EITHER)))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElementsInRanges\",\n\"input\" : [ {\n\"class\" : \"Pair\",\n\"first\" : {\n\"EntitySeed\" : {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 4\n}\n},\n\"second\" : {\n\"EdgeSeed\" : {\n\"class\" : \"EdgeSeed\",\n\"source\" : 4,\n\"destination\" : 5,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n}\n}\n} ]\n}\n</code></pre> <pre><code>g.GetElementsInRanges( \ninput=[ \ng.SeedPair( \nfirst=g.EntitySeed( \nvertex=4 \n), \nsecond=g.EdgeSeed( \nsource=4, \ndestination=5, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n) \n] \n)\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre>"},{"location":"reference/operations-guide/core/","title":"Core Operations","text":"<p>These Operations form the core of Gaffer. They are always available.</p> <p>Unless otherwise specified, this directed graph is used in the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/core/#addelements","title":"AddElements","text":"<p>Adds elements to a graph. Javadoc</p> Example adding a new entity and edge <p>Adding an additonal entity '6' and edge connecting it to '5'</p> JavaJSONPython <pre><code>new AddElements.Builder()\n.input(new Entity.Builder()\n.group(\"entity\")\n.vertex(6)\n.property(\"count\", 1)\n.build(),\nnew Edge.Builder()\n.group(\"edge\")\n.source(5).dest(6).directed(true)\n.property(\"count\", 1)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddElements\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Edge\",\n\"group\" : \"edge\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"skipInvalidElements\" : false,\n\"validate\" : true\n}\n</code></pre> <pre><code>g.AddElements( \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=6 \n), \ng.Edge( \ngroup=\"edge\", \nproperties={'count': 1}, \nsource=5, \ndestination=6, \ndirected=True \n) \n], \nskip_invalid_elements=False, \nvalidate=True \n)\n</code></pre> <p>Results:</p> <pre><code>graph TD\n  1 --&gt; 2\n  1 --&gt; 4\n  2 --&gt; 3\n  2 --&gt; 4\n  2 --&gt; 5\n  3 --&gt; 4\n  5 --&gt; 6</code></pre>"},{"location":"reference/operations-guide/core/#aggregate","title":"Aggregate","text":"<p>The Aggregate operation would normally be used in an Operation Chain to aggregate the results of a previous operation. Javadoc</p> Example simple aggregate elements JavaJSONPython <pre><code>final Aggregate aggregate = new Aggregate();\n</code></pre> <pre><code>{\n\"class\" : \"Aggregate\"\n}\n</code></pre> <pre><code>g.Aggregate()\n</code></pre> Example aggregate only edges of type edge with a transient property and provided aggregator <p>The groupBy has been set to an empty array. This will override the groupBy value in the schema.</p> JavaJSONPython <pre><code>final String[] groupBy = {};\nfinal Aggregate aggregate = new Aggregate.Builder()\n.edge(\"edge\", new AggregatePair(\ngroupBy,\nnew ElementAggregator.Builder()\n.select(\"transientProperty1\")\n.execute(new StringConcat())\n.build()))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"Aggregate\",\n\"edges\" : {\n\"edge\" : {\n\"elementAggregator\" : {\n\"operators\" : [ {\n\"selection\" : [ \"transientProperty1\" ],\n\"binaryOperator\" : {\n\"class\" : \"StringConcat\",\n\"separator\" : \",\"\n}\n} ]\n},\n\"groupBy\" : [ ]\n}\n}\n}\n</code></pre> <pre><code>g.Aggregate( \nedges=[ \ng.AggregatePair( \ngroup=\"edge\", \ngroup_by=[ \n], \nelement_aggregator=g.ElementAggregateDefinition( \noperators=[ \ng.BinaryOperatorContext( \nselection=[ \n\"transientProperty1\" \n], \nbinary_operator=g.BinaryOperator( \nclass_name=\"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\", \nfields={'separator': ','} \n) \n) \n] \n) \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/core/#count","title":"Count","text":"<p>Counts the number of items in an iterable. Javadoc</p> Example counting all elements JavaJSONPython <pre><code>OperationChain&lt;Long&gt; countAllElements = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new Count&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"Count\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.Count() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>11\n</code></pre> <pre><code>11\n</code></pre>"},{"location":"reference/operations-guide/core/#countgroups","title":"CountGroups","text":"<p>Counts the different element groups. Javadoc</p> Example counting all element groups JavaJSONPython <pre><code>final OperationChain&lt;GroupCounts&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new CountGroups())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"CountGroups\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.CountGroups() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>GroupCounts[entityGroups={entity=5},edgeGroups={edge=6},limitHit=false]\n</code></pre> <pre><code>{\n\"entityGroups\" : {\n\"entity\" : 5\n},\n\"edgeGroups\" : {\n\"edge\" : 6\n},\n\"limitHit\" : false\n}\n</code></pre> Example counting all element groups with limit JavaJSONPython <pre><code>final OperationChain&lt;GroupCounts&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new CountGroups(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"CountGroups\",\n\"limit\" : 5\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.CountGroups( \nlimit=5 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>GroupCounts[entityGroups={entity=3},edgeGroups={edge=2},limitHit=true]\n</code></pre> <pre><code>{\n\"entityGroups\" : {\n\"entity\" : 3\n},\n\"edgeGroups\" : {\n\"edge\" : 2\n},\n\"limitHit\" : true\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#filter","title":"Filter","text":"<p>Filters elements. Javadoc</p> Example filtering for elements with a count more than 2 <p>The filter will only return elements (Entities and Edges) with a count more than 2. The results show the Edge between 1 &amp; 4 that has a count of 1 has been removed.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new NamedOperation.Builder&lt;EntitySeed, Iterable&lt;? extends Element&gt;&gt;()\n.name(\"1-hop\")\n.input(new EntitySeed(1))\n.build())\n.then(new Filter.Builder()\n.globalElements(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"1-hop\"\n}, {\n\"class\" : \"Filter\",\n\"globalElements\" : {\n\"predicates\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"1-hop\" \n), \ng.Filter( \nglobal_elements=g.GlobalElementFilterDefinition( \npredicates=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example filtering for edges of type edge with count more than 2 <p>Similar to the previous example but this will only return Edges with group 'edge' that have a count more than 2.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new NamedOperation.Builder&lt;EntitySeed, Iterable&lt;? extends Element&gt;&gt;()\n.name(\"1-hop\")\n.input(new EntitySeed(1))\n.build())\n.then(new Filter.Builder()\n.edge(\"edge\", new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"1-hop\"\n}, {\n\"class\" : \"Filter\",\n\"edges\" : {\n\"edge\" : {\n\"predicates\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"1-hop\" \n), \ng.Filter( \nedges=[ \ng.ElementFilterDefinition( \ngroup=\"edge\", \npredicates=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#limit","title":"Limit","text":"<p>Limits the number of elements returned. This truncates output by default, but optionally an exception can be thrown instead of truncating. Javadoc</p> Example limiting elements to 3 JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new Limit&lt;&gt;(3))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : true\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.Limit( \nresult_limit=3, \ntruncate=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n} ]\n</code></pre> Example limiting elements to 3 without truncation <p>Setting this flag to false will throw an error instead of truncating the iterable. In this case there are more than 3 elements, so when executed a LimitExceededException would be thrown.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new Limit&lt;&gt;(3, false))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : false\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.Limit( \nresult_limit=3, \ntruncate=False \n) \n] \n)\n</code></pre> Example limiting elements to 3 with builder <p>A builder can also be used to create the limit - note that truncate is set to true by default, so in this case it is redundant, but simply shown for demonstration.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new Limit.Builder&lt;Element&gt;()\n.resultLimit(3)\n.truncate(true)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : true\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.Limit( \nresult_limit=3, \ntruncate=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#min","title":"Min","text":"<p>Extracts the minimum element based on provided Comparators. Javadoc</p> Example min count JavaJSONPython <pre><code>final OperationChain&lt;Element&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Min.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Min\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Min( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n</code></pre> Example min count and transient property JavaJSONPython <pre><code>final OperationChain&lt;Element&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"VERTEX\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"DESTINATION\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.build())\n.build())\n.then(new Min.Builder()\n.comparators(\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build(),\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"score\")\n.reverse(false)\n.build()\n)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"DESTINATION\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"VERTEX\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Min\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n}, {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"score\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"VERTEX\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"DESTINATION\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Min( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n), \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"score\", \nreversed=False \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[score=&lt;java.lang.Integer&gt;2,count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"score\" : 2,\n\"count\" : 1\n}\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#max","title":"Max","text":"<p>Extracts the maximum element based on provided Comparators. Javadoc</p> Example max count JavaJSONPython <pre><code>final OperationChain&lt;Element&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Max.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Max\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Max( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n</code></pre> Example max count and transient property JavaJSONPython <pre><code>final OperationChain&lt;Element&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"VERTEX\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"DESTINATION\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.build())\n.build())\n.then(new Max.Builder()\n.comparators(\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build(),\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"score\")\n.reverse(false)\n.build()\n)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"DESTINATION\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"VERTEX\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Max\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n}, {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"score\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"VERTEX\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"DESTINATION\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Max( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n), \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"score\", \nreversed=False \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[score=&lt;java.lang.Integer&gt;6,count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"score\" : 6,\n\"count\" : 3\n}\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#sort","title":"Sort","text":"<p>Sorts elements based on provided Comparators and can be used to extract the top 'n' elements. Javadoc</p> Example sorting on count JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Sort.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build())\n.resultLimit(10)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"Sort\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ],\n\"deduplicate\" : true,\n\"resultLimit\" : 10\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Sort( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n) \n], \nresult_limit=10, \ndeduplicate=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example sorting on count without deduplicating <p>Deduplication is true by default.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Sort.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build())\n.resultLimit(10)\n.deduplicate(false)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"Sort\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ],\n\"deduplicate\" : false,\n\"resultLimit\" : 10\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Sort( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n) \n], \nresult_limit=10, \ndeduplicate=False \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example sorting on count and transient property JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"VERTEX\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"score\", Integer.class)\n.transformer(new ElementTransformer.Builder()\n.select(\"DESTINATION\", \"count\")\n.execute(new ExampleScoreFunction())\n.project(\"score\")\n.build())\n.build())\n.build())\n.build())\n.then(new Sort.Builder()\n.comparators(\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"count\")\n.reverse(false)\n.build(),\nnew ElementPropertyComparator.Builder()\n.groups(\"entity\", \"edge\")\n.property(\"score\")\n.reverse(false)\n.build()\n)\n.resultLimit(4)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"DESTINATION\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"transientProperties\" : {\n\"score\" : \"Integer\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"VERTEX\", \"count\" ],\n\"function\" : {\n\"class\" : \"ExampleScoreFunction\"\n},\n\"projection\" : [ \"score\" ]\n} ]\n}\n}\n}\n}, {\n\"class\" : \"Sort\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n}, {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"score\",\n\"groups\" : [ \"entity\", \"edge\" ],\n\"reversed\" : false\n} ],\n\"deduplicate\" : true,\n\"resultLimit\" : 4\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"VERTEX\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'score': 'java.lang.Integer'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"DESTINATION\", \n\"count\" \n], \nfunction=g.Function( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\", \nfields={} \n), \nprojection=[ \n\"score\" \n] \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Sort( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"count\", \nreversed=False \n), \ng.ElementPropertyComparator( \ngroups=[ \n\"entity\", \n\"edge\" \n], \nproperty=\"score\", \nreversed=False \n) \n], \nresult_limit=4, \ndeduplicate=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[score=&lt;java.lang.Integer&gt;2,count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[score=&lt;java.lang.Integer&gt;4,count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[score=&lt;java.lang.Integer&gt;4,count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[score=&lt;java.lang.Integer&gt;5,count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"score\" : 2,\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"score\" : 4,\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"score\" : 4,\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"score\" : 5,\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#reduce","title":"Reduce","text":"<p>Reduces an input to an output with a single value using provided function. Javadoc</p> Example of reduce JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.input(new EntitySeed(1))\n.build())\n.then(new ForEach.Builder&lt;&gt;()\n.operation(new OperationChain.Builder()\n.first(new ToSingletonList&lt;EntitySeed&gt;())\n.then(new GetAdjacentIds())\n.then(new ToVertices())\n.then(new Reduce.Builder&lt;&gt;()\n.aggregateFunction(new Sum())\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}, {\n\"class\" : \"ForEach\",\n\"operation\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"ToSingletonList\"\n}, {\n\"class\" : \"GetAdjacentIds\"\n}, {\n\"class\" : \"ToVertices\"\n}, {\n\"class\" : \"Reduce\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n} ]\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n] \n), \ng.ForEach( \noperation=g.OperationChain( \noperations=[ \ng.ToSingletonList(), \ng.GetAdjacentIds(), \ng.ToVertices(), \ng.Reduce( \naggregate_function=g.Sum() \n) \n] \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>6\n13\n</code></pre> <pre><code>[ 6, 13 ]\n</code></pre>"},{"location":"reference/operations-guide/core/#map","title":"Map","text":"<p>Maps an input to an output using provided functions. Javadoc</p> Example extracting from get elements <p>This simple example demonstrates retrieving elements from the \"entity\" group, from which the first item is extracted.</p> JavaJSONPython <pre><code>final OperationChain&lt;?&gt; operationChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\")\n.build())\n.build())\n.then(new Map.Builder&lt;Iterable&lt;? extends Element&gt;&gt;()\n.first(new FirstItem&lt;&gt;())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"entities\" : {\n\"entity\" : { }\n}\n}\n}, {\n\"class\" : \"Map\",\n\"functions\" : [ {\n\"class\" : \"FirstItem\"\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.Map( \nfunctions=[ \ng.FirstItem() \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n</code></pre> Example extracting first items from walks <p>This example demonstrates the extraction of the input seeds to a GetWalks operation, using the Map operation with ExtractWalkEdgesFromHop, and FirstItem functions.</p> JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.resultsLimit(100)\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new Map.Builder&lt;Iterable&lt;Walk&gt;&gt;()\n.first(new IterableFunction.Builder&lt;Walk&gt;()\n.first(new ExtractWalkEdgesFromHop(0))\n.then(new FirstItem&lt;&gt;())\n.build())\n.build())\n.then(new ToVertices.Builder()\n.edgeVertices(ToVertices.EdgeVertices.SOURCE)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n} ]\n} ],\n\"resultsLimit\" : 100\n}, {\n\"class\" : \"Map\",\n\"functions\" : [ {\n\"class\" : \"IterableFunction\",\n\"functions\" : [ {\n\"class\" : \"ExtractWalkEdgesFromHop\",\n\"hop\" : 0\n}, {\n\"class\" : \"FirstItem\"\n} ]\n} ]\n}, {\n\"class\" : \"ToVertices\",\n\"edgeVertices\" : \"SOURCE\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n) \n] \n) \n], \nresults_limit=100 \n), \ng.Map( \nfunctions=[ \ng.IterableFunction( \nfunctions=[ \ng.ExtractWalkEdgesFromHop( \nhop=0 \n), \ng.FirstItem() \n] \n) \n] \n), \ng.ToVertices( \nedge_vertices=\"SOURCE\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>1\n2\n</code></pre> <pre><code>[ 1, 2 ]\n</code></pre>"},{"location":"reference/operations-guide/core/#transform","title":"Transform","text":"<p>The Transform operation would normally be used in an Operation Chain to transform the results of a previous operation. Javadoc</p> Example transforming count property into count string property only for edges of type edge JavaJSONPython <pre><code>final Transform transform = new Transform.Builder()\n.edge(\"edge\", new ElementTransformer.Builder()\n.select(\"count\")\n.execute(new ToString())\n.project(\"countString\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"Transform\",\n\"edges\" : {\n\"edge\" : {\n\"functions\" : [ {\n\"selection\" : [ \"count\" ],\n\"function\" : {\n\"class\" : \"ToString\"\n},\n\"projection\" : [ \"countString\" ]\n} ]\n}\n}\n}\n</code></pre> <pre><code>g.Transform( \nedges=[ \ng.ElementTransformDefinition( \ngroup=\"edge\", \nfunctions=[ \ng.FunctionContext( \nselection=[ \n\"count\" \n], \nfunction=g.ToString(), \nprojection=[ \n\"countString\" \n] \n) \n] \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/core/#toarray","title":"ToArray","text":"<p>Converts elements to Array. Javadoc</p> <p>Note</p> <p>Conversion into an Array is done in memory, so it is not advised for a large number of results.</p> Example ToArray JavaJSONPython <pre><code>final OperationChain&lt;? extends Element[]&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToArray&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToArray\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToArray() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tocsv","title":"ToCsv","text":"<p>Converts elements to CSV Strings. Javadoc</p> Example ToCsv JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends String&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToCsv.Builder()\n.includeHeader(true)\n.generator(new CsvGenerator.Builder()\n.group(\"Edge group\")\n.vertex(\"vertex\")\n.source(\"source\")\n.property(\"count\", \"total count\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"ToCsv\",\n\"elementGenerator\" : {\n\"class\" : \"CsvGenerator\",\n\"fields\" : {\n\"GROUP\" : \"Edge group\",\n\"VERTEX\" : \"vertex\",\n\"SOURCE\" : \"source\",\n\"count\" : \"total count\"\n},\n\"constants\" : { },\n\"quoted\" : false,\n\"commaReplacement\" : \" \"\n},\n\"includeHeader\" : true\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToCsv( \nelement_generator=g.CsvGenerator( \nfields={'GROUP': 'Edge group', 'VERTEX': 'vertex', 'SOURCE': 'source', 'count': 'total count'}, \nconstants={}, \nquoted=False, \ncomma_replacement=\" \" \n), \ninclude_header=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge group,vertex,source,total count\nedge,,1,1\nentity,2,,1\nentity,1,,3\nedge,,2,2\nedge,,2,1\nedge,,1,3\nedge,,2,1\n</code></pre> <pre><code>[ \"Edge group,vertex,source,total count\", \"edge,,1,1\", \"entity,2,,1\", \"entity,1,,3\", \"edge,,2,2\", \"edge,,2,1\", \"edge,,1,3\", \"edge,,2,1\" ]\n</code></pre>"},{"location":"reference/operations-guide/core/#toentityseeds","title":"ToEntitySeeds","text":"<p>Converts object(s) into EntitySeeds. Javadoc</p> Example ToEntitySeeds JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends EntitySeed&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToEntitySeeds())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"ToEntitySeeds\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToEntitySeeds() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]]\nEntitySeed[vertex=Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]]\nEntitySeed[vertex=Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]]\nEntitySeed[vertex=Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]]\nEntitySeed[vertex=Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]]\nEntitySeed[vertex=Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]]\nEntitySeed[vertex=Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Entity\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Entity\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : {\n\"uk.gov.gchq.gaffer.data.element.Edge\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tolist","title":"ToList","text":"<p>Converts elements to a List. Javadoc</p> <p>Note</p> <p>Conversion into a List is done using an in memory ArrayList, so it is not advised for a large number of results.</p> Example ToList JavaJSONPython <pre><code>final OperationChain&lt;List&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToList&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToList\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToList() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tomap","title":"ToMap","text":"<p>Converts elements to a Map of key-value pairs. Javadoc</p> Example ToMap JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Map&lt;String, Object&gt;&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToMap.Builder()\n.generator(new MapGenerator.Builder()\n.group(\"group\")\n.vertex(\"vertex\")\n.source(\"source\")\n.property(\"count\", \"total count\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"ToMap\",\n\"elementGenerator\" : {\n\"class\" : \"MapGenerator\",\n\"fields\" : {\n\"GROUP\" : \"group\",\n\"VERTEX\" : \"vertex\",\n\"SOURCE\" : \"source\",\n\"count\" : \"total count\"\n},\n\"constants\" : { }\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToMap( \nelement_generator=g.MapGenerator( \nfields={'GROUP': 'group', 'VERTEX': 'vertex', 'SOURCE': 'source', 'count': 'total count'}, \nconstants={} \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>{group=edge, source=1, total count=1}\n{group=entity, vertex=2, total count=1}\n{group=entity, vertex=1, total count=3}\n{group=edge, source=2, total count=2}\n{group=edge, source=2, total count=1}\n{group=edge, source=1, total count=3}\n{group=edge, source=2, total count=1}\n</code></pre> <pre><code>[ {\n\"group\" : \"edge\",\n\"source\" : 1,\n\"total count\" : 1\n}, {\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"total count\" : 1\n}, {\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"total count\" : 3\n}, {\n\"group\" : \"edge\",\n\"source\" : 2,\n\"total count\" : 2\n}, {\n\"group\" : \"edge\",\n\"source\" : 2,\n\"total count\" : 1\n}, {\n\"group\" : \"edge\",\n\"source\" : 1,\n\"total count\" : 3\n}, {\n\"group\" : \"edge\",\n\"source\" : 2,\n\"total count\" : 1\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#toset","title":"ToSet","text":"<p>Converts elements to a Set. Javadoc</p> <p>Note</p> <p>Conversion into a Set is done using an in memory LinkedHashSet, so it is not advised for a large number of results.</p> Example ToSet JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;? extends Element&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tosingletonlist","title":"ToSingletonList","text":"<p>Converts a single input of type T to a List. Javadoc</p> Example ToSingletonList JavaJSONPython <pre><code>final ToSingletonList&lt;Integer&gt; opChain = new ToSingletonList.Builder&lt;Integer&gt;()\n.input(4)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"ToSingletonList\",\n\"input\" : 4\n}\n</code></pre> <pre><code>g.ToSingletonList( \ninput=4 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>4\n</code></pre> <pre><code>[ 4 ]\n</code></pre> Example of ToSingletonList in an Operation Chain JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.input(new EntitySeed(1))\n.build())\n.then(new ForEach.Builder&lt;&gt;()\n.operation(new OperationChain.Builder()\n.first(new ToSingletonList&lt;EntitySeed&gt;())\n.then(new GetAdjacentIds())\n.then(new ToVertices())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}, {\n\"class\" : \"ForEach\",\n\"operation\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"ToSingletonList\"\n}, {\n\"class\" : \"GetAdjacentIds\"\n}, {\n\"class\" : \"ToVertices\"\n} ]\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n] \n), \ng.ForEach( \noperation=g.OperationChain( \noperations=[ \ng.ToSingletonList(), \ng.GetAdjacentIds(), \ng.ToVertices() \n] \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ 2 --&gt; 3 --&gt; 1 ]\n[ 3 --&gt; 4 --&gt; 5 --&gt; 1 ]\n</code></pre> <pre><code>[ [ 2, 3, 1 ], [ 3, 4, 5, 1 ] ]\n</code></pre>"},{"location":"reference/operations-guide/core/#tostream","title":"ToStream","text":"<p>Converts elements to a Stream. Javadoc</p> <p>Note</p> <p>Conversion into a Stream is done in memory, so it is not advised for a large number of results.</p> Example ToStream JavaJSONPython <pre><code>final OperationChain&lt;Stream&lt;? extends Element&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.build())\n.then(new ToStream&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"ToStream\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToStream() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"parallel\" : false\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#tovertices","title":"ToVertices","text":"<p>Converts ElementIds into vertices. Javadoc</p> <p>The examples use a ToSet operation after the ToVertices operation to deduplicate the results.</p> Example extracting entity vertices JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.view(new View.Builder()\n.entity(\"entity\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.edgeVertices(ToVertices.EdgeVertices.NONE)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"entities\" : {\n\"entity\" : { }\n}\n}\n}, {\n\"class\" : \"ToVertices\",\n\"edgeVertices\" : \"NONE\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.ToVertices( \nedge_vertices=\"NONE\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>2\n1\n</code></pre> <pre><code>[ 2, 1 ]\n</code></pre> Example extracting destination vertex JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.edgeVertices(ToVertices.EdgeVertices.DESTINATION)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"ToVertices\",\n\"edgeVertices\" : \"DESTINATION\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.ToVertices( \nedge_vertices=\"DESTINATION\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>4\n3\n2\n5\n</code></pre> <pre><code>[ 4, 3, 2, 5 ]\n</code></pre> Example extracting both source and destination vertices JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.edgeVertices(ToVertices.EdgeVertices.BOTH)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"ToVertices\",\n\"edgeVertices\" : \"BOTH\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.ToVertices( \nedge_vertices=\"BOTH\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>1\n4\n2\n3\n5\n</code></pre> <pre><code>[ 1, 4, 2, 3, 5 ]\n</code></pre> Example extracting matched vertices JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.useMatchedVertex(ToVertices.UseMatchedVertex.EQUAL)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"ToVertices\",\n\"useMatchedVertex\" : \"EQUAL\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.ToVertices( \nuse_matched_vertex=\"EQUAL\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>1\n2\n</code></pre> <pre><code>[ 1, 2 ]\n</code></pre> Example extracting opposite matched vertices JavaJSONPython <pre><code>final OperationChain&lt;Set&lt;?&gt;&gt; opChain = new Builder()\n.first(new GetElements.Builder()\n.input(new EntitySeed(1), new EntitySeed(2))\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ToVertices.Builder()\n.useMatchedVertex(ToVertices.UseMatchedVertex.OPPOSITE)\n.build())\n.then(new ToSet&lt;&gt;())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n}, {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"ToVertices\",\n\"useMatchedVertex\" : \"OPPOSITE\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=1 \n), \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.ToVertices( \nuse_matched_vertex=\"OPPOSITE\" \n), \ng.ToSet() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>4\n3\n2\n5\n</code></pre> <pre><code>[ 4, 3, 2, 5 ]\n</code></pre>"},{"location":"reference/operations-guide/core/#getschema","title":"GetSchema","text":"<p>Gets the Schema of a Graph. Javadoc</p> Example getting full schema <p>This operation defaults the compact field to false, thereby returning the full Schema.</p> JavaJSONPython <pre><code>final GetSchema operation = new GetSchema();\n</code></pre> <pre><code>{\n\"class\" : \"GetSchema\",\n\"compact\" : false\n}\n</code></pre> <pre><code>g.GetSchema( \ncompact=False \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>{\n\"edges\" : {\n\"edge\" : {\n\"description\" : \"test edge\",\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"description\" : \"test entity\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"description\" : \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"set\" : {\n\"class\" : \"TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"CollectionConcat\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"HyperLogLogPlusSerialiser\"\n}\n}\n}\n}\n</code></pre> <pre><code>{\n\"edges\" : {\n\"edge\" : {\n\"description\" : \"test edge\",\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"description\" : \"test entity\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"description\" : \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"java.lang.Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"java.lang.Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"java.lang.Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"set\" : {\n\"class\" : \"java.util.TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser\"\n}\n}\n}\n}\n</code></pre> Example getting compact schema <p>This operation will retrieve the compact Schema from the store, rather than the full schema.</p> JavaJSONPython <pre><code>final GetSchema operation = new GetSchema.Builder()\n.compact(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetSchema\",\n\"compact\" : true\n}\n</code></pre> <pre><code>g.GetSchema( \ncompact=True \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>{\n\"edges\" : {\n\"edge\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n},\n\"serialiser\" : {\n\"class\" : \"OrderedIntegerSerialiser\"\n}\n},\n\"set\" : {\n\"class\" : \"TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"CollectionConcat\"\n},\n\"serialiser\" : {\n\"class\" : \"TreeSetStringSerialiser\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"HyperLogLogPlusSerialiser\"\n}\n}\n},\n\"vertexSerialiser\" : {\n\"class\" : \"OrderedIntegerSerialiser\"\n}\n}\n</code></pre> <pre><code>{\n\"edges\" : {\n\"edge\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"java.lang.Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"java.lang.Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"java.lang.Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n},\n\"serialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser\"\n}\n},\n\"set\" : {\n\"class\" : \"java.util.TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n},\n\"serialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.serialisation.implementation.TreeSetStringSerialiser\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser\"\n}\n}\n},\n\"vertexSerialiser\" : {\n\"class\" : \"uk.gov.gchq.gaffer.serialisation.implementation.ordered.OrderedIntegerSerialiser\"\n}\n}\n</code></pre>"},{"location":"reference/operations-guide/core/#gettraits","title":"GetTraits","text":"<p>Gets the traits of the current store. Javadoc</p> Example getting all traits JavaJSONPython <pre><code>final GetTraits operation = new GetTraits.Builder()\n.currentTraits(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetTraits\",\n\"currentTraits\" : false\n}\n</code></pre> <pre><code>g.GetTraits( \ncurrent_traits=False \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>QUERY_AGGREGATION\nVISIBILITY\nMATCHED_VERTEX\nTRANSFORMATION\nINGEST_AGGREGATION\nPRE_AGGREGATION_FILTERING\nPOST_TRANSFORMATION_FILTERING\nPOST_AGGREGATION_FILTERING\n</code></pre> <pre><code>[ \"QUERY_AGGREGATION\", \"VISIBILITY\", \"MATCHED_VERTEX\", \"TRANSFORMATION\", \"INGEST_AGGREGATION\", \"PRE_AGGREGATION_FILTERING\", \"POST_TRANSFORMATION_FILTERING\", \"POST_AGGREGATION_FILTERING\" ]\n</code></pre> Example getting current traits <p>This will only return traits that are applicable to your current schema. This schema doesn't have a visibility property, so the VISIBILITY trait is not returned.</p> JavaJSONPython <pre><code>final GetTraits operation = new GetTraits.Builder()\n.currentTraits(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetTraits\",\n\"currentTraits\" : true\n}\n</code></pre> <pre><code>g.GetTraits( \ncurrent_traits=True \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>QUERY_AGGREGATION\nMATCHED_VERTEX\nTRANSFORMATION\nINGEST_AGGREGATION\nPRE_AGGREGATION_FILTERING\nPOST_TRANSFORMATION_FILTERING\nPOST_AGGREGATION_FILTERING\n</code></pre> <pre><code>[ \"QUERY_AGGREGATION\", \"MATCHED_VERTEX\", \"TRANSFORMATION\", \"INGEST_AGGREGATION\", \"PRE_AGGREGATION_FILTERING\", \"POST_TRANSFORMATION_FILTERING\", \"POST_AGGREGATION_FILTERING\" ]\n</code></pre>"},{"location":"reference/operations-guide/export/","title":"Export Operations","text":"<p>These Operations are used for exporting results, either to a temporary cache used within an Operation Chain or to a result cache. Operations using a result cache require this to be enabled for the operation to also be available.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/export/#exporttoset","title":"ExportToSet","text":"<p>Exports results to a Set, always available. Javadoc</p> Example of export and get JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToSet&lt;&gt;())\n.then(new DiscardOutput())\n.then(new GetSetExport())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToSet\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetSetExport\",\n\"start\" : 0\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToSet(), \ng.DiscardOutput(), \ng.GetSetExport( \nstart=0 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example of export and get with pagination JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToSet&lt;&gt;())\n.then(new DiscardOutput())\n.then(new GetSetExport.Builder()\n.start(2)\n.end(4)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToSet\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetSetExport\",\n\"start\" : 2,\n\"end\" : 4\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToSet(), \ng.DiscardOutput(), \ng.GetSetExport( \nstart=2, \nend=4 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example exporting multiple results to set and getting all results JavaJSONPython <pre><code>final OperationChain&lt;Map&lt;String, CloseableIterable&lt;?&gt;&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToSet.Builder&lt;&gt;()\n.key(\"edges\")\n.build())\n.then(new DiscardOutput())\n.then(new GetAllElements())\n.then(new ExportToSet.Builder&lt;&gt;()\n.key(\"entities\")\n.build())\n.then(new DiscardOutput())\n.then(new GetExports.Builder()\n.exports(new GetSetExport.Builder()\n.key(\"edges\")\n.build(),\nnew GetSetExport.Builder()\n.key(\"entities\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToSet\",\n\"key\" : \"edges\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToSet\",\n\"key\" : \"entities\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetExports\",\n\"getExports\" : [ {\n\"class\" : \"GetSetExport\",\n\"start\" : 0,\n\"key\" : \"edges\"\n}, {\n\"class\" : \"GetSetExport\",\n\"start\" : 0,\n\"key\" : \"entities\"\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToSet( \nkey=\"edges\" \n), \ng.DiscardOutput(), \ng.GetAllElements(), \ng.ExportToSet( \nkey=\"entities\" \n), \ng.DiscardOutput(), \ng.GetExports( \nget_exports=[ \ng.GetSetExport( \nkey=\"edges\", \nstart=0 \n), \ng.GetSetExport( \nkey=\"entities\", \nstart=0 \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: edges:\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nuk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: entities:\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>{\n\"uk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: edges\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"uk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: entities\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}\n</code></pre>"},{"location":"reference/operations-guide/export/#getsetexport","title":"GetSetExport","text":"<p>Fetches data from a Set cache, always available. Javadoc</p> <p>Example</p> <p>See examples for ExportToSet above for usage.</p>"},{"location":"reference/operations-guide/export/#exporttogafferresultcache","title":"ExportToGafferResultCache","text":"<p>Exports to a cache backed by a Gaffer graph. Requires a cache to be configured. Javadoc</p> Example of export and get with result cache JavaJSONPython <pre><code>final OperationChain&lt;CloseableIterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToGafferResultCache&lt;&gt;())\n.then(new DiscardOutput())\n.then(new GetGafferResultCacheExport())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToGafferResultCache\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetGafferResultCacheExport\",\n\"key\" : \"ALL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToGafferResultCache(), \ng.DiscardOutput(), \ng.GetGafferResultCacheExport( \nkey=\"ALL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example exporting to result cache and getting job details JavaJSONPython <pre><code>final OperationChain&lt;JobDetail&gt; exportOpChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToGafferResultCache&lt;&gt;())\n.then(new DiscardOutput())\n.then(new GetJobDetails())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToGafferResultCache\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetJobDetails\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToGafferResultCache(), \ng.DiscardOutput(), \ng.GetJobDetails() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=af0a2efe-5f3c-458d-8fa2-93d0f28cbd82,user=User[userId=user01,dataAuths=[],opAuths=[]],status=RUNNING,startTime=1667818800114,opChain=OperationChain[GetAllElements-&gt;ExportToGafferResultCache-&gt;DiscardOutput-&gt;GetJobDetails]]\n</code></pre> <pre><code>{\n\"jobId\" : \"af0a2efe-5f3c-458d-8fa2-93d0f28cbd82\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"RUNNING\",\n\"startTime\" : 1667818800114,\n\"opChain\" : \"OperationChain[GetAllElements-&gt;ExportToGafferResultCache-&gt;DiscardOutput-&gt;GetJobDetails]\"\n}\n</code></pre> Example getting elements from result cache JavaJSONPython <pre><code>final OperationChain&lt;CloseableIterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetGafferResultCacheExport.Builder()\n.jobId(jobDetail.getJobId())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetGafferResultCacheExport\",\n\"jobId\" : \"af0a2efe-5f3c-458d-8fa2-93d0f28cbd82\",\n\"key\" : \"ALL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetGafferResultCacheExport( \njob_id=\"af0a2efe-5f3c-458d-8fa2-93d0f28cbd82\", \nkey=\"ALL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n} ]\n</code></pre> Example exporting multiple results to result cache and then getting all results JavaJSONPython <pre><code>final OperationChain&lt;Map&lt;String, CloseableIterable&lt;?&gt;&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new ExportToGafferResultCache.Builder&lt;&gt;()\n.key(\"edges\")\n.build())\n.then(new DiscardOutput())\n.then(new GetAllElements())\n.then(new ExportToGafferResultCache.Builder&lt;&gt;()\n.key(\"entities\")\n.build())\n.then(new DiscardOutput())\n.then(new GetExports.Builder()\n.exports(new GetGafferResultCacheExport.Builder()\n.key(\"edges\")\n.build(),\nnew GetGafferResultCacheExport.Builder()\n.key(\"entities\")\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToGafferResultCache\",\n\"key\" : \"edges\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"ExportToGafferResultCache\",\n\"key\" : \"entities\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetExports\",\n\"getExports\" : [ {\n\"class\" : \"GetGafferResultCacheExport\",\n\"key\" : \"edges\"\n}, {\n\"class\" : \"GetGafferResultCacheExport\",\n\"key\" : \"entities\"\n} ]\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.ExportToGafferResultCache( \nkey=\"edges\" \n), \ng.DiscardOutput(), \ng.GetAllElements(), \ng.ExportToGafferResultCache( \nkey=\"entities\" \n), \ng.DiscardOutput(), \ng.GetExports( \nget_exports=[ \ng.GetGafferResultCacheExport( \nkey=\"edges\" \n), \ng.GetGafferResultCacheExport( \nkey=\"entities\" \n) \n] \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: edges:\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nuk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: entities:\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>{\n\"uk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: edges\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"uk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: entities\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n</code></pre>"},{"location":"reference/operations-guide/export/#getgafferresultcacheexport","title":"GetGafferResultCacheExport","text":"<p>Fetches data from a Gaffer result cache. Requires a cache to be configured. Javadoc</p> <p>Example</p> <p>See examples for ExportToGafferResultCache above for usage.</p>"},{"location":"reference/operations-guide/export/#exporttootherauthorisedgraph","title":"ExportToOtherAuthorisedGraph","text":"<p>These export examples export all edges in the example graph to another Gaffer instance using Operation Auths against the user. Javadoc</p> <p>To add this operation to your Gaffer graph you will need to write your own version of <code>ExportToOtherAuthorisedGraphOperationDeclarations.json</code> containing the user auths, and then set this property:</p> <pre><code>gaffer.store.operation.declarations=/path/to/ExportToOtherAuthorisedGraphOperationDeclarations.json\n</code></pre> Example export to preconfigured graph <p>This example will export all Edges with group 'edge' to another Gaffer graph with ID 'graph2'. The graph will be loaded from the configured GraphLibrary, so it must already exist. In order to export to graph2 the user must have the required user authorisations that were configured for this operation.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherAuthorisedGraph.Builder()\n.graphId(\"graph2\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherAuthorisedGraph\",\n\"graphId\" : \"graph2\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherAuthorisedGraph( \ngraph_id=\"graph2\" \n) \n] \n)\n</code></pre> Example exporting to new graph using preconfigured schema and properties <p>This example will export all Edges with group 'edge' to another Gaffer graph with new ID 'newGraphId'. The new graph will have a parent Schema and Store Properties within the graph library specified by the ID's schemaId1 and storePropsId1. In order to export to newGraphId with storePropsId1 and schemaId1 the user must have the required user authorisations that were configured for this operation to use each of these 3 ids.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherAuthorisedGraph.Builder()\n.graphId(\"newGraphId\")\n.parentStorePropertiesId(\"storePropsId1\")\n.parentSchemaIds(\"schemaId1\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherAuthorisedGraph\",\n\"graphId\" : \"newGraphId\",\n\"parentSchemaIds\" : [ \"schemaId1\" ],\n\"parentStorePropertiesId\" : \"storePropsId1\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherAuthorisedGraph( \ngraph_id=\"newGraphId\", \nparent_schema_ids=[ \n\"schemaId1\" \n], \nparent_store_properties_id=\"storePropsId1\" \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/export/#exporttoothergraph","title":"ExportToOtherGraph","text":"<p>These export examples export all edges in the example graph to another Gaffer instance. Javadoc</p> <p>To add this operation to your Gaffer graph you will need to include the <code>ExportToOtherGraphOperationDeclarations.json</code> in your store properties, i.e. set this property:</p> <pre><code>gaffer.store.operation.declarations=ExportToOtherGraphOperationDeclarations.json\n</code></pre> Example export <p>This example will export all Edges with group 'edge' to another Gaffer graph with new ID 'newGraphId'. The new graph will have the same schema and same store properties as the current graph. In this case it will just create another table in accumulo called 'newGraphId'.</p> JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"newGraphId\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"newGraphId\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"newGraphId\" \n) \n] \n)\n</code></pre> Example export with custom graph <p>This example will export all Edges with group 'edge' to another Gaffer graph with new ID 'newGraphId'. The new graph will have the custom provided schema (note it must contain the same Edge group 'edge' otherwise the exported edges will be invalid') and custom store properties. The store properties could be any store properties e.g. Accumulo, Map, Proxy store properties.</p> JavaJSONPython <pre><code>final Schema schema = Schema.fromJson(StreamUtil.openStreams(getClass(), \"operations/schema\"));\nfinal StoreProperties storeProperties = new AccumuloProperties();\nfinal OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"newGraphId\")\n.schema(schema)\n.storeProperties(storeProperties)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"newGraphId\",\n\"schema\" : {\n\"edges\" : {\n\"edge\" : {\n\"description\" : \"test edge\",\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"edge1\" : {\n\"source\" : \"int\",\n\"destination\" : \"int\",\n\"directed\" : \"true\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n}\n},\n\"entities\" : {\n\"entity1\" : {\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"entity\" : {\n\"description\" : \"test entity\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"count\" : \"count\"\n}\n},\n\"cardinality\" : {\n\"description\" : \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n\"vertex\" : \"int\",\n\"properties\" : {\n\"edgeGroup\" : \"set\",\n\"hllp\" : \"hllp\",\n\"count\" : \"count\"\n},\n\"groupBy\" : [ \"edgeGroup\" ]\n}\n},\n\"types\" : {\n\"int\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"true\" : {\n\"class\" : \"Boolean\",\n\"validateFunctions\" : [ {\n\"class\" : \"IsTrue\"\n} ]\n},\n\"count\" : {\n\"class\" : \"Integer\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n},\n\"set\" : {\n\"class\" : \"TreeSet\",\n\"aggregateFunction\" : {\n\"class\" : \"CollectionConcat\"\n}\n},\n\"hllp\" : {\n\"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\" : {\n\"class\" : \"HyperLogLogPlusAggregator\"\n},\n\"serialiser\" : {\n\"class\" : \"HyperLogLogPlusSerialiser\"\n}\n}\n}\n},\n\"storeProperties\" : {\n\"gaffer.store.class\" : \"uk.gov.gchq.gaffer.accumulostore.AccumuloStore\",\n\"gaffer.store.properties.class\" : \"uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\"\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"newGraphId\", \nschema={'edges': {'edge': {'description': 'test edge', 'source': 'int', 'destination': 'int', 'directed': 'true', 'properties': {'count': 'count'}}, 'edge1': {'source': 'int', 'destination': 'int', 'directed': 'true', 'properties': {'count': 'count'}}}, 'entities': {'entity1': {'vertex': 'int', 'properties': {'count': 'count'}}, 'entity': {'description': 'test entity', 'vertex': 'int', 'properties': {'count': 'count'}}, 'cardinality': {'description': 'An entity that is added to every vertex representing the connectivity of the vertex.', 'vertex': 'int', 'properties': {'edgeGroup': 'set', 'hllp': 'hllp', 'count': 'count'}, 'groupBy': ['edgeGroup']}}, 'types': {'int': {'class': 'java.lang.Integer', 'aggregateFunction': {\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"}}, 'true': {'class': 'java.lang.Boolean', 'validateFunctions': [{\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"}]}, 'count': {'class': 'java.lang.Integer', 'aggregateFunction': {\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"}}, 'set': {'class': 'java.util.TreeSet', 'aggregateFunction': {\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"}}, 'hllp': {'class': 'com.clearspring.analytics.stream.cardinality.HyperLogLogPlus', 'aggregateFunction': {'class': 'uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator'}, 'serialiser': {'class': 'uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser'}}}}, \nstore_properties={'gaffer.store.class': 'uk.gov.gchq.gaffer.accumulostore.AccumuloStore', 'gaffer.store.properties.class': 'uk.gov.gchq.gaffer.accumulostore.AccumuloProperties'} \n) \n] \n)\n</code></pre> Example export to other Gaffer REST API <p>This example will export all Edges with group 'edge' to another Gaffer REST API.To export to another Gaffer REST API, we go via a Gaffer Proxy Store. We just need to tell the proxy store the host, port and context root of the REST API. Note that you will need to include the proxy-store module as a Maven dependency to do this.</p> JavaJSONPython <pre><code>final ProxyProperties proxyProperties = new ProxyProperties();\nproxyProperties.setStoreClass(ProxyStore.class);\nproxyProperties.setStorePropertiesClass(ProxyProperties.class);\nproxyProperties.setGafferHost(\"localhost\");\nproxyProperties.setGafferPort(8081);\nproxyProperties.setGafferContextRoot(\"/rest/v1\");\nfinal OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"otherGafferRestApiGraphId\")\n.storeProperties(proxyProperties)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"otherGafferRestApiGraphId\",\n\"storeProperties\" : {\n\"gaffer.host\" : \"localhost\",\n\"gaffer.context-root\" : \"/rest/v1\",\n\"gaffer.store.class\" : \"uk.gov.gchq.gaffer.proxystore.ProxyStore\",\n\"gaffer.port\" : \"8081\",\n\"gaffer.store.properties.class\" : \"uk.gov.gchq.gaffer.proxystore.ProxyProperties\"\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"otherGafferRestApiGraphId\", \nstore_properties={'gaffer.host': 'localhost', 'gaffer.context-root': '/rest/v1', 'gaffer.store.class': 'uk.gov.gchq.gaffer.proxystore.ProxyStore', 'gaffer.port': '8081', 'gaffer.store.properties.class': 'uk.gov.gchq.gaffer.proxystore.ProxyProperties'} \n) \n] \n)\n</code></pre> Example export using graph from graph library <p>This example will export all Edges with group 'edge' to another existing graph 'exportGraphId' using a GraphLibrary. We demonstrate here that if we use a GraphLibrary, we can register a graph ID and reference it from the export operation. This means the user does not have to proxy all the schema and store properties when they configure the export operation, they can just provide the ID.</p> JavaJSONPython <pre><code>// Setup the graphLibrary with an export graph\nfinal GraphLibrary graphLibrary = new FileGraphLibrary(\"target/graphLibrary\");\nfinal AccumuloProperties exportStoreProperties = new AccumuloProperties();\n// set other store property config here.\nfinal Schema exportSchema = new Schema.Builder()\n.edge(\"edge\", new SchemaEdgeDefinition.Builder()\n.source(\"int\")\n.destination(\"int\")\n.directed(\"true\")\n.property(\"count\", \"int\")\n.aggregate(false)\n.build())\n.type(\"int\", Integer.class)\n.type(\"true\", new TypeDefinition.Builder()\n.clazz(Boolean.class)\n.validateFunctions(new IsTrue())\n.build())\n.build();\ngraphLibrary.addOrUpdate(\"exportGraphId\", exportSchema, exportStoreProperties);\nfinal Graph graph = new Graph.Builder()\n.config(StreamUtil.openStream(getClass(), \"graphConfigWithLibrary.json\"))\n.addSchemas(StreamUtil.openStreams(getClass(), \"operations/schema\"))\n.storeProperties(new MapStoreProperties())\n.build();\nfinal OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"exportGraphId\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"exportGraphId\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"exportGraphId\" \n) \n] \n)\n</code></pre> Example export to new graph based on config from graph library <p>Similar to the previous example, this example will export all Edges with group 'edge' to another graph using a GraphLibrary. But in this example we show that you can export to a new graph with id newGraphId by choosing any combination of schema and store properties registered in the GraphLibrary. This is useful as a system administrator could register various different store properties, of different Accumulo clusters and a user could them just select which one to use by referring to the relevant store properties ID.</p> JavaJSONPython <pre><code>// Setup the graphLibrary with a schema and store properties for exporting\nfinal GraphLibrary graphLibrary = new FileGraphLibrary(\"target/graphLibrary\");\nfinal AccumuloProperties exportStoreProperties = new AccumuloProperties();\n// set other store property config here.\ngraphLibrary.addProperties(\"exportStorePropertiesId\", exportStoreProperties);\nfinal Schema exportSchema = new Schema.Builder()\n.edge(\"edge\", new SchemaEdgeDefinition.Builder()\n.source(\"int\")\n.destination(\"int\")\n.directed(\"true\")\n.property(\"count\", \"int\")\n.aggregate(false)\n.build())\n.type(\"int\", Integer.class)\n.type(\"true\", new TypeDefinition.Builder()\n.clazz(Boolean.class)\n.validateFunctions(new IsTrue())\n.build())\n.build();\ngraphLibrary.addSchema(\"exportSchemaId\", exportSchema);\nfinal Graph graph = new Graph.Builder()\n.config(StreamUtil.openStream(getClass(), \"graphConfigWithLibrary.json\"))\n.addSchemas(StreamUtil.openStreams(getClass(), \"operations/schema\"))\n.storeProperties(new MapStoreProperties())\n.build();\nfinal OperationChain&lt;Iterable&lt;? extends Element&gt;&gt; opChain =\nnew OperationChain.Builder()\n.first(new GetAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build())\n.then(new ExportToOtherGraph.Builder()\n.graphId(\"newGraphId\")\n.parentSchemaIds(\"exportSchemaId\")\n.parentStorePropertiesId(\"exportStorePropertiesId\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}, {\n\"class\" : \"ExportToOtherGraph\",\n\"graphId\" : \"newGraphId\",\n\"parentSchemaIds\" : [ \"exportSchemaId\" ],\n\"parentStorePropertiesId\" : \"exportStorePropertiesId\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.ExportToOtherGraph( \ngraph_id=\"newGraphId\", \nparent_schema_ids=[ \n\"exportSchemaId\" \n], \nparent_store_properties_id=\"exportStorePropertiesId\" \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/flink/","title":"Flink Operations","text":"<p>These Operations are part of the Flink library and are only available if they have been specifically enabled. This is done by registering the Flink operations and their handlers with your store. You need to add the following to your store properties file: <pre><code>gaffer.store.operation.declarations=FlinkOperationDeclarations.json\n</code></pre></p>"},{"location":"reference/operations-guide/flink/#addelementsfromfile","title":"AddElementsFromFile","text":"<p>Adds elements from a file, requires a filename and an elementGenerator. Javadoc</p>"},{"location":"reference/operations-guide/flink/#example","title":"Example","text":"JavaJSONPython <pre><code>final AddElementsFromFile op = new AddElementsFromFile.Builder()\n.filename(\"filename\")\n.generator(ElementGenerator.class)\n.parallelism(1)\n.validate(true)\n.skipInvalidElements(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddElementsFromFile\",\n\"filename\" : \"filename\",\n\"elementGenerator\" : \"ElementGenerator\",\n\"parallelism\" : 1,\n\"skipInvalidElements\" : false,\n\"validate\" : true\n}\n</code></pre> <pre><code>g.AddElementsFromFile( \nfilename=\"filename\", \nelement_generator=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nparallelism=1, \nvalidate=True, \nskip_invalid_elements=False \n)\n</code></pre>"},{"location":"reference/operations-guide/flink/#addelementsfromkafka","title":"AddElementsFromKafka","text":"<p>Adds elements from a Kafka, requires a topic, groupId, bootstrapServers and an elementGenerator. Javadoc</p>"},{"location":"reference/operations-guide/flink/#example_1","title":"Example","text":"JavaJSONPython <pre><code>final AddElementsFromKafka op = new AddElementsFromKafka.Builder()\n.bootstrapServers(\"hostname1:8080,hostname2:8080\")\n.groupId(\"groupId1\")\n.topic(\"topic1\")\n.generator(ElementGenerator.class)\n.parallelism(1)\n.validate(true)\n.skipInvalidElements(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddElementsFromKafka\",\n\"topic\" : \"topic1\",\n\"groupId\" : \"groupId1\",\n\"bootstrapServers\" : [ \"hostname1:8080,hostname2:8080\" ],\n\"elementGenerator\" : \"ElementGenerator\",\n\"parallelism\" : 1\n}\n</code></pre> <pre><code>g.AddElementsFromKafka( \ntopic=\"topic1\", \ngroup_id=\"groupId1\", \nbootstrap_servers=[ \n\"hostname1:8080,hostname2:8080\" \n], \nelement_generator=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nparallelism=1 \n)\n</code></pre>"},{"location":"reference/operations-guide/flink/#addelementsfromsocket","title":"AddElementsFromSocket","text":"<p>Adds elements from a Socket, requires a hostname, port and an elementGenerator. Javadoc</p>"},{"location":"reference/operations-guide/flink/#example_2","title":"Example","text":"JavaJSONPython <pre><code>final AddElementsFromSocket op = new AddElementsFromSocket.Builder()\n.hostname(\"localhost\")\n.port(8080)\n.delimiter(\",\")\n.generator(ElementGenerator.class)\n.parallelism(1)\n.validate(true)\n.skipInvalidElements(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddElementsFromSocket\",\n\"hostname\" : \"localhost\",\n\"port\" : 8080,\n\"elementGenerator\" : \"ElementGenerator\",\n\"delimiter\" : \",\",\n\"parallelism\" : 1,\n\"skipInvalidElements\" : false,\n\"validate\" : true\n}\n</code></pre> <pre><code>g.AddElementsFromSocket( \nhostname=\"localhost\", \nport=8080, \nelement_generator=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nparallelism=1, \nvalidate=True, \nskip_invalid_elements=False, \ndelimiter=\",\" \n)\n</code></pre>"},{"location":"reference/operations-guide/flow/","title":"Control Flow Operations","text":"<p>These Operations are used for introducing logical control flow over other Operations. They are always available.</p> <p>This directed graph is used in all the examples on this page, except for ForEach:</p> <pre><code>graph LR\n  1 --&gt; 2\n  1 --&gt; 5\n  2 --&gt; 5\n  3 --&gt; 2\n  3 --&gt; 4\n  4 --&gt; 7\n  5 --&gt; 6\n  6 --&gt; 3\n  6 --&gt; 7\n  8 --&gt; 5\n  8 --&gt; 8</code></pre>"},{"location":"reference/operations-guide/flow/#if","title":"If","text":"<p>Conditional statement which executes a certain operation if the condition is satisfied and a different operation otherwise. Javadoc</p> Conditionally get elements or limit current results <p>This example will take the vertices adjacent to the Entity with id 2, and if there are fewer than 5 results, they will be passed into a GetElements operation.Otherwise, there will simply only be 5 results returned.</p> JavaJSONPython <pre><code>final OperationChain&lt;Object&gt; opChain = new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.input(new EntitySeed(2))\n.build())\n.then(new If.Builder&lt;&gt;()\n.conditional(new IsShorterThan(5))\n.then(new OperationChain.Builder()\n.first(new GetElements())\n.then(new Limit&lt;&gt;(5))\n.build())\n.otherwise(new Limit&lt;&gt;(5))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n\"conditional\" : {\n\"predicate\" : {\n\"class\" : \"IsShorterThan\",\n\"maxLength\" : 5,\n\"orEqualTo\" : false\n}\n},\n\"then\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 5,\n\"truncate\" : true\n} ]\n},\n\"otherwise\" : {\n\"class\" : \"Limit\",\n\"resultLimit\" : 5,\n\"truncate\" : true\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n), \ng.If( \nconditional=g.Conditional( \npredicate=g.IsShorterThan( \nmax_length=5, \nor_equal_to=False \n) \n), \nthen=g.OperationChain( \noperations=[ \ng.GetElements(), \ng.Limit( \nresult_limit=5, \ntruncate=True \n) \n] \n), \notherwise=g.Limit( \nresult_limit=5, \ntruncate=True \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=6,destination=3,directed=true,matchedVertex=DESTINATION,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;9]]\nEdge[source=5,destination=6,directed=true,matchedVertex=SOURCE,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;11]]\nEdge[source=1,destination=5,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;6]]\nEntity[vertex=5,group=cardinality,properties=Properties[hllp=&lt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus&gt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@7c0a5be5,count=&lt;java.lang.Integer&gt;3,edgeGroup=&lt;java.util.TreeSet&gt;[edge1]]]\nEntity[vertex=1,group=entity1,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 9\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 6\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Add named operation containing if operation with parameter <p>Here we create and add a NamedOperation, containing an If operation with a parameter. This parameter can be configured so that the optional GetElements with the filter can be executed, otherwise it will just continue to the next GetElements.</p> JavaJSONPython <pre><code>final String opChainString = \"{\" +\n\"\\\"operations\\\" : [ {\\n\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\"\\n\" +\n\"    }, {\\n\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.If\\\",\\n\" +\n\"      \\\"condition\\\" : \\\"${enableFiltering}\\\",\\n\" +\n\"      \\\"then\\\" : {\\n\" +\n\"        \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\\\",\\n\" +\n\"        \\\"view\\\" : {\\n\" +\n\"          \\\"entities\\\" : {\\n\" +\n\"            \\\"entity\\\" : {\\n\" +\n\"              \\\"preAggregationFilterFunctions\\\" : [ {\\n\" +\n\"                \\\"selection\\\" : [ \\\"count\\\" ],\\n\" +\n\"                \\\"predicate\\\" : {\\n\" +\n\"                  \\\"class\\\" : \\\"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\\\",\\n\" +\n\"                  \\\"orEqualTo\\\" : true,\\n\" +\n\"                  \\\"value\\\" : 10\\n\" +\n\"                }\\n\" +\n\"              } ]\\n\" +\n\"            }\\n\" +\n\"          }\\n\" +\n\"        }\\n\" +\n\"      }\\n\" +\n\"    }, {\\n\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\\\"\\n\" +\n\"    } ]\" +\n\"}\";\nParameterDetail param = new ParameterDetail.Builder()\n.defaultValue(true)\n.description(\"Flag for enabling filtering\")\n.valueClass(boolean.class)\n.build();\njava.util.Map&lt;String, ParameterDetail&gt; parameterMap = Maps.newHashMap();\nparameterMap.put(\"enableFiltering\", param);\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(opChainString)\n.description(\"2 hop query with optional filtering by count\")\n.name(\"2-hop-with-optional-filtering\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.parameters(parameterMap)\n.overwrite()\n.score(4)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop-with-optional-filtering\",\n\"description\" : \"2 hop query with optional filtering by count\",\n\"score\" : 4,\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n\"condition\" : \"${enableFiltering}\",\n\"then\" : {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n\"view\" : {\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\",\n\"orEqualTo\" : true,\n\"value\" : 10\n}\n} ]\n}\n}\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n\"enableFiltering\" : {\n\"description\" : \"Flag for enabling filtering\",\n\"defaultValue\" : true,\n\"valueClass\" : \"boolean\",\n\"required\" : false\n}\n},\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds(), \ng.If( \ncondition=\"${enableFiltering}\", \nthen=g.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsLessThan( \nvalue=10, \nor_equal_to=True \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n) \n) \n), \ng.GetElements() \n] \n), \noperation_name=\"2-hop-with-optional-filtering\", \ndescription=\"2 hop query with optional filtering by count\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True, \nscore=4, \nparameters=[ \ng.NamedOperationParameter( \nname=\"enableFiltering\", \nvalue_class=\"boolean\", \ndescription=\"Flag for enabling filtering\", \ndefault_value=True, \nrequired=False \n) \n] \n)\n</code></pre> Parameterised named operation containing if operation <p>This example then runs the NamedOperation, providing both the input, and the value of the parameter via a Map.</p> JavaJSONPython <pre><code>final java.util.Map&lt;String, Object&gt; parameterValues = Maps.newHashMap();\nparameterValues.put(\"enableFiltering\", true);\nfinal NamedOperation&lt;EntityId, CloseableIterable&lt;? extends Element&gt;&gt; namedOp =\nnew NamedOperation.Builder&lt;EntityId, CloseableIterable&lt;? extends Element&gt;&gt;()\n.name(\"2-hop-with-optional-filtering\")\n.input(new EntitySeed(6))\n.parameters(parameterValues)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 6\n} ],\n\"operationName\" : \"2-hop-with-optional-filtering\",\n\"parameters\" : {\n\"enableFiltering\" : true\n}\n}\n</code></pre> <pre><code>g.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=6 \n) \n], \noperation_name=\"2-hop-with-optional-filtering\", \nparameters={'enableFiltering': True} \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=6,destination=3,directed=true,matchedVertex=DESTINATION,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;9]]\nEntity[vertex=7,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=4,destination=7,directed=true,matchedVertex=DESTINATION,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;11]]\nEdge[source=6,destination=7,directed=true,matchedVertex=DESTINATION,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;13]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=7,group=cardinality,properties=Properties[hllp=&lt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus&gt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@4fa6c1be,count=&lt;java.lang.Integer&gt;2,edgeGroup=&lt;java.util.TreeSet&gt;[edge1]]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;7]]\nEntity[vertex=3,group=cardinality,properties=Properties[hllp=&lt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus&gt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@615d6edc,count=&lt;java.lang.Integer&gt;3,edgeGroup=&lt;java.util.TreeSet&gt;[edge1]]]\nEdge[source=3,destination=2,directed=true,matchedVertex=SOURCE,group=edge1,properties=Properties[count=&lt;java.lang.Integer&gt;5]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 9\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 7,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 4,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 11\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 7,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQL9A/oZ\",\n\"cardinality\" : 2\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 3,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4H/BE=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 5\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/flow/#while","title":"While","text":"<p>Runs an operation repeatedly until a condition is no longer true or a maximum number of runs (repeats) has been reached. Javadoc</p> Run an operation 3 times <p>This example will run the GetAdjacentIds operation 3 times.</p> JavaJSONPython <pre><code>final While&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt; operation = new While.Builder&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt;()\n.input(Lists.newArrayList(new EntitySeed(1)))\n.condition(true)\n.maxRepeats(3)\n.operation(new GetAdjacentIds.Builder()\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"While\",\n\"operation\" : {\n\"class\" : \"GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n},\n\"maxRepeats\" : 3,\n\"condition\" : true,\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}\n</code></pre> <pre><code>g.While( \nmax_repeats=3, \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \ncondition=True, \noperation=g.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=6]\nEntitySeed[vertex=3]\nEntitySeed[vertex=7]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 6\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 7\n} ]\n</code></pre> Run a while operation within a get walks <p>This example will run a GetWalks operation with 3 hops.</p> JavaJSONPython <pre><code>final GetWalks operation = new Builder()\n.input(new EntitySeed(1))\n.operations(new While.Builder&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt;()\n.condition(true)\n.maxRepeats(3)\n.operation(new GetElements.Builder()\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"While\",\n\"operation\" : {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n},\n\"maxRepeats\" : 3,\n\"condition\" : true\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.While( \nmax_repeats=3, \ncondition=True, \noperation=g.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 6 --&gt; 3 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 6 --&gt; 7 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 5 --&gt; 6 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"7\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ ]\n} ]\n} ]\n</code></pre> Run until an end result is found <p>This example will keep running GetAdjacentIds until the results contain a vertex with value 7.</p> JavaJSONPython <pre><code>final While&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt; operation = new While.Builder&lt;Iterable&lt;EntityId&gt;, CloseableIterable&lt;? extends EntityId&gt;&gt;()\n.input(Lists.newArrayList(new EntitySeed(1)))\n.conditional(new Not&lt;&gt;(new CollectionContains(new EntitySeed(7))), new ToSet&lt;&gt;())\n.maxRepeats(20)\n.operation(new GetAdjacentIds.Builder()\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"While\",\n\"conditional\" : {\n\"transform\" : {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n},\n\"predicate\" : {\n\"class\" : \"Not\",\n\"predicate\" : {\n\"class\" : \"CollectionContains\",\n\"value\" : {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 7\n}\n}\n}\n},\n\"operation\" : {\n\"class\" : \"GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n},\n\"maxRepeats\" : 20,\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}\n</code></pre> <pre><code>g.While( \nmax_repeats=20, \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation=g.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \nconditional=g.Conditional( \npredicate=g.Not( \npredicate=g.CollectionContains( \nvalue=g.EntitySeed( \nvertex=7 \n) \n) \n), \ntransform=g.ToSet() \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=6]\nEntitySeed[vertex=3]\nEntitySeed[vertex=7]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 6\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 7\n} ]\n</code></pre>"},{"location":"reference/operations-guide/flow/#foreach","title":"ForEach","text":"<p>Runs supplied operation on all items in an Iterable input. Javadoc</p> ForEach Graph <pre><code>graph TD\n1(1, count=3) -- count=3 --&gt; 2\n1 -- count=1 --&gt; 4\n2(2, count=1) -- count=2 --&gt; 3\n2 -- count=1 --&gt; 4(4, count=1)\n2 -- count=1 --&gt; 5(5, count=3)\n3(3, count=2) -- count=4 --&gt; 4</code></pre> Example of ForEach in a chain JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;?&gt;&gt; opChain = new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.input(new EntitySeed(1))\n.build())\n.then(new ForEach.Builder&lt;&gt;()\n.operation(new OperationChain.Builder()\n.first(new ToSingletonList&lt;EntitySeed&gt;())\n.then(new GetAdjacentIds())\n.then(new ToVertices())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ]\n}, {\n\"class\" : \"ForEach\",\n\"operation\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"ToSingletonList\"\n}, {\n\"class\" : \"GetAdjacentIds\"\n}, {\n\"class\" : \"ToVertices\"\n} ]\n}\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n] \n), \ng.ForEach( \noperation=g.OperationChain( \noperations=[ \ng.ToSingletonList(), \ng.GetAdjacentIds(), \ng.ToVertices() \n] \n) \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ 2 --&gt; 3 --&gt; 1 ]\n[ 3 --&gt; 4 --&gt; 5 --&gt; 1 ]\n</code></pre> <pre><code>[ [ 2, 3, 1 ], [ 3, 4, 5, 1 ] ]\n</code></pre>"},{"location":"reference/operations-guide/generate/","title":"Generate Operations","text":"<p>These Operations are used for generating edges, elements and objects. They are always available.</p> <p>This directed graph is used in all the examples on this page, except for GetWalks:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/generate/#generateelements","title":"GenerateElements","text":"<p>Generates elements from objects using provided generators. Javadoc</p> Example generating elements from Strings JavaJSONPython <pre><code>final GenerateElements&lt;String&gt; operation = new GenerateElements.Builder&lt;String&gt;()\n.input(\"1,1\", \"1,2,1\")\n.generator(new ElementGenerator())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GenerateElements\",\n\"input\" : [ \"1,1\", \"1,2,1\" ],\n\"elementGenerator\" : {\n\"class\" : \"ElementGenerator\"\n}\n}\n</code></pre> <pre><code>g.GenerateElements( \nelement_generator=g.ElementGenerator( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nfields={'class': 'uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator'} \n), \ninput=[ \n\"1,1\", \n\"1,2,1\" \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example generating elements from domain objects JavaJSONPython <pre><code>final GenerateElements&lt;Object&gt; operation = new GenerateElements.Builder&lt;&gt;()\n.input(new DomainObject1(1, 1),\nnew DomainObject2(1, 2, 1))\n.generator(new DomainObjectGenerator())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GenerateElements\",\n\"input\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject1\",\n\"a\" : 1,\n\"c\" : 1\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject2\",\n\"a\" : 1,\n\"b\" : 2,\n\"c\" : 1\n} ],\n\"elementGenerator\" : {\n\"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObjectGenerator\"\n}\n}\n</code></pre> <pre><code>g.GenerateElements( \nelement_generator=g.ElementGenerator( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObjectGenerator\", \nfields={'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObjectGenerator'} \n), \ninput=[ \n{'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject1', 'a': 1, 'c': 1}, \n{'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject2', 'a': 1, 'b': 2, 'c': 1} \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/generate/#generateobjects","title":"GenerateObjects","text":"<p>Generates objects from elements using provided generators. Javadoc</p> Example generating Strings from elements JavaJSONPython <pre><code>final GenerateObjects&lt;String&gt; operation = new GenerateObjects.Builder&lt;String&gt;()\n.input(new Entity.Builder()\n.group(\"entity\")\n.vertex(6)\n.property(\"count\", 1)\n.build(),\nnew Edge.Builder()\n.group(\"edge\")\n.source(5).dest(6).directed(true)\n.property(\"count\", 1)\n.build())\n.generator(new ObjectGenerator())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GenerateObjects\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Edge\",\n\"group\" : \"edge\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"elementGenerator\" : {\n\"class\" : \"ObjectGenerator\"\n}\n}\n</code></pre> <pre><code>g.GenerateObjects( \nelement_generator=g.ElementGenerator( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.generator.ObjectGenerator\", \nfields={'class': 'uk.gov.gchq.gaffer.doc.operation.generator.ObjectGenerator'} \n), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=6 \n), \ng.Edge( \ngroup=\"edge\", \nproperties={'count': 1}, \nsource=5, \ndestination=6, \ndirected=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>6,1\n5,6,1\n</code></pre> <pre><code>[ \"6,1\", \"5,6,1\" ]\n</code></pre> Example generating domain objects from elements JavaJSONPython <pre><code>final GenerateObjects&lt;Object&gt; operation = new GenerateObjects.Builder&lt;&gt;()\n.input(new Entity.Builder()\n.group(\"entity\")\n.vertex(6)\n.property(\"count\", 1)\n.build(),\nnew Edge.Builder()\n.group(\"edge\")\n.source(5).dest(6).directed(true)\n.property(\"count\", 1)\n.build())\n.generator(new DomainObjectGenerator())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GenerateObjects\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Edge\",\n\"group\" : \"edge\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"elementGenerator\" : {\n\"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateObjectsExample$DomainObjectGenerator\"\n}\n}\n</code></pre> <pre><code>g.GenerateObjects( \nelement_generator=g.ElementGenerator( \nclass_name=\"uk.gov.gchq.gaffer.doc.operation.GenerateObjectsExample$DomainObjectGenerator\", \nfields={'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateObjectsExample$DomainObjectGenerator'} \n), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=6 \n), \ng.Edge( \ngroup=\"edge\", \nproperties={'count': 1}, \nsource=5, \ndestination=6, \ndirected=True \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>GenerateObjectsExample.DomainObject1[a=6,c=1]\nGenerateObjectsExample.DomainObject2[a=5,b=6,c=1]\n</code></pre> <pre><code>[ {\n\"a\" : 6,\n\"c\" : 1\n}, {\n\"a\" : 5,\n\"b\" : 6,\n\"c\" : 1\n} ]\n</code></pre>"},{"location":"reference/operations-guide/get/","title":"Get Operations","text":"<p>These Operations are used for fetching elements from the store backing a graph. They are available by default.</p> <p>This directed graph is used in all the examples on this page, except for GetWalks:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/get/#getelements","title":"GetElements","text":"<p>Gets elements related to provided seeds. Javadoc</p> Example fetching entities and edges by ID <p>Get entities and edges by entity id 2 and edge id 2 to 3.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2), new EdgeSeed(2, 3, DirectedType.EITHER))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ]\n}\n</code></pre> <pre><code>g.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=2 \n), \ng.EdgeSeed( \nsource=2, \ndestination=3, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching entities and edges by ID and count <p>Get entities and edges by entity id 2 and edge id 2 to 3 with count more than 1.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2), new EdgeSeed(2, 3, DirectedType.EITHER))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n), \ng.EdgeSeed( \nsource=2, \ndestination=3, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example fetching entities and edges related to vertex <p>Get entities and edges that are related to vertex 2.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}\n</code></pre> <pre><code>g.GetElements( \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching entities and edges related to edge <p>Get all entities and edges that are related to edge 1 to 2.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EdgeSeed(1, 2, DirectedType.EITHER))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ]\n}\n</code></pre> <pre><code>g.GetElements( \ninput=[ \ng.EdgeSeed( \nsource=1, \ndestination=2, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example fetching entities and edges related to edge with count <p>Get all entities and edges that are related to edge 1 to 2 with count more than 1.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EdgeSeed(1, 2, DirectedType.EITHER))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EdgeSeed( \nsource=1, \ndestination=2, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre> Example fetching related entities with count <p>Get entities related to 2 with count less than 2 or more than 5.</p> <p>When using an <code>Or</code> predicate with a single selected value you can just do <code>select(propertyName)</code> then <code>execute(new Or(predicates))</code>.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2), new EdgeSeed(2, 3, DirectedType.EITHER))\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(\nnew ElementFilter.Builder()\n.select(\"count\")\n.execute(new Or&lt;&gt;(new IsLessThan(2), new IsMoreThan(5)))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"EITHER\"\n} ],\n\"view\" : {\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}, {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n} ]\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.Or( \npredicates=[ \ng.IsLessThan( \nvalue=2, \nor_equal_to=False \n), \ng.IsMoreThan( \nvalue=5, \nor_equal_to=False \n) \n] \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n), \ng.EdgeSeed( \nsource=2, \ndestination=3, \ndirected_type=\"EITHER\", \nmatched_vertex=\"SOURCE\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching related entities with multiple count <p>Get edges related to 2 when source is less than 2 or destination is more than 3.</p> <p>When using an <code>Or</code> predicate with a multiple selected values, it is more complicated. First, you need to select all the values you want: <code>select(a, b, c)</code>. This will create an array of the selected values, <code>[a, b, c]</code>. You then need to use the <code>Or.Builder</code> to build your <code>Or</code> predicate, using <code>.select()</code> then <code>.execute()</code>. When selecting values in the <code>Or.Builder</code> you need to refer to the position in the <code>[a,b,c]</code> array. So to use property <code>a</code>, use position 0 - <code>select(0)</code>.</p> JavaJSONPython <pre><code>final GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2))\n.view(new View.Builder()\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(\nnew ElementFilter.Builder()\n.select(IdentifierType.SOURCE.name(), IdentifierType.DESTINATION.name())\n.execute(new Or.Builder&lt;&gt;()\n.select(0)\n.execute(new IsLessThan(2))\n.select(1)\n.execute(new IsMoreThan(3))\n.build())\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"SOURCE\", \"DESTINATION\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 0 ],\n\"predicate\" : {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n}, {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 1 ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 3\n}\n} ]\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"SOURCE\", \n\"DESTINATION\" \n], \npredicate=g.Or( \npredicates=[ \ng.NestedPredicate( \nselection=[ \n0 \n], \npredicate=g.IsLessThan( \nvalue=2, \nor_equal_to=False \n) \n), \ng.NestedPredicate( \nselection=[ \n1 \n], \npredicate=g.IsMoreThan( \nvalue=3, \nor_equal_to=False \n) \n) \n] \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching edges and including only specified properties in the results <p>Get entities and return only some properties.</p> <p>Note that because there are only two properties prior to asking to include only <code>vertex|count</code>, this returns the same results as asking to exclude <code>count</code>.</p> JavaJSONPython <pre><code>final Concat concat = new Concat();\nconcat.setSeparator(\"|\");\nfinal GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2))\n.view(new View.Builder()\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"vertex|count\", String.class)\n.properties(\"vertex|count\")\n.transformer(new ElementTransformer.Builder()\n.select(IdentifierType.SOURCE.name(), \"count\")\n.execute(concat)\n.project(\"vertex|count\")\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"vertex|count\" : \"String\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"SOURCE\", \"count\" ],\n\"function\" : {\n\"class\" : \"Concat\",\n\"separator\" : \"|\"\n},\n\"projection\" : [ \"vertex|count\" ]\n} ],\n\"properties\" : [ \"vertex|count\" ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'vertex|count': 'java.lang.String'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"SOURCE\", \n\"count\" \n], \nfunction=g.Concat( \nseparator=\"|\" \n), \nprojection=[ \n\"vertex|count\" \n] \n) \n], \nproperties=[ \n\"vertex|count\" \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;1|3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|2\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|1\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"vertex|count\" : \"1|3\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|1\"\n}\n} ]\n</code></pre> Example fetching edges and excluding specified properties from the results <p>Get entities and exclude properties.</p> <p>Note that because there are only two properties prior to the exclusion, this returns the same results as asking to include only <code>vertex|count</code>.</p> JavaJSONPython <pre><code>final Concat concat = new Concat();\nconcat.setSeparator(\"|\");\nfinal GetElements operation = new GetElements.Builder()\n.input(new EntitySeed(2))\n.view(new View.Builder()\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.transientProperty(\"vertex|count\", String.class)\n.excludeProperties(\"count\")\n.transformer(new ElementTransformer.Builder()\n.select(IdentifierType.SOURCE.name(), \"count\")\n.execute(concat)\n.project(\"vertex|count\")\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"transientProperties\" : {\n\"vertex|count\" : \"String\"\n},\n\"transformFunctions\" : [ {\n\"selection\" : [ \"SOURCE\", \"count\" ],\n\"function\" : {\n\"class\" : \"Concat\",\n\"separator\" : \"|\"\n},\n\"projection\" : [ \"vertex|count\" ]\n} ],\n\"excludeProperties\" : [ \"count\" ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \ntransient_properties={'vertex|count': 'java.lang.String'}, \ntransform_functions=[ \ng.FunctionContext( \nselection=[ \n\"SOURCE\", \n\"count\" \n], \nfunction=g.Concat( \nseparator=\"|\" \n), \nprojection=[ \n\"vertex|count\" \n] \n) \n], \nexclude_properties=[ \n\"count\" \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;1|3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[vertex|count=&lt;java.lang.String&gt;2|1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|2\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|1\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"vertex|count\" : \"1|3\"\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"vertex|count\" : \"2|1\"\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/get/#getadjacentids","title":"GetAdjacentIds","text":"<p>Performs a single hop down related edges. Javadoc</p> Example fetching adjacent IDs from specified vertex <p>Get adjacent ids from vertex 2.</p> JavaJSONPython <pre><code>final GetAdjacentIds operation = new GetAdjacentIds.Builder()\n.input(new EntitySeed(2))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ]\n}\n</code></pre> <pre><code>g.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\nEntitySeed[vertex=4]\nEntitySeed[vertex=5]\nEntitySeed[vertex=1]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 4\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 5\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 1\n} ]\n</code></pre> Example fetching adjacent IDs from along outbound edges of specified vertex <p>Get adjacent ids along outbound edges from vertex 2</p> JavaJSONPython <pre><code>final GetAdjacentIds operation = new GetAdjacentIds.Builder()\n.input(new EntitySeed(2))\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}\n</code></pre> <pre><code>g.GetAdjacentIds( \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\nEntitySeed[vertex=4]\nEntitySeed[vertex=5]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 4\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 5\n} ]\n</code></pre> Example fetching adjacent IDs from along outbound edges of specified vertex with count <p>Get adjacent ids along outbound edges from vertex 2 with count greater than 1.</p> JavaJSONPython <pre><code>final GetAdjacentIds operation = new GetAdjacentIds.Builder()\n.input(new EntitySeed(2))\n.inOutType(IncludeIncomingOutgoingType.OUTGOING)\n.view(new View.Builder()\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(1))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 2\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 1\n}\n} ]\n}\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}\n</code></pre> <pre><code>g.GetAdjacentIds( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=1, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninput=[ \ng.EntitySeed( \nvertex=2 \n) \n], \ninclude_incoming_out_going=\"OUTGOING\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n} ]\n</code></pre>"},{"location":"reference/operations-guide/get/#getallelements","title":"GetAllElements","text":"<p>Gets all elements, optionally using a provided View. Javadoc</p> Example fetching everything in the graph JavaJSONFull JSONPython <pre><code>final GetAllElements operation = new GetAllElements();\n</code></pre> <pre><code>{\n\"class\" : \"GetAllElements\"\n}\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n}\n</code></pre> <pre><code>g.GetAllElements()\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre> Example fetching everything with a count greater than 2 JavaJSONPython <pre><code>final GetAllElements operation = new GetAllElements.Builder()\n.view(new View.Builder()\n.entity(\"entity\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(2))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n},\n\"entities\" : {\n\"entity\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n}\n}\n</code></pre> <pre><code>g.GetAllElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=2, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/get/#getwalks","title":"GetWalks","text":"<p>Gets the walks/paths for a given vertex. Javadoc</p> GetWalks Graph <pre><code>graph LR\n  1 --&gt; 2\n  1 --&gt; 5\n  2 --&gt; 5\n  3 --&gt; 2\n  3 --&gt; 4\n  4 --&gt; 7\n  5 --&gt; 6\n  6 --&gt; 3\n  6 --&gt; 7\n  8 --&gt; 5\n  8 --&gt; 8</code></pre> <p>The examples for GetWalks use a modified graph. This graph contains two different edge groups, each with a modified count property. The count is set to the sum of the source and destination vertices. Additionally, the edge group is determined by whether this count property is even (group edge) or odd (group edge1).</p> Example getting walks <p>Gets all of the Walks of length 2 which start from vertex 1, with the added restriction that all edges must be traversed using the source as the matched vertex.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 6 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 5 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"5\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with incoming outgoing flags <p>Gets all of the Walks of length 2 which start from vertex 1. The IncludeIncomingOutgoingType flag can be used to determine which edge direction the Walk follows for each hop.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 2 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 3 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 6\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"1\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"1\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 5\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"3\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with filtering <p>Gets all of the Walks of length 2 which start from vertex 1. This example demonstrates the use of pre-aggregation filters to select which edges to traverse based on a property on the edge.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder().edge(\"edge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(3))\n.build())\n.build())\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder().edge(\"edge1\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(8))\n.build())\n.build())\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 3\n}\n} ]\n}\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge1\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 8\n}\n} ]\n}\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=3, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge1\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=8, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 8 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ ]\n}, {\n\"5\" : [ ]\n}, {\n\"8\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with entities <p>Gets all of the Walks of length 2 which start from vertex 1, with all of the entities which are attached to the vertices found along the way.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder().edge(\"edge\")\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder().edge(\"edge1\")\n.entity(\"entity1\")\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 2 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n} ]\n} ]\n</code></pre> Example getting walks with filtering on cardinality entities from first hop <p>Gets all of the Walks of length 2 which start from vertex 5, where the results of the first hop are filtered based on the cardinality entities in the graph.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new OperationChain.Builder()\n.first(new GetElements.Builder()\n.view(new View.Builder()\n.entity(\"cardinality\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"edgeGroup\")\n.execute(new IsEqual(CollectionUtil.treeSet(\"edge\")))\n.build())\n.groupBy()\n.postAggregationFilter(new ElementFilter.Builder()\n.select(\"hllp\")\n.execute(new HyperLogLogPlusIsLessThan(2))\n.build())\n.build())\n.build())\n.build())\n.then(new GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 5\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"entities\" : {\n\"cardinality\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"edgeGroup\" ],\n\"predicate\" : {\n\"class\" : \"IsEqual\",\n\"value\" : {\n\"TreeSet\" : [ \"edge\" ]\n}\n}\n} ],\n\"groupBy\" : [ ],\n\"postAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"hllp\" ],\n\"predicate\" : {\n\"class\" : \"HyperLogLogPlusIsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n} ]\n}\n}\n}\n}, {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=5 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"cardinality\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"edgeGroup\" \n], \npredicate=g.IsEqual( \nvalue={'java.util.TreeSet': ['edge']} \n) \n) \n], \npost_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"hllp\" \n], \npredicate=g.HyperLogLogPlusIsLessThan( \nvalue=2, \nor_equal_to=False \n) \n) \n], \ngroup_by=[ \n] \n) \n], \nall_edges=False, \nall_entities=False \n) \n), \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 3 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 5\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"3\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n} ]\n} ]\n} ]\n</code></pre> Example getting walks with filtering on cardinality entities contained in walk <p>Gets all of the Walks of length 2 which start from vertex 5, where each Walk returned in the results is filtered based on total of the count property on the walks' edges being less than 11.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.entities(Lists.newArrayList(\"entity\", \"entity1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.conditional(new Conditional(\nnew IsLessThan(11),\nnew OperationChain.Builder()\n.first(new Map.Builder&lt;&gt;()\n.first(new ExtractWalkEdges())\n.then(new IterableConcat())\n.build())\n.then(new ForEach.Builder&lt;&gt;()\n.operation(new Map.Builder&lt;&gt;()\n.first(new ExtractProperty(\"count\"))\n.build())\n.build())\n.then(new Reduce.Builder&lt;&gt;()\n.aggregateFunction(new Sum())\n.build())\n.build()))\n.input(new EntitySeed(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 5\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n},\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"entities\" : {\n\"entity1\" : { },\n\"entity\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"conditional\" : {\n\"transform\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Map\",\n\"functions\" : [ {\n\"class\" : \"ExtractWalkEdges\"\n}, {\n\"class\" : \"IterableConcat\"\n} ]\n}, {\n\"class\" : \"ForEach\",\n\"operation\" : {\n\"class\" : \"Map\",\n\"functions\" : [ {\n\"class\" : \"ExtractProperty\",\n\"name\" : \"count\"\n} ]\n}\n}, {\n\"class\" : \"Reduce\",\n\"aggregateFunction\" : {\n\"class\" : \"Sum\"\n}\n} ]\n},\n\"predicate\" : {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 11\n}\n},\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=5 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nentities=[ \ng.ElementDefinition( \ngroup=\"entity1\" \n), \ng.ElementDefinition( \ngroup=\"entity\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000, \nconditional=g.Conditional( \npredicate=g.IsLessThan( \nvalue=11, \nor_equal_to=False \n), \ntransform=g.OperationChain( \noperations=[ \ng.Map( \nfunctions=[ \ng.ExtractWalkEdges(), \ng.IterableConcat() \n] \n), \ng.ForEach( \noperation=g.Map( \nfunctions=[ \ng.ExtractProperty( \nname=\"count\" \n) \n] \n) \n), \ng.Reduce( \naggregate_function=g.Sum() \n) \n] \n) \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 1 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n} ]\n} ]\n</code></pre> Example getting walks with multiple groups <p>Gets all of the Walks of length 2 which start from vertex 1. The IncludeIncomingOutgoingType flag can be used to determine which edge direction the Walk follows for each hop. Additionally, the group set in the view is used to only travel down certain edges in each hop.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.view(new View.Builder()\n.edge(\"edge1\")\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge1\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 2 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ ]\n}, {\n\"5\" : [ ]\n}, {\n\"8\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ ]\n}, {\n\"5\" : [ ]\n}, {\n\"2\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with loops <p>Gets all of the Walks of length 6 which start from vertex 1, with the added restriction that all edges must be traversed using the source as the matched vertex. This demonstrates the behaviour when previously traversed edges are encountered again.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 5 --&gt; 6 --&gt; 3 --&gt; 2 --&gt; 5 --&gt; 6 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 5 --&gt; 6 --&gt; 3 --&gt; 4 --&gt; 7 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --&gt; 2 --&gt; 5 --&gt; 6 --&gt; 3 --&gt; 2 --&gt; 5 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 6\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 5\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 3,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4H/BE=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 4,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 3,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4H/BE=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"4\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 4,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQL9CPoD\",\n\"cardinality\" : 2\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"7\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 5\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 7\n}\n} ] ],\n\"entities\" : [ {\n\"1\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 1,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 3,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4H/BE=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"2\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 2,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with self loops <p>Gets all of the Walks of length 3 which start from vertex 8, with the added restriction that all edges must be traversed using the source as the matched vertex. This demonstrates the behaviour when self loops exist in the graph.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build(),\nnew GetElements.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.input(new EntitySeed(8))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 8\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=8 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 8 --&gt; 8 --&gt; 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 8 --&gt; 8 --&gt; 5 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 8 --&gt; 5 --&gt; 6 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 5 --&gt; 6 --&gt; 3 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 8 --&gt; 5 --&gt; 6 --&gt; 7 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 9\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"3\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 5,\n\"destination\" : 6,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 11\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 6,\n\"destination\" : 7,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n\"cardinality\" : 1\n}\n}\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 5,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"6\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 6,\n\"properties\" : {\n\"hllp\" : {\n\"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n\"hyperLogLogPlus\" : {\n\"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n\"cardinality\" : 3\n}\n}\n},\n\"count\" : 3,\n\"edgeGroup\" : {\n\"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}, {\n\"7\" : [ ]\n} ]\n} ]\n</code></pre> Example getting walks with additional operations <p>Gets all of the Walks of length 2 which start from vertex 5, where an additional operation is inserted between the GetElements operations used to retrieve elements.</p> JavaJSONPython <pre><code>final GetWalks getWalks = new GetWalks.Builder()\n.operations(new OperationChain(new GetElements.Builder()\n.view(new View.Builder()\n.edges(Lists.newArrayList(\"edge\", \"edge1\"))\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build(),\nnew Sort.Builder()\n.comparators(new ElementPropertyComparator.Builder()\n.property(\"count\")\n.build())\n.build()),\nnew GetElements.Builder()\n.view(new View.Builder()\n.edge(\"edge1\")\n.build())\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n.build())\n.input(new EntitySeed(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetWalks\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"vertex\" : 5\n} ],\n\"operations\" : [ {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { },\n\"edge1\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n}, {\n\"class\" : \"Sort\",\n\"comparators\" : [ {\n\"class\" : \"ElementPropertyComparator\",\n\"property\" : \"count\",\n\"groups\" : [ ],\n\"reversed\" : false\n} ],\n\"deduplicate\" : true\n} ]\n}, {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\",\n\"view\" : {\n\"edges\" : {\n\"edge1\" : { }\n}\n},\n\"includeIncomingOutGoing\" : \"INCOMING\"\n} ]\n} ],\n\"resultsLimit\" : 1000000\n}\n</code></pre> <pre><code>g.GetWalks( \ninput=[ \ng.EntitySeed( \nvertex=5 \n) \n], \noperations=[ \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge\" \n), \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n), \ng.Sort( \ncomparators=[ \ng.ElementPropertyComparator( \ngroups=[ \n], \nproperty=\"count\", \nreversed=False \n) \n], \ndeduplicate=True \n) \n] \n), \ng.OperationChain( \noperations=[ \ng.GetElements( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"edge1\" \n) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"INCOMING\" \n) \n] \n) \n], \nresults_limit=1000000 \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>uk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 5 --&gt; 2 --&gt; 3 ]\n</code></pre> <pre><code>[ {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 3\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ ]\n}, {\n\"2\" : [ ]\n}, {\n\"1\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 7\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 3,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"DESTINATION\",\n\"properties\" : {\n\"count\" : 5\n}\n} ] ],\n\"entities\" : [ {\n\"5\" : [ ]\n}, {\n\"2\" : [ ]\n}, {\n\"3\" : [ ]\n} ]\n} ]\n</code></pre>"},{"location":"reference/operations-guide/hdfs/","title":"HDFS Operations","text":"<p>These Operations are used with HDFS.</p>"},{"location":"reference/operations-guide/hdfs/#addelementsfromhdfs","title":"AddElementsFromHdfs","text":"<p>Operation for adding Elements from HDFS. Javadoc</p> <p>This operation must be run as a Hadoop Job. So you will need to package up a shaded jar containing a main method that creates an instance of Graph and executes the operation. It can then be run with: </p> <pre><code>hadoop jar custom-shaded-jar.jar\n</code></pre> <p>When running an AddElementsFromHdfs on Accumulo, if you do not specify 'useProvidedSplits' and the Accumulo table does not have a full set of split points then this operation will first sample the input data, generate split points and set them on the Accumulo table. It does this by delegating to 'SampleDataForSplitPoints' and class <code>uk.gov.gchq.gaffer.operation.impl.SplitStoreFromFile</code>.</p> <p>Specifying the number of reducers within the Job has now been deprecated, and instead it is preferred to set the minimum and/or maximum number of reducers. Most users should not need to set the min or max number of reducers and simply leave the Store to pick the optimal number. The Accumulo Store does this by using the number of tablet servers. If you choose to set a min or max number of reducers then the Store will try to use a number within that range. If there is no optimal number within the provided range an exception is thrown.</p>"},{"location":"reference/operations-guide/hdfs/#example-adding-elements-from-hdfs-main-method","title":"Example adding elements from HDFS - Main Method","text":"<p>Example content for a main method that takes 5 arguments and runs an AddElementsFromHdfs.</p> Java <pre><code>if (5 != args.length) {\nSystem.err.println(\"Usage: hadoop jar custom-hdfs-import-&lt;version&gt;-shaded.jar &lt;inputPath&gt; &lt;outputPath&gt; &lt;failurePath&gt; &lt;schemaPath&gt; &lt;storePropertiesPath&gt;\");\nSystem.exit(1);\n}\nfinal String inputPath = args[0];\nfinal String outputPath = args[1];\nfinal String failurePath = args[2];\nfinal String schemaPath = args[3];\nfinal String storePropertiesPath = args[4];\nfinal Graph graph = new Graph.Builder()\n.storeProperties(storePropertiesPath)\n.addSchemas(Paths.get(schemaPath))\n.build();\nfinal AddElementsFromHdfs operation = new AddElementsFromHdfs.Builder()\n.addInputMapperPair(inputPath, TextMapperGeneratorImpl.class.getName())\n.outputPath(outputPath)\n.failurePath(failurePath)\n.splitsFilePath(\"/tmp/splits\")\n.workingPath(\"/tmp/workingDir\")\n.useProvidedSplits(false)\n.jobInitialiser(new TextJobInitialiser())\n.minReducers(10)\n.maxReducers(100)\n.build();\ngraph.execute(operation, new User());\n</code></pre>"},{"location":"reference/operations-guide/job/","title":"Job Tracker Operations","text":"<p>These Operations are used for managing Jobs. They are only available when the Job Tracker is enabled. By default, this is disabled.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/job/#getalljobdetails","title":"GetAllJobDetails","text":"<p>Gets all running and historic job details for the graph. Javadoc</p> Example GetAllJobDetails JavaJSONPython <pre><code>final GetAllJobDetails operation = new GetAllJobDetails();\n</code></pre> <pre><code>{\n\"class\" : \"GetAllJobDetails\"\n}\n</code></pre> <pre><code>g.GetAllJobDetails()\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=b7084ad3-68ab-4a7b-879c-4c71813ac66f,user=User[userId=user01,dataAuths=[],opAuths=[]],status=RUNNING,startTime=1667818802286,opChain=OperationChain[GetAllJobDetails]]\n</code></pre> <pre><code>[ {\n\"jobId\" : \"b7084ad3-68ab-4a7b-879c-4c71813ac66f\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"RUNNING\",\n\"startTime\" : 1667818802286,\n\"opChain\" : \"OperationChain[GetAllJobDetails]\"\n} ]\n</code></pre>"},{"location":"reference/operations-guide/job/#getjobdetails","title":"GetJobDetails","text":"<p>Gets the details of a single job. Javadoc</p> Example getting job details in an operation chain JavaJSONPython <pre><code>final OperationChain&lt;JobDetail&gt; opChain = new OperationChain.Builder()\n.first(new GetAllElements())\n.then(new DiscardOutput())\n.then(new GetJobDetails())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetAllElements\"\n}, {\n\"class\" : \"DiscardOutput\"\n}, {\n\"class\" : \"GetJobDetails\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetAllElements(), \ng.DiscardOutput(), \ng.GetJobDetails() \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=306e1208-62d2-47d5-b2c2-1005d3295011,user=User[userId=user01,dataAuths=[],opAuths=[]],status=RUNNING,startTime=1667818803505,opChain=OperationChain[GetAllElements-&gt;DiscardOutput-&gt;GetJobDetails]]\n</code></pre> <pre><code>{\n\"jobId\" : \"306e1208-62d2-47d5-b2c2-1005d3295011\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"RUNNING\",\n\"startTime\" : 1667818803505,\n\"opChain\" : \"OperationChain[GetAllElements-&gt;DiscardOutput-&gt;GetJobDetails]\"\n}\n</code></pre> Example getting job details with specific jobId JavaJSONPython <pre><code>final GetJobDetails operation = new GetJobDetails.Builder()\n.jobId(jobId)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJobDetails\",\n\"jobId\" : \"306e1208-62d2-47d5-b2c2-1005d3295011\"\n}\n</code></pre> <pre><code>g.GetJobDetails( \njob_id=\"306e1208-62d2-47d5-b2c2-1005d3295011\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=306e1208-62d2-47d5-b2c2-1005d3295011,user=User[userId=user01,dataAuths=[],opAuths=[]],status=FINISHED,startTime=1667818803505,endTime=1667818803505,opChain=OperationChain[GetAllElements-&gt;DiscardOutput-&gt;GetJobDetails]]\n</code></pre> <pre><code>{\n\"jobId\" : \"306e1208-62d2-47d5-b2c2-1005d3295011\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"FINISHED\",\n\"startTime\" : 1667818803505,\n\"endTime\" : 1667818803505,\n\"opChain\" : \"OperationChain[GetAllElements-&gt;DiscardOutput-&gt;GetJobDetails]\"\n}\n</code></pre>"},{"location":"reference/operations-guide/job/#getjobresults","title":"GetJobResults","text":"<p>Gets the results of a job. Javadoc</p> Example GetJobResults JavaJSONPython <pre><code>final GetJobResults operation = new GetJobResults.Builder()\n.jobId(jobId)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJobResults\",\n\"jobId\" : \"60d667eb-a20d-44c2-963f-fc1b6c9b3868\"\n}\n</code></pre> <pre><code>g.GetJobResults( \njob_id=\"60d667eb-a20d-44c2-963f-fc1b6c9b3868\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/job/#cancelscheduledjob","title":"CancelScheduledJob","text":"<p>Cancels a scheduled job specified by the job id. Javadoc</p> Example of a scheduled job before being cancelled JavaJSONPython <pre><code>final OperationChain&lt;JobDetail&gt; operationChain = new OperationChain.Builder()\n.first(new GetJobDetails.Builder().jobId(jobId).build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetJobDetails\",\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetJobDetails( \njob_id=\"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=35c1bd84-1cd3-4609-8892-710e9d3c2d3f,user=User[userId=user01,dataAuths=[],opAuths=[]],status=SCHEDULED_PARENT,startTime=1667818799343,endTime=1667818799344,opChain=OperationChain[GetAllElements],serialisedOperationChain={\"class\":\"uk.gov.gchq.gaffer.operation.OperationChain\",\"operations\":[{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\",\"view\":{\"edges\":{\"edge\":{},\"edge1\":{}},\"entities\":{\"entity1\":{},\"entity\":{},\"cardinality\":{}}}}]},repeat=Repeat[initialDelay=1,repeatPeriod=1,timeUnit=MINUTES]]\n</code></pre> <pre><code>{\n\"repeat\" : {\n\"initialDelay\" : 1,\n\"repeatPeriod\" : 1,\n\"timeUnit\" : \"MINUTES\"\n},\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"SCHEDULED_PARENT\",\n\"startTime\" : 1667818799343,\n\"endTime\" : 1667818799344,\n\"opChain\" : \"OperationChain[GetAllElements]\"\n}\n</code></pre> Example cancelling a scheduled job JavaJSONPython <pre><code>final OperationChain chain = new OperationChain.Builder()\n.first(new CancelScheduledJob.Builder()\n.jobId(jobId)\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"CancelScheduledJob\",\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.CancelScheduledJob( \njob_id=\"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\" \n) \n] \n)\n</code></pre> Example of a scheduled job after being cancelled JavaJSONPython <pre><code>final OperationChain&lt;JobDetail&gt; operationChain = new OperationChain.Builder()\n.first(new GetJobDetails.Builder().jobId(jobId).build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetJobDetails\",\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.GetJobDetails( \njob_id=\"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>JobDetail[jobId=35c1bd84-1cd3-4609-8892-710e9d3c2d3f,user=User[userId=user01,dataAuths=[],opAuths=[]],status=CANCELLED,startTime=1667818799343,endTime=1667818799344,opChain=OperationChain[GetAllElements],serialisedOperationChain={\"class\":\"uk.gov.gchq.gaffer.operation.OperationChain\",\"operations\":[{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\",\"view\":{\"edges\":{\"edge\":{},\"edge1\":{}},\"entities\":{\"entity1\":{},\"entity\":{},\"cardinality\":{}}}}]},repeat=Repeat[initialDelay=1,repeatPeriod=1,timeUnit=MINUTES]]\n</code></pre> <pre><code>{\n\"repeat\" : {\n\"initialDelay\" : 1,\n\"repeatPeriod\" : 1,\n\"timeUnit\" : \"MINUTES\"\n},\n\"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\",\n\"user\" : {\n\"userId\" : \"user01\",\n\"dataAuths\" : [ ],\n\"opAuths\" : [ ]\n},\n\"status\" : \"CANCELLED\",\n\"startTime\" : 1667818799343,\n\"endTime\" : 1667818799344,\n\"opChain\" : \"OperationChain[GetAllElements]\"\n}\n</code></pre>"},{"location":"reference/operations-guide/join/","title":"Join Operation","text":"<p>This operation joins two iterables together. Javadoc</p> <p>There are three different types of Join:</p> <ul> <li>FULL - returns all objects in the key, along with any matched objects from the other side</li> <li>INNER - returns all keys which matched with objects on the other side</li> <li>OUTER - returns all keys which didn't match with objects from the other side</li> </ul> <p>A Join operation can key by the left (input) or right hand side (output of the operation specified) and outputs an iterable of MapTuples. These Tuples contain the left and right outputs.</p> <p>A join operation must be supplied with a match method. This tells the operation how to determine what is and what isn't a match. There are two built in match methods:</p> <ul> <li>ElementMatch - Matches elements of the same id(s), group and group by properties</li> <li>KeyFunctionMatch - Matches any objects based on two key functions. The first key function applies to whatever the join type is (the object on the left hand side for Left keyed join and vice versa for the right).</li> </ul> <p>Once matched, the left and right sides are outputted as MapTuples keyed by \"LEFT\" and \"RIGHT\". The output is flattened by default (one left value for each right value) but this can be turned off using the flatten flag. Setting the flatten flag to false will cause the non keyed side to be summarised in a list.</p>"},{"location":"reference/operations-guide/join/#examples","title":"Examples","text":"<p>The following Join examples use these input elements:</p> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#left-key-inner-join","title":"Left key inner join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.INNER)\n.matchKey(MatchKey.LEFT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : false,\n\"joinType\" : \"INNER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"LEFT\", \njoin_type=\"INNER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; [Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; [Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; [Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-left-key-inner-join","title":"Flattened left key inner join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.INNER)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"flatten\" : true,\n\"joinType\" : \"INNER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \njoin_type=\"INNER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#right-key-inner-join","title":"Right key inner join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.INNER)\n.matchKey(MatchKey.RIGHT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : false,\n\"joinType\" : \"INNER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"RIGHT\", \njoin_type=\"INNER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ [Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-right-key-inner-join","title":"Flattened right key inner join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.flatten(true)\n.matchKey(MatchKey.RIGHT)\n.joinType(JoinType.INNER)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : true,\n\"joinType\" : \"INNER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"RIGHT\", \njoin_type=\"INNER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#left-key-full-join","title":"Left key full join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.FULL)\n.matchKey(MatchKey.LEFT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : false,\n\"joinType\" : \"FULL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"LEFT\", \njoin_type=\"FULL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; [Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; [Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; [Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] ]\n[ Entity[vertex=6,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;30]] --&gt; [] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ]\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n},\n\"RIGHT\" : [ ]\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-left-key-full-join","title":"Flattened left key full join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.FULL)\n.matchKey(MatchKey.LEFT)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : true,\n\"joinType\" : \"FULL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"LEFT\", \njoin_type=\"FULL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=6,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;30]] --&gt; null ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n},\n\"RIGHT\" : null\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#right-key-full-join","title":"Right key full join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.FULL)\n.matchKey(MatchKey.RIGHT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : false,\n\"joinType\" : \"FULL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"RIGHT\", \njoin_type=\"FULL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ [] --&gt; Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [] --&gt; Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]] ]\n[ [] --&gt; Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ [] --&gt; Entity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ [] --&gt; Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [] --&gt; Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n} ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-right-key-full-join","title":"Flattened right key full join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.FULL)\n.matchKey(MatchKey.RIGHT)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : true,\n\"joinType\" : \"FULL\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"RIGHT\", \njoin_type=\"FULL\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ null --&gt; Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ null --&gt; Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]] ]\n[ null --&gt; Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] --&gt; Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] --&gt; Entity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ null --&gt; Entity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ null --&gt; Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ null --&gt; Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n},\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#left-key-outer-join","title":"Left key outer join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.OUTER)\n.matchKey(MatchKey.LEFT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : false,\n\"joinType\" : \"OUTER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"LEFT\", \njoin_type=\"OUTER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=6,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;30]] --&gt; [] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n},\n\"RIGHT\" : [ ]\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-left-key-outer-join","title":"Flattened left key outer join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.OUTER)\n.matchKey(MatchKey.LEFT)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"LEFT\",\n\"flatten\" : true,\n\"joinType\" : \"OUTER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"LEFT\", \njoin_type=\"OUTER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ Entity[vertex=6,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;30]] --&gt; null ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n},\n\"RIGHT\" : null\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#right-key-outer-join","title":"Right key outer join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.OUTER)\n.matchKey(MatchKey.RIGHT)\n.flatten(false)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : false,\n\"joinType\" : \"OUTER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"RIGHT\", \njoin_type=\"OUTER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ [] --&gt; Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]] ]\n[ [] --&gt; Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ [] --&gt; Entity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ [] --&gt; Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ [] --&gt; Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ [] --&gt; Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : [ ],\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/join/#flattened-right-key-outer-join","title":"Flattened right key outer join","text":"JavaJSONPython <pre><code>final OperationChain&lt;Iterable&lt;? extends MapTuple&gt;&gt; opChain = new OperationChain.Builder()\n.first(new Join.Builder&lt;&gt;()\n.input(inputElements)\n.operation(new GetAllElements())\n.joinType(JoinType.OUTER)\n.matchKey(MatchKey.RIGHT)\n.matchMethod(new ElementMatch(\"count\"))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"Join\",\n\"input\" : [ {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 1,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 4,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 5,\n\"properties\" : {\n\"count\" : 3\n}\n}, {\n\"class\" : \"Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 6,\n\"properties\" : {\n\"count\" : 30\n}\n} ],\n\"operation\" : {\n\"class\" : \"GetAllElements\"\n},\n\"matchMethod\" : {\n\"class\" : \"ElementMatch\"\n},\n\"matchKey\" : \"RIGHT\",\n\"flatten\" : true,\n\"joinType\" : \"OUTER\"\n} ]\n}\n</code></pre> <pre><code>g.OperationChain( \noperations=[ \ng.Join( \noperation=g.GetAllElements(), \nmatch_method=g.ElementMatch(), \ninput=[ \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=True, \nmatch_key=\"RIGHT\", \njoin_type=\"OUTER\" \n) \n] \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>[ null --&gt; Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]] ]\n[ null --&gt; Entity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ null --&gt; Entity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]] ]\n[ null --&gt; Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n[ null --&gt; Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]] ]\n[ null --&gt; Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]] ]\n</code></pre> <pre><code>[ {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 3,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 4\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 3,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 3,\n\"properties\" : {\n\"count\" : 2\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 4,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 1,\n\"destination\" : 2,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 3\n}\n}\n}\n}, {\n\"values\" : {\n\"LEFT\" : null,\n\"RIGHT\" : {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 1\n}\n}\n}\n} ]\n</code></pre>"},{"location":"reference/operations-guide/misc/","title":"Misc Operations","text":"<p>These Operations don't fit under other pages and are not core operations.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/misc/#getfromendpoint","title":"GetFromEndpoint","text":"<p>Gets data from an endpoint. Javadoc</p>"},{"location":"reference/operations-guide/misc/#example","title":"Example","text":"JavaJSONPython <pre><code>final GetFromEndpoint get = new GetFromEndpoint.Builder()\n.endpoint(\"https://mydata.io:8443/mydata\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetFromEndpoint\",\n\"endpoint\" : \"https://mydata.io:8443/mydata\"\n}\n</code></pre> <pre><code>g.GetFromEndpoint( \nendpoint=\"https://mydata.io:8443/mydata\" \n)\n</code></pre>"},{"location":"reference/operations-guide/misc/#scoreoperationchain","title":"ScoreOperationChain","text":"<p>Determines a \"score\" for an OperationChain. This is used to determine whether a particular user has the required permissions to execute a given OperationChain. Javadoc</p>"},{"location":"reference/operations-guide/misc/#example-scoreoperationchain","title":"Example ScoreOperationChain","text":"JavaJSONPython <pre><code>final ScoreOperationChain scoreOpChain = new ScoreOperationChain.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetElements())\n.then(new NamedOperation.Builder&lt;Element, Iterable&lt;? extends Element&gt;&gt;()\n.name(\"namedOp\")\n.build())\n.then(new Limit&lt;&gt;(3))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"ScoreOperationChain\",\n\"operationChain\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"GetElements\"\n}, {\n\"class\" : \"NamedOperation\",\n\"operationName\" : \"namedOp\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : true\n} ]\n}\n}\n</code></pre> <pre><code>g.ScoreOperationChain( \noperation_chain=g.OperationChain( \noperations=[ \ng.GetElements(), \ng.NamedOperation( \noperation_name=\"namedOp\" \n), \ng.Limit( \nresult_limit=3, \ntruncate=True \n) \n] \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>5\n</code></pre> <pre><code>5\n</code></pre>"},{"location":"reference/operations-guide/misc/#example-of-scoreoperationchain-with-custom-named-score","title":"Example of ScoreOperationChain with custom named score","text":"<p>Here we have added a NamedOperation to the NamedOperationCache, with a custom score of 3. In our ScoreOperationChainDeclaration.json file, we have also declared that this should be resolved with a NamedOperationScoreResolver. With Limit declared as having a score of 2, the above chain correctly has a score of 5.</p> JavaJSONPython <pre><code>final ScoreOperationChain scoreOperationChain = new ScoreOperationChain.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new NamedOperation.Builder&lt;EntitySeed, Iterable&lt;? extends Element&gt;&gt;()\n.name(\"1-hop\")\n.input(new EntitySeed(1))\n.build())\n.then(new Limit&lt;&gt;(3))\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"ScoreOperationChain\",\n\"operationChain\" : {\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"1-hop\"\n}, {\n\"class\" : \"Limit\",\n\"resultLimit\" : 3,\n\"truncate\" : true\n} ]\n}\n}\n</code></pre> <pre><code>g.ScoreOperationChain( \noperation_chain=g.OperationChain( \noperations=[ \ng.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"1-hop\" \n), \ng.Limit( \nresult_limit=3, \ntruncate=True \n) \n] \n) \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>5\n</code></pre> <pre><code>5\n</code></pre>"},{"location":"reference/operations-guide/named/","title":"Named Operations","text":"<p>Named Operations enable encapsulation of an OperationChain into a new single NamedOperation. The NamedOperation can be added to OperationChains and executed, just like any other Operation. They are available when a cache has been configured. Overview Javadoc</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/named/#addnamedoperation","title":"AddNamedOperation","text":"<p>Adds a new NamedOperation to a Graph. Javadoc</p> Example adding a new named operation JavaJSONPython <pre><code>final AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.then(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build())\n.description(\"2 hop query\")\n.name(\"2-hop\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.overwrite()\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop\",\n\"description\" : \"2 hop query\",\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \noperation_name=\"2-hop\", \ndescription=\"2 hop query\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True \n)\n</code></pre> Example adding a new named operation with score JavaJSONPython <pre><code>final AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(new OperationChain.Builder()\n.first(new GetAdjacentIds.Builder()\n.inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n.build())\n.build())\n.description(\"1 hop query\")\n.name(\"1-hop\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.overwrite()\n.score(2)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"1-hop\",\n\"description\" : \"1 hop query\",\n\"score\" : 2,\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n) \n] \n), \noperation_name=\"1-hop\", \ndescription=\"1 hop query\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True, \nscore=2 \n)\n</code></pre> Example adding a new named operation with parameter JavaJSONPython <pre><code>final String opChainString = \"{\" +\n\"    \\\"operations\\\" : [ {\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\" +\n\"      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"\" +\n\"    }, {\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\" +\n\"      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"\" +\n\"    }, {\" +\n\"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.Limit\\\",\" +\n\"      \\\"resultLimit\\\" : \\\"${param1}\\\"\" +\n\"    }\" +\n\" ]\" +\n\"}\";\nParameterDetail param = new ParameterDetail.Builder()\n.defaultValue(1L)\n.description(\"Limit param\")\n.valueClass(Long.class)\n.build();\nMap&lt;String, ParameterDetail&gt; paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", param);\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n.operationChain(opChainString)\n.description(\"2 hop query with settable limit\")\n.name(\"2-hop-with-limit\")\n.readAccessRoles(\"read-user\")\n.writeAccessRoles(\"write-user\")\n.parameters(paramMap)\n.overwrite()\n.score(3)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop-with-limit\",\n\"description\" : \"2 hop query with settable limit\",\n\"score\" : 3,\n\"operationChain\" : {\n\"operations\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.impl.Limit\",\n\"resultLimit\" : \"${param1}\"\n} ]\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n\"param1\" : {\n\"description\" : \"Limit param\",\n\"defaultValue\" : 1,\n\"valueClass\" : \"Long\",\n\"required\" : false\n}\n},\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n</code></pre> <pre><code>g.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \noperations=[ \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.GetAdjacentIds( \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.Limit( \nresult_limit=\"${param1}\" \n) \n] \n), \noperation_name=\"2-hop-with-limit\", \ndescription=\"2 hop query with settable limit\", \nread_access_roles=[ \n\"read-user\" \n], \nwrite_access_roles=[ \n\"write-user\" \n], \noverwrite_flag=True, \nscore=3, \nparameters=[ \ng.NamedOperationParameter( \nname=\"param1\", \nvalue_class=\"java.lang.Long\", \ndescription=\"Limit param\", \ndefault_value=1, \nrequired=False \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/named/#getallnamedoperations","title":"GetAllNamedOperations","text":"<p>Retrieves all NamedOperations associated with a Graph. Javadoc</p> Example getting all NamedOperations JavaJSONPython <pre><code>final GetAllNamedOperations operation = new GetAllNamedOperations();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.gaffer.named.operation.GetAllNamedOperations\"\n}\n</code></pre> <pre><code>g.GetAllNamedOperations()\n</code></pre> <p>Results:</p> JavaJSON <pre><code>NamedOperationDetail[inputType=java.lang.Object[],creatorId=user01,operations={\"operations\":[{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\"includeIncomingOutGoing\":\"OUTGOING\"}]},readAccessRoles=[read-user],writeAccessRoles=[write-user],score=2]\nNamedOperationDetail[inputType=java.lang.Object[],creatorId=user01,operations={\"operations\":[{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\"includeIncomingOutGoing\":\"OUTGOING\"},{\"class\":\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\"includeIncomingOutGoing\":\"OUTGOING\"}]},readAccessRoles=[read-user],writeAccessRoles=[write-user]]\nNamedOperationDetail[inputType=java.lang.Object[],creatorId=user01,operations={    \"operations\" : [ {      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",      \"includeIncomingOutGoing\" : \"OUTGOING\"    }, {      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",      \"includeIncomingOutGoing\" : \"OUTGOING\"    }, {      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.Limit\",      \"resultLimit\" : \"${param1}\"    } ]},readAccessRoles=[read-user],writeAccessRoles=[write-user],parameters={param1=ParameterDetail[description=Limit param,valueClass=class java.lang.Long,required=false,defaultValue=1]},score=3]\n</code></pre> <pre><code>[ {\n\"operationName\" : \"1-hop\",\n\"inputType\" : \"java.lang.Object[]\",\n\"description\" : \"1 hop query\",\n\"creatorId\" : \"user01\",\n\"operations\" : \"{\\\"operations\\\":[{\\\"class\\\":\\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\\\"includeIncomingOutGoing\\\":\\\"OUTGOING\\\"}]}\",\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ],\n\"parameters\" : null,\n\"score\" : 2\n}, {\n\"operationName\" : \"2-hop\",\n\"inputType\" : \"java.lang.Object[]\",\n\"description\" : \"2 hop query\",\n\"creatorId\" : \"user01\",\n\"operations\" : \"{\\\"operations\\\":[{\\\"class\\\":\\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\\\"includeIncomingOutGoing\\\":\\\"OUTGOING\\\"},{\\\"class\\\":\\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\\\"includeIncomingOutGoing\\\":\\\"OUTGOING\\\"}]}\",\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ],\n\"parameters\" : null\n}, {\n\"operationName\" : \"2-hop-with-limit\",\n\"inputType\" : \"java.lang.Object[]\",\n\"description\" : \"2 hop query with settable limit\",\n\"creatorId\" : \"user01\",\n\"operations\" : \"{    \\\"operations\\\" : [ {      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"    }, {      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"    }, {      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.Limit\\\",      \\\"resultLimit\\\" : \\\"${param1}\\\"    } ]}\",\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ],\n\"parameters\" : {\n\"param1\" : {\n\"description\" : \"Limit param\",\n\"defaultValue\" : 1,\n\"valueClass\" : \"java.lang.Long\",\n\"required\" : false\n}\n},\n\"score\" : 3\n} ]\n</code></pre>"},{"location":"reference/operations-guide/named/#namedoperation","title":"NamedOperation","text":"<p>Runs a pre-existing NamedOperation, i.e. one that has already been added. Javadoc</p> Example running a NamedOperation JavaJSONPython <pre><code>final NamedOperation&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt; operation =\nnew NamedOperation.Builder&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt;()\n.name(\"2-hop\")\n.input(new EntitySeed(1))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"2-hop\"\n}\n</code></pre> <pre><code>g.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"2-hop\" \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\nEntitySeed[vertex=4]\nEntitySeed[vertex=5]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 4\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 5\n} ]\n</code></pre> Example running a NamedOperation with parameter JavaJSONPython <pre><code>Map&lt;String, Object&gt; paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", 2L);\nfinal NamedOperation&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt; operation =\nnew NamedOperation.Builder&lt;EntityId, CloseableIterable&lt;EntityId&gt;&gt;()\n.name(\"2-hop-with-limit\")\n.input(new EntitySeed(1))\n.parameters(paramMap)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"NamedOperation\",\n\"input\" : [ {\n\"class\" : \"EntitySeed\",\n\"class\" : \"EntitySeed\",\n\"vertex\" : 1\n} ],\n\"operationName\" : \"2-hop-with-limit\",\n\"parameters\" : {\n\"param1\" : 2\n}\n}\n</code></pre> <pre><code>g.NamedOperation( \ninput=[ \ng.EntitySeed( \nvertex=1 \n) \n], \noperation_name=\"2-hop-with-limit\", \nparameters={'param1': 2} \n)\n</code></pre> <p>Results:</p> JavaJSON <pre><code>EntitySeed[vertex=3]\nEntitySeed[vertex=4]\n</code></pre> <pre><code>[ {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 3\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n\"vertex\" : 4\n} ]\n</code></pre>"},{"location":"reference/operations-guide/named/#deletenamedoperation","title":"DeleteNamedOperation","text":"<p>Removes an existing NamedOperation from a Graph. Javadoc</p> Example deleting a NamedOperation JavaJSONPython <pre><code>final DeleteNamedOperation operation = new DeleteNamedOperation.Builder()\n.name(\"2-hop\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"DeleteNamedOperation\",\n\"operationName\" : \"2-hop\"\n}\n</code></pre> <pre><code>g.DeleteNamedOperation( \noperation_name=\"2-hop\" \n)\n</code></pre>"},{"location":"reference/operations-guide/named/#addnamedview","title":"AddNamedView","text":"<p>Adds a NamedView to a Graph. Javadoc</p> Example adding a NamedView JavaJSONPython <pre><code>final AddNamedView op = new AddNamedView.Builder()\n.name(\"isMoreThan10\")\n.description(\"example test NamedView\")\n.overwrite(true)\n.view(new View.Builder()\n.edge(\"testEdge\", new ViewElementDefinition.Builder()\n.preAggregationFilter(new ElementFilter.Builder()\n.select(\"count\")\n.execute(new IsMoreThan(10))\n.build())\n.build())\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedView\",\n\"name\" : \"isMoreThan10\",\n\"description\" : \"example test NamedView\",\n\"view\" : {\n\"edges\" : {\n\"testEdge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n}\n} ]\n}\n}\n},\n\"overwriteFlag\" : true\n}\n</code></pre> <pre><code>g.AddNamedView( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"testEdge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \nname=\"isMoreThan10\", \ndescription=\"example test NamedView\", \noverwrite_flag=True \n)\n</code></pre> Example adding a NamedView with parameter JavaJSONPython <pre><code>final String viewJson = \"{\\\"edges\\\" : {\\n\" +\n\"  \\\"testEdge\\\" : {\\n\" +\n\"    \\\"preAggregationFilterFunctions\\\" : [ {\\n\" +\n\"      \\\"selection\\\" : [ \\\"count\\\" ],\\n\" +\n\"      \\\"predicate\\\" : {\\n\" +\n\"        \\\"class\\\" : \\\"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\\\",\\n\" +\n\"        \\\"orEqualTo\\\" : false,\\n\" +\n\"        \\\"value\\\" : \\\"${countThreshold}\\\"\\n\" +\n\"      }\\n\" +\n\"    } ]\\n\" +\n\"  }\\n\" +\n\"}}\";\nfinal ViewParameterDetail param = new ViewParameterDetail.Builder()\n.defaultValue(1L)\n.description(\"count threshold\")\n.valueClass(Long.class)\n.build();\nfinal Map&lt;String, ViewParameterDetail&gt; paramMap = Maps.newHashMap();\nparamMap.put(\"countThreshold\", param);\nfinal AddNamedView op = new AddNamedView.Builder()\n.name(\"isMoreThan\")\n.description(\"example test NamedView\")\n.overwrite(true)\n.view(viewJson)\n.parameters(paramMap)\n.writeAccessRoles(\"auth1\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"AddNamedView\",\n\"name\" : \"isMoreThan\",\n\"description\" : \"example test NamedView\",\n\"view\" : {\n\"edges\" : {\n\"testEdge\" : {\n\"preAggregationFilterFunctions\" : [ {\n\"selection\" : [ \"count\" ],\n\"predicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : \"${countThreshold}\"\n}\n} ]\n}\n}\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n\"countThreshold\" : {\n\"description\" : \"count threshold\",\n\"defaultValue\" : 1,\n\"valueClass\" : \"Long\",\n\"required\" : false\n}\n},\n\"writeAccessRoles\" : [ \"auth1\" ]\n}\n</code></pre> <pre><code>g.AddNamedView( \nview=g.View( \nedges=[ \ng.ElementDefinition( \ngroup=\"testEdge\", \npre_aggregation_filter_functions=[ \ng.PredicateContext( \nselection=[ \n\"count\" \n], \npredicate=g.IsMoreThan( \nvalue=\"${countThreshold}\", \nor_equal_to=False \n) \n) \n] \n) \n], \nall_edges=False, \nall_entities=False \n), \nname=\"isMoreThan\", \ndescription=\"example test NamedView\", \noverwrite_flag=True, \nwrite_access_roles=[ \n\"auth1\" \n], \nparameters=[ \ng.NamedViewParameter( \nname=\"countThreshold\", \nvalue_class=\"java.lang.Long\", \ndescription=\"count threshold\", \ndefault_value=1, \nrequired=False \n) \n] \n)\n</code></pre>"},{"location":"reference/operations-guide/named/#deletenamedview","title":"DeleteNamedView","text":"<p>Removes an existing NamedView from a Graph. Javadoc</p> Example deleting a NamedView JavaJSONPython <pre><code>final DeleteNamedView op = new DeleteNamedView.Builder()\n.name(\"testNamedView\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"DeleteNamedView\",\n\"name\" : \"testNamedView\"\n}\n</code></pre> <pre><code>g.DeleteNamedView( \nname=\"testNamedView\" \n)\n</code></pre>"},{"location":"reference/operations-guide/named/#getallnamedviews","title":"GetAllNamedViews","text":"<p>Retrieves all NamedViews associated with a Graph. Javadoc</p> Example getting all NamedViews JavaJSONPython <pre><code>final GetAllNamedViews op = new GetAllNamedViews();\n</code></pre> <pre><code>{\n\"class\" : \"GetAllNamedViews\"\n}\n</code></pre> <pre><code>g.GetAllNamedViews()\n</code></pre>"},{"location":"reference/operations-guide/operations/","title":"Operations Guide","text":"<p>These pages contain examples of most operations in Gaffer. The examples are given in Java, JSON and Python.</p>"},{"location":"reference/operations-guide/operations/#table-of-all-operations","title":"Table of all Operations","text":"<p>Note</p> <p>Some Operations below are missing a link because they have not been documented on this site yet. Details may be found in the Javadoc.</p> Operation Type <code>operation.impl.add.AddElements</code> Core <code>operation.impl.get.GetAdjacentIds</code> Get <code>operation.impl.get.GetAllElements</code> Get <code>operation.impl.get.GetElements</code> Get <code>operation.impl.get.GetFromEndpoint</code> Get <code>operation.impl.GetWalks</code> Get <code>operation.impl.Count</code> Core <code>operation.impl.CountGroups</code> Core <code>operation.impl.DiscardOutput</code> Core <code>operation.impl.join.Join</code> Core <code>operation.impl.compare.Min</code> Core <code>operation.impl.compare.Max</code> Core <code>operation.impl.compare.Sort</code> Core <code>operation.impl.function.Aggregate</code> Core <code>operation.impl.function.Filter</code> Core <code>operation.impl.function.Transform</code> Core <code>operation.impl.GetVariable</code> Core <code>operation.impl.GetVariables</code> Core <code>operation.impl.Limit</code> Core <code>operation.impl.Map</code> Core <code>operation.impl.Reduce</code> Core <code>operation.impl.SampleElementsForSplitPoints</code> Core <code>operation.impl.SetVariable</code> Core <code>operation.impl.SplitStoreFromFile</code> Core <code>operation.impl.SplitStoreFromIterable</code> Core <code>operation.impl.Validate</code> Core <code>operation.impl.If</code> Flow <code>operation.impl.ForEach</code> Flow <code>operation.impl.While</code> Flow <code>operation.impl.output.ToArray</code> Output <code>operation.impl.output.ToCsv</code> Output <code>operation.impl.output.ToEntitySeeds</code> Output <code>operation.impl.output.ToList</code> Output <code>operation.impl.output.ToMap</code> Output <code>operation.impl.output.ToSet</code> Output <code>operation.impl.output.ToSingletonList</code> Output <code>operation.impl.output.ToStream</code> Output <code>operation.impl.output.ToVertices</code> Output <code>operation.OperationChain</code> Chain <code>operation.OperationChainDAO</code> Chain <code>operation.impl.ScoreOperationChain</code> Chain <code>operation.impl.ValidateOperationChain</code> Chain <code>operation.impl.add.ImportCsv</code> Import <code>operation.export.graph.ExportToOtherAuthorisedGraph</code> Export <code>operation.export.graph.ExportToOtherGraph</code> Export <code>operation.impl.export.GetExports</code> Export <code>operation.impl.export.localfile.ExportToLocalFile</code> Export <code>operation.impl.export.localfile.ImportFromLocalFile</code> Export <code>operation.impl.export.resultcache.ExportToGafferResultCache</code> Export <code>operation.impl.export.resultcache.GetGafferResultCacheExport</code> Export <code>operation.impl.export.set.ExportToSet</code> Export <code>operation.impl.export.set.GetSetExport</code> Export <code>operation.impl.job.CancelScheduledJob</code> Job <code>operation.impl.job.GetAllJobDetails</code> Job <code>operation.impl.job.GetJobDetails</code> Job <code>operation.impl.job.GetJobResults</code> Job <code>operation.impl.add.AddElementsFromFile</code> Flink <code>operation.impl.add.AddElementsFromKafka</code> Flink <code>operation.impl.add.AddElementsFromSocket</code> Flink <code>operation.impl.generate.GenerateElements</code> Generate <code>operation.impl.generate.GenerateObjects</code> Generate <code>operation.impl.GenerateSplitPointsFromSample</code> Generate <code>named.operation.AddNamedOperation</code> Named <code>named.operation.DeleteNamedOperation</code> Named <code>named.operation.GetAllNamedOperations</code> Named <code>named.operation.NamedOperation</code> Named <code>named.view.AddNamedView</code> Named <code>named.view.DeleteNamedView</code> Named <code>named.view.GetAllNamedViews</code> Named <code>store.operation.DeleteAllData</code> Store <code>store.operation.GetSchema</code> Store <code>store.operation.GetTraits</code> Store <code>store.operation.HasTrait</code> Store <code>store.operation.add.AddSchemaToLibrary</code> Store <code>store.operation.add.AddStorePropertiesToLibrary</code> Store <code>federatedstore.operation.AddGraph</code> Federated <code>federatedstore.operation.AddGraphWithHooks</code> Federated <code>federatedstore.operation.ChangeGraphAccess</code> Federated <code>federatedstore.operation.ChangeGraphId</code> Federated <code>federatedstore.operation.FederatedOperation</code> Federated <code>federatedstore.operation.GetAllGraphIds</code> Federated <code>federatedstore.operation.GetAllGraphInfo</code> Federated <code>federatedstore.operation.RemoveGraph</code> Federated <code>federatedstore.operation.RemoveGraphAndDeleteAllData</code> Federated <code>proxystore.operation.GetProxyProperties</code> Proxy <code>proxystore.operation.GetProxyUrl</code> Proxy <code>accumulostore.operation.hdfs.operation.ImportAccumuloKeyValueFiles</code> Accumulo <code>accumulostore.operation.impl.GetElementsBetweenSets</code> Accumulo <code>accumulostore.operation.impl.GetElementsInRanges</code> Accumulo <code>accumulostore.operation.impl.GetElementsWithinSet</code> Accumulo <code>accumulostore.operation.impl.SummariseGroupOverRanges</code> Accumulo <code>hdfs.operation.AddElementsFromHdfs</code> HDFS <code>hdfs.operation.SampleDataForSplitPoints</code> HDFS <code>mapstore.operation.CountAllElementsDefaultView</code> Map <code>spark.operation.dataframe.GetDataFrameOfElements</code> Spark <code>spark.operation.graphframe.GetGraphFrameOfElements</code> Spark <code>spark.operation.javardd.GetJavaRDDOfAllElements</code> Spark <code>spark.operation.javardd.GetJavaRDDOfElements</code> Spark <code>spark.operation.javardd.ImportJavaRDDOfElements</code> Spark <code>spark.operation.javardd.SplitStoreFromJavaRDDOfElements</code> Spark <code>spark.operation.scalardd.GetRDDOfAllElements</code> Spark <code>spark.operation.scalardd.GetRDDOfElements</code> Spark <code>spark.operation.scalardd.ImportRDDOfElements</code> Spark <code>spark.operation.scalardd.SplitStoreFromRDDOfElements</code> Spark <code>sparkaccumulo.operation.javardd.GetJavaRDDOfElementsInRanges</code> Spark <code>sparkaccumulo.operation.javardd.ImportKeyValueJavaPairRDDToAccumulo</code> Spark <code>sparkaccumulo.operation.scalardd.GetRDDOfElementsInRanges</code> Spark <code>sparkaccumulo.operation.scalardd.ImportKeyValuePairRDDToAccumulo</code> Spark"},{"location":"reference/operations-guide/spark/","title":"Spark Operations","text":"<p>These are special Spark Operations which need to be added/enabled before they can be used. TBD link to Spark store page.</p> <p>There is an option to read the RFiles directly rather than the usual approach of obtaining them from Accumulo's tablet servers. This requires the Hadoop user, running the Spark job, to have read access to the RFiles in the Accumulo tablet. Note, however, that data which has not been minor compacted will not be read if this option is used. This functionality is enabled using the option: <code>gaffer.accumulo.spark.directrdd.use_rfile_reader=true</code>.</p> <p>This directed graph is used in all the examples on this page:</p> <pre><code>graph TD\n  1(1, count=3) -- count=3 --&gt; 2\n  1 -- count=1 --&gt; 4\n  2(2, count=1) -- count=2 --&gt; 3\n  2 -- count=1 --&gt; 4(4, count=1)\n  2 -- count=1 --&gt; 5(5, count=3)\n  3(3, count=2) -- count=4 --&gt; 4</code></pre>"},{"location":"reference/operations-guide/spark/#getdataframeofelements","title":"GetDataFrameOfElements","text":"<p>Operation that returns an Apache Spark DataFrame consisting of Elements converted to Rows, fields are ordered according to the ordering of the groups in the view, with Entities first, followed by Edges. Javadoc</p> Example getting data frame of elements with entity group JavaJSON <pre><code>final GetDataFrameOfElements operation = new GetDataFrameOfElements.Builder()\n.view(new View.Builder()\n.entity(\"entity\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetDataFrameOfElements\",\n\"view\" : {\n\"entities\" : {\n\"entity\" : { }\n}\n}\n}\n</code></pre> <p>Results:</p> group vertex count entity 1 3 entity 2 1 entity 3 2 entity 4 1 entity 5 3 <p>Using filter:</p> <pre><code>df.filter(\"vertex = 1 OR vertex = 2\").show();\n</code></pre> <p>The results are:</p> group vertex count entity 1 3 entity 2 1 <p>Using filter:</p> <pre><code>df.filter(\"count &gt; 1\").show();\n</code></pre> <p>The results are:</p> group vertex count entity 1 3 entity 3 2 entity 5 3 Example getting data frame of elements with edge group JavaJSON <pre><code>final GetDataFrameOfElements operation = new GetDataFrameOfElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetDataFrameOfElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}\n</code></pre> <p>Results:</p> group src dst directed matchedVertex count edge 1 2 true null 3 edge 1 4 true null 1 edge 2 3 true null 2 edge 2 4 true null 1 edge 2 5 true null 1 edge 3 4 true null 4 <p>Using filter:</p> <pre><code>df.filter(\"src = 1 OR src = 3\").show();\n</code></pre> <p>The results are:</p> group src dst directed matchedVertex count edge 1 2 true null 3 edge 1 4 true null 1 edge 3 4 true null 4 <p>Using filter:</p> <pre><code>df.filter(\"count &gt; 1\").show();\n</code></pre> <p>The results are:</p> group src dst directed matchedVertex count edge 1 2 true null 3 edge 2 3 true null 2 edge 3 4 true null 4"},{"location":"reference/operations-guide/spark/#getgraphframeofelements","title":"GetGraphFrameOfElements","text":"<p>Operation which returns an Apache Spark GraphFrame consisting of Elements converted to rows. Javadoc</p> Example getting graph frame of elements JavaJSON <pre><code>final GetGraphFrameOfElements operation = new GetGraphFrameOfElements.Builder()\n.view(new View.Builder()\n.entity(\"entity\")\n.edge(\"edge\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetGraphFrameOfElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n},\n\"entities\" : {\n\"entity\" : { }\n}\n}\n}\n</code></pre> <p>Then with the graphFrame result you can execute for example:</p> <pre><code>graphFrame.vertices().filter(\"vertex = 1 OR vertex = 2\").showString(100, 20)\n</code></pre> <p>and the results are: </p> matchedVertex directed id dst src count group null null 1 null null null null null null 2 null null null null null null 1 null null 3 entity null null 2 null null 1 entity <p>Or you can inspect the edges:</p> <pre><code>graphFrame.edges().filter(\"count &gt; 1\").showString(100, 20)\n</code></pre> <p>and the results are: </p> group vertex count src dst directed matchedVertex id edge null 3 1 2 true null 1 edge null 2 2 3 true null 3 edge null 4 3 4 true null 6 <p>GraphFrames also include operations such as PageRank.</p>"},{"location":"reference/operations-guide/spark/#getjavarddofallelements","title":"GetJavaRDDOfAllElements","text":"<p>Operation which retrieves all Elements, and returns them inside a JavaRDD. Javadoc</p> Example getting JavaRDD of all elements JavaJSON <pre><code>final GetJavaRDDOfAllElements operation = new GetJavaRDDOfAllElements();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfAllElements\"\n}\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=3,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\nEntity[vertex=4,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEntity[vertex=5,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\n</code></pre> Example getting JavaRDD of all elements returning edges only JavaJSON <pre><code>final GetJavaRDDOfAllElements operation = new GetJavaRDDOfAllElements.Builder()\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfAllElements\",\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}\n</code></pre> <p>Results:</p> Java <pre><code>Edge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEdge[source=2,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=5,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=3,destination=4,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;4]]\n</code></pre>"},{"location":"reference/operations-guide/spark/#getjavarddofelements","title":"GetJavaRDDOfElements","text":"<p>Operation which retrieves all the Elements for input seeds, and returns them inside a JavaRDD. Javadoc</p> Example getting JavaRDD of elements with seeds JavaJSON <pre><code>final GetJavaRDDOfElements operation = new GetJavaRDDOfElements.Builder()\n.input(new EdgeSeed(1, 2, true), new EdgeSeed(2, 3, true))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n} ]\n}\n</code></pre> <p>Results:</p> Java <pre><code>Entity[vertex=1,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEntity[vertex=2,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;1]]\nEdge[source=2,destination=3,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\nEntity[vertex=3,group=entity,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\n</code></pre> Example getting JavaRDD of elements with Hadoop conf JavaJSON <pre><code>final Configuration conf = new Configuration();\nconf.set(\"AN_OPTION\", \"A_VALUE\");\nfinal String encodedConf;\ntry {\nencodedConf = AbstractGetRDDHandler.convertConfigurationToString(conf);\n} catch (final IOException e) {\nthrow new RuntimeException(\"Unable to convert conf to string\", e);\n}\nfinal GetJavaRDDOfElements operation = new GetJavaRDDOfElements.Builder()\n.input(new EdgeSeed(1, 2, true), new EdgeSeed(2, 3, true))\n.option(AbstractGetRDDHandler.HADOOP_CONFIGURATION_KEY, encodedConf)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n} ],\n\"options\" : {\n\"Hadoop_Configuration_Key\" : \"config removed for readability\"\n}\n}\n</code></pre> Example getting JavaRDD of elements with seeds, returning edges only JavaJSON <pre><code>final GetJavaRDDOfElements operation = new GetJavaRDDOfElements.Builder()\n.input(new EdgeSeed(1, 2, true), new EdgeSeed(2, 3, true))\n.view(new View.Builder()\n.edge(\"edge\")\n.build())\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"GetJavaRDDOfElements\",\n\"input\" : [ {\n\"class\" : \"EdgeSeed\",\n\"source\" : 1,\n\"destination\" : 2,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n}, {\n\"class\" : \"EdgeSeed\",\n\"source\" : 2,\n\"destination\" : 3,\n\"matchedVertex\" : \"SOURCE\",\n\"directedType\" : \"DIRECTED\"\n} ],\n\"view\" : {\n\"edges\" : {\n\"edge\" : { }\n}\n}\n}\n</code></pre> <p>Results:</p> Java <pre><code>Edge[source=1,destination=2,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;3]]\nEdge[source=2,destination=3,directed=true,group=edge,properties=Properties[count=&lt;java.lang.Integer&gt;2]]\n</code></pre>"},{"location":"reference/predicates-guide/gaffer-predicates/","title":"Gaffer Predicates","text":"<p>Predicates which are part of Gaffer.</p>"},{"location":"reference/predicates-guide/gaffer-predicates/#hyperloglogplusislessthan","title":"HyperLogLogPlusIsLessThan","text":"<p>Tests a HyperLogLogPlus cardinality is less than a provided value. Javadoc</p> <p>Input type: <code>com.clearspring.analytics.stream.cardinality.HyperLogLogPlus</code></p> Example HyperLogLogPlusIsLessThan Integer 2 JavaJSONPython <pre><code>final HyperLogLogPlusIsLessThan function = new HyperLogLogPlusIsLessThan(2);\n</code></pre> <pre><code>{\n\"class\" : \"HyperLogLogPlusIsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n</code></pre> <pre><code>g.HyperLogLogPlusIsLessThan( \nvalue=2, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@4093e27d true com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@51d8a4de false com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@3120d299 false Example HyperLogLogPlusIsLessThan or equal to Integer 2 JavaJSONPython <pre><code>final HyperLogLogPlusIsLessThan function = new HyperLogLogPlusIsLessThan(2, true);\n</code></pre> <pre><code>{\n\"class\" : \"HyperLogLogPlusIsLessThan\",\n\"orEqualTo\" : true,\n\"value\" : 2\n}\n</code></pre> <pre><code>g.HyperLogLogPlusIsLessThan( \nvalue=2, \nor_equal_to=True\n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@4093e27d true com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@51d8a4de true com.clearspring.analytics.stream.cardinality.HyperLogLogPlus com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@3120d299 false"},{"location":"reference/predicates-guide/koryphe-predicates/","title":"Koryphe Predicates","text":"<p>Predicates from the Koryphe library.</p>"},{"location":"reference/predicates-guide/koryphe-predicates/#ageoff","title":"AgeOff","text":"<p>Checks if a timestamp is recent based on a provided age off time. Javadoc</p> <p>Input type: <code>java.lang.Long</code></p> Example AgeOff in milliseconds JavaJSONPython <pre><code>final AgeOff function = new AgeOff(100000L);\n</code></pre> <pre><code>{\n\"class\" : \"AgeOff\",\n\"ageOffTime\" : 100000\n}\n</code></pre> <pre><code>g.AgeOff( \nage_off_time=100000 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String ClassCastException: java.lang.String cannot be cast to java.lang.Long java.lang.Long 1667818781957 true java.lang.Long 1667818681957 false java.lang.Long 1667818881957 true java.lang.String 1667818781957 ClassCastException: java.lang.String cannot be cast to java.lang.Long"},{"location":"reference/predicates-guide/koryphe-predicates/#and","title":"And","text":"<p>Returns true if all of its predicates are true. Javadoc</p> <p>Input type: <code>uk.gov.gchq.koryphe.signature.Signature$UnknownGenericType</code></p> Example of is less than 3 and is more than 0 JavaJSONPython <pre><code>final And function = new And&lt;&gt;(\nnew IsLessThan(3),\nnew IsMoreThan(0)\n);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n\"predicates\" : [ {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 3\n}, {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 0\n} ]\n}\n</code></pre> <pre><code>g.And( \npredicates=[ \ng.IsLessThan( \nvalue=3, \nor_equal_to=False \n), \ng.IsMoreThan( \nvalue=0, \nor_equal_to=False \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 0 false java.lang.Integer 1 true java.lang.Integer 2 true java.lang.Integer 3 false java.lang.Long 1 false java.lang.Long 2 false Example of first item less than 2 and second item more than 5 JavaJSONPython <pre><code>final And function = new And.Builder()\n.select(0)\n.execute(new IsLessThan(2))\n.select(1)\n.execute(new IsMoreThan(5))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n\"predicates\" : [ {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 0 ],\n\"predicate\" : {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n}, {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 1 ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n}\n} ]\n}\n</code></pre> <pre><code>g.And( \npredicates=[ \ng.NestedPredicate( \nselection=[ \n0 \n], \npredicate=g.IsLessThan( \nvalue=2, \nor_equal_to=False \n) \n), \ng.NestedPredicate( \nselection=[ \n1 \n], \npredicate=g.IsMoreThan( \nvalue=5, \nor_equal_to=False \n) \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Integer] [1, 10] true [java.lang.Integer, java.lang.Integer] [1, 1] false [java.lang.Integer, java.lang.Integer] [10, 10] false [java.lang.Integer, java.lang.Integer] [10, 1] false [java.lang.Long, java.lang.Long] [1, 10] false [java.lang.Integer] [1] false"},{"location":"reference/predicates-guide/koryphe-predicates/#areequal","title":"AreEqual","text":"<p>Returns true if the two inputs are equal. Javadoc</p> <p>Input type: <code>java.lang.Object, java.lang.Object</code></p> Example AreEqual JavaJSONPython <pre><code>final AreEqual function = new AreEqual();\n</code></pre> <pre><code>{\n\"class\" : \"AreEqual\"\n}\n</code></pre> <pre><code>g.AreEqual()\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Double] [1, 1.0] false [java.lang.Double, java.lang.Double] [2.5, 2.5] true [java.lang.String, ] [, null] false [java.lang.String, java.lang.String] [abc, abc] true"},{"location":"reference/predicates-guide/koryphe-predicates/#arein","title":"AreIn","text":"<p>Checks if a provided collection contains all the provided input values. Javadoc</p> <p>Input type: <code>java.util.Collection</code></p> Example AreIn Set JavaJSONPython <pre><code>final AreIn function = new AreIn(1, 2, 3);\n</code></pre> <pre><code>{\n\"class\" : \"AreIn\",\n\"values\" : [ 1, 2, 3 ]\n}\n</code></pre> <pre><code>g.AreIn( \nvalues=[ \n1, \n2, \n3 \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashSet [1, 2, 3] true java.util.HashSet [1, 2, 3, 4] false java.util.HashSet [4, 1] false java.util.HashSet [1, 2] true java.util.HashSet [] true"},{"location":"reference/predicates-guide/koryphe-predicates/#collectioncontains","title":"CollectionContains","text":"<p>Checks if a collection contains a provided value. Javadoc</p> <p>Input type: <code>java.util.Collection</code></p> Example CollectionContains JavaJSONPython <pre><code>final CollectionContains function = new CollectionContains(1);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.CollectionContains\",\n\"value\" : 1\n}\n</code></pre> <pre><code>g.CollectionContains( \nvalue=1 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashSet [1, 2, 3] true java.util.HashSet [1] true java.util.HashSet [2] false java.util.HashSet [] false"},{"location":"reference/predicates-guide/koryphe-predicates/#exists","title":"Exists","text":"<p>Checks the input exists. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example Exists JavaJSONPython <pre><code>final Exists function = new Exists();\n</code></pre> <pre><code>{\n\"class\" : \"Exists\"\n}\n</code></pre> <pre><code>g.Exists()\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true null false java.lang.String true java.lang.String abc true"},{"location":"reference/predicates-guide/koryphe-predicates/#if","title":"If","text":"<p>Conditionally applies a predicate. Javadoc</p> <p>Input type: <code>uk.gov.gchq.koryphe.signature.Signature$UnknownGenericType</code></p> Example conditionally applying predicates to input <p>This example tests first whether the input is an Integer. If so, it is then tested to see if the value is greater than 3. Otherwise, since it is not an Integer, we then test to see if it is NOT a String.</p> JavaJSONPython <pre><code>final If&lt;Comparable&gt; predicate = new If&lt;&gt;(new IsA(Integer.class), new IsMoreThan(3), new Not&lt;&gt;(new IsA(String.class)));\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.If\",\n\"predicate\" : {\n\"class\" : \"IsA\",\n\"type\" : \"java.lang.Integer\"\n},\n\"then\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 3\n},\n\"otherwise\" : {\n\"class\" : \"Not\",\n\"predicate\" : {\n\"class\" : \"IsA\",\n\"type\" : \"java.lang.String\"\n}\n}\n}\n</code></pre> <pre><code>g.If( \npredicate=g.IsA( \ntype=\"java.lang.Integer\" \n), \nthen=g.IsMoreThan( \nvalue=3, \nor_equal_to=False \n), \notherwise=g.Not( \npredicate=g.IsA( \ntype=\"java.lang.String\" \n) \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 2 false java.lang.Integer 3 false java.lang.Integer 5 true java.lang.String test false java.util.HashMap {} true java.util.ArrayList [] true"},{"location":"reference/predicates-guide/koryphe-predicates/#or","title":"Or","text":"<p>Returns true if any of the predicates are true. Javadoc</p> <p>When using an Or predicate with a single selected value you can just use the constructor new <code>Or(predicates))</code>'.</p> <p>When using an Or predicate with multiple selected values, you need to use the <code>Or.Builder</code> to build your Or predicate, using <code>.select()</code> then <code>.execute()</code>. When selecting values in the <code>Or.Builder</code> you need to refer to the position in the input array. I.e to use the first value use position 0 - <code>select(0)</code>.You can select multiple values to give to a predicate like isXLessThanY, this is achieved by passing 2 positions to the select method - <code>select(0, 1)</code>.</p> <p>Input type: <code>uk.gov.gchq.koryphe.signature.Signature$UnknownGenericType</code></p> Example is less than 2 equal to 5 or is more than 10 JavaJSONPython <pre><code>final Or function = new Or&lt;&gt;(\nnew IsLessThan(2),\nnew IsEqual(5),\nnew IsMoreThan(10)\n);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}, {\n\"class\" : \"IsEqual\",\n\"value\" : 5\n}, {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n} ]\n}\n</code></pre> <pre><code>g.Or( \npredicates=[ \ng.IsLessThan( \nvalue=2, \nor_equal_to=False \n), \ng.IsEqual( \nvalue=5 \n), \ng.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Integer 2 false java.lang.Integer 3 false java.lang.Integer 5 true java.lang.Integer 15 true java.lang.Long 1 false java.lang.Long 3 false java.lang.Long 5 false Example is less than 2 equal to 5 or is more than 10 JavaJSONPython <pre><code>final Or function = new Or&lt;&gt;(\nnew IsLessThan(2),\nnew IsEqual(5),\nnew IsMoreThan(10)\n);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}, {\n\"class\" : \"IsEqual\",\n\"value\" : 5\n}, {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n} ]\n}\n</code></pre> <pre><code>g.Or( \npredicates=[ \ng.IsLessThan( \nvalue=2, \nor_equal_to=False \n), \ng.IsEqual( \nvalue=5 \n), \ng.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Integer 2 false java.lang.Integer 3 false java.lang.Integer 5 true java.lang.Integer 15 true java.lang.Long 1 false java.lang.Long 3 false java.lang.Long 5 false Example first item is less than 2 or second item is more than 10 JavaJSONPython <pre><code>final Or function = new Or.Builder()\n.select(0)\n.execute(new IsLessThan(2))\n.select(1)\n.execute(new IsMoreThan(10))\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n\"predicates\" : [ {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 0 ],\n\"predicate\" : {\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 2\n}\n}, {\n\"class\" : \"IntegerTupleAdaptedPredicate\",\n\"selection\" : [ 1 ],\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 10\n}\n} ]\n}\n</code></pre> <pre><code>g.Or( \npredicates=[ \ng.NestedPredicate( \nselection=[ \n0 \n], \npredicate=g.IsLessThan( \nvalue=2, \nor_equal_to=False \n) \n), \ng.NestedPredicate( \nselection=[ \n1 \n], \npredicate=g.IsMoreThan( \nvalue=10, \nor_equal_to=False \n) \n) \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Integer] [1, 15] true [java.lang.Integer, java.lang.Integer] [1, 1] true [java.lang.Integer, java.lang.Integer] [15, 15] true [java.lang.Integer, java.lang.Integer] [15, 1] false [java.lang.Long, java.lang.Long] [1, 15] false [java.lang.Integer] [1] true"},{"location":"reference/predicates-guide/koryphe-predicates/#not","title":"Not","text":"<p>Returns the inverse of a predicate. Javadoc</p> <p>Input type: <code>uk.gov.gchq.koryphe.signature.Signature$UnknownGenericType</code></p> Example does not exist JavaJSONPython <pre><code>final Not function = new Not&lt;&gt;(new Exists());\n</code></pre> <pre><code>{\n\"class\" : \"Not\",\n\"predicate\" : {\n\"class\" : \"Exists\"\n}\n}\n</code></pre> <pre><code>g.Not( \npredicate=g.Exists() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false null true java.lang.String false java.lang.String abc false Example are not equal JavaJSONPython <pre><code>final Not function = new Not&lt;&gt;(new AreEqual());\n</code></pre> <pre><code>{\n\"class\" : \"Not\",\n\"predicate\" : {\n\"class\" : \"AreEqual\"\n}\n}\n</code></pre> <pre><code>g.Not( \npredicate=g.AreEqual() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Double] [1, 1.0] true [java.lang.Integer, java.lang.Integer] [1, 2] true [java.lang.Double, java.lang.Double] [2.5, 2.5] false [java.lang.String, ] [, null] true [java.lang.String, java.lang.String] [abc, abc] false"},{"location":"reference/predicates-guide/koryphe-predicates/#indaterange","title":"InDateRange","text":"<p>Tests if a Comparable is within a provided range. By default the range is inclusive, this can be toggled using the startInclusive and endInclusive booleans. Javadoc</p> <p>You can configure the start and end time strings using the following formats:</p> <ul> <li>timestamp in milliseconds</li> <li>yyyy/MM</li> <li>yyyy/MM/dd</li> <li>yyyy/MM/dd HH</li> <li>yyyy/MM/dd HH:mm</li> <li>yyyy/MM/dd HH:mm:ss</li> </ul> <p>You can use a space, <code>-</code>, <code>/</code>, <code>_</code>, <code>:</code>, <code>|</code>, or <code>.</code> to separate the parts.</p> <p>Input type: <code>java.util.Date</code></p> Example InDateRange with day precision JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.start(\"2017/01/01\")\n.end(\"2017/02/01\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"start\" : \"2017/01/01\",\n\"end\" : \"2017/02/01\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart=\"2017/01/01\", \nend=\"2017/02/01\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Fri Jan 01 00:00:00 GMT 2016 false java.util.Date Sun Jan 01 00:00:00 GMT 2017 true java.util.Date Sun Jan 01 01:00:00 GMT 2017 true java.util.Date Sun Jan 01 23:59:59 GMT 2017 true java.util.Date Wed Feb 01 00:00:00 GMT 2017 true java.util.Date Wed Feb 01 00:00:01 GMT 2017 false null false Example InDateRange with second precision JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.start(\"2017/01/01 01:30:10\")\n.end(\"2017/01/01 01:30:50\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"start\" : \"2017/01/01 01:30:10\",\n\"end\" : \"2017/01/01 01:30:50\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart=\"2017/01/01 01:30:10\", \nend=\"2017/01/01 01:30:50\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Sun Jan 01 01:30:09 GMT 2017 false java.util.Date Sun Jan 01 01:30:10 GMT 2017 true java.util.Date Sun Jan 01 01:30:20 GMT 2017 true java.util.Date Sun Jan 01 01:30:50 GMT 2017 true java.util.Date Sun Jan 01 01:30:51 GMT 2017 false null false Example InDateRange with timestamps JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.start(\"1483315200\")\n.end(\"1485907200\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"start\" : \"1483315200\",\n\"end\" : \"1485907200\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart=\"1483315200\", \nend=\"1485907200\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Sun Jan 18 05:01:55 GMT 1970 false java.util.Date Sun Jan 18 05:01:55 GMT 1970 true java.util.Date Sun Jan 18 05:01:56 GMT 1970 true java.util.Date Sun Jan 18 05:45:07 GMT 1970 true java.util.Date Sun Jan 18 05:45:07 GMT 1970 false null false Example of range exclusive JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.start(\"2017/01/01\")\n.end(\"2017/02/01\")\n.startInclusive(false)\n.endInclusive(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"start\" : \"2017/01/01\",\n\"end\" : \"2017/02/01\",\n\"startInclusive\" : false,\n\"endInclusive\" : false\n}\n</code></pre> <pre><code>g.InDateRange( \nstart=\"2017/01/01\", \nend=\"2017/02/01\", \nstart_inclusive=False, \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Fri Jan 01 00:00:00 GMT 2016 false java.util.Date Sun Jan 01 00:00:00 GMT 2017 false java.util.Date Sun Jan 01 01:00:00 GMT 2017 true java.util.Date Sun Jan 01 23:59:59 GMT 2017 true java.util.Date Wed Feb 01 00:00:00 GMT 2017 false java.util.Date Wed Feb 01 00:00:01 GMT 2017 false null false Example of within the last week <p>If the end of the range is not specified then the end of the range is unbounded.</p> JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.startOffset(-7L)\n// end is not set - it is unbounded\n.offsetUnit(TimeUnit.DAY)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"startOffset\" : -7,\n\"offsetUnit\" : \"DAY\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart_offset=-7, \noffset_unit=\"DAY\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Sun Oct 30 11:00:11 GMT 2022 false java.util.Date Tue Nov 01 11:00:11 GMT 2022 true java.util.Date Sun Nov 06 11:00:11 GMT 2022 true java.util.Date Mon Nov 07 11:00:11 GMT 2022 true null false Example of exactly 7 hours ago JavaJSONPython <pre><code>final InDateRange function = new InDateRange.Builder()\n.startOffset(-7L)\n.endOffset(-6L)\n.endInclusive(false)\n.offsetUnit(TimeUnit.HOUR)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRange\",\n\"startOffset\" : -7,\n\"endOffset\" : -6,\n\"endInclusive\" : false,\n\"offsetUnit\" : \"HOUR\"\n}\n</code></pre> <pre><code>g.InDateRange( \nstart_offset=-7, \nend_offset=-6, \noffset_unit=\"HOUR\", \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.Date Mon Nov 07 03:00:12 GMT 2022 false java.util.Date Mon Nov 07 04:00:22 GMT 2022 true java.util.Date Mon Nov 07 05:00:02 GMT 2022 true java.util.Date Mon Nov 07 05:00:22 GMT 2022 false java.util.Date Mon Nov 07 11:00:12 GMT 2022 false null false"},{"location":"reference/predicates-guide/koryphe-predicates/#indaterangedual","title":"InDateRangeDual","text":"<p>Tests if a start Comparable and end Comparable are within a provided range. Specifically the start Comparable has to be greater than the start bound and the end Comparable has to be less than the end bound. By default the range is inclusive, this can be toggled using the startInclusive and endInclusive booleans. Javadoc</p> <p>This uses the same input formats as InDateRange.</p> <p>Input type: <code>java.lang.Comparable, java.lang.Comparable</code></p> Example with fully uncontained range JavaJSONPython <pre><code>final InDateRangeDual function = new InDateRangeDual.Builder()\n.start(\"2017/03/01\")\n.end(\"2017/08/01\")\n.startFullyContained(false)\n.endFullyContained(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRangeDual\",\n\"start\" : \"2017/03/01\",\n\"end\" : \"2017/08/01\",\n\"endFullyContained\" : false,\n\"startFullyContained\" : false\n}\n</code></pre> <pre><code>g.InDateRangeDual( \nstart=\"2017/03/01\", \nend=\"2017/08/01\", \nstart_fully_contained=False, \nend_fully_contained=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Wed Feb 01 00:00:00 GMT 2017] false [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Sat Apr 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Mon May 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Fri Sep 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Fri Sep 01 00:00:00 BST 2017, Sun Oct 01 00:00:00 BST 2017] false [ ,] [null, null] false Example with start contained range JavaJSONPython <pre><code>final InDateRangeDual function = new InDateRangeDual.Builder()\n.start(\"2017/03/01\")\n.end(\"2017/08/01\")\n.startFullyContained(true)\n.endFullyContained(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRangeDual\",\n\"start\" : \"2017/03/01\",\n\"end\" : \"2017/08/01\",\n\"endFullyContained\" : false,\n\"startFullyContained\" : true\n}\n</code></pre> <pre><code>g.InDateRangeDual( \nstart=\"2017/03/01\", \nend=\"2017/08/01\", \nstart_fully_contained=True, \nend_fully_contained=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Wed Feb 01 00:00:00 GMT 2017] false [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Sat Apr 01 00:00:00 BST 2017] false [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Mon May 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Fri Sep 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Fri Sep 01 00:00:00 BST 2017, Sun Oct 01 00:00:00 BST 2017] false [ ,] [null, null] false Example with fully contained range JavaJSONPython <pre><code>final InDateRangeDual function = new InDateRangeDual.Builder()\n.start(\"2017/03/01\")\n.end(\"2017/08/01\")\n.startFullyContained(true)\n.endFullyContained(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InDateRangeDual\",\n\"start\" : \"2017/03/01\",\n\"end\" : \"2017/08/01\",\n\"endFullyContained\" : true,\n\"startFullyContained\" : true\n}\n</code></pre> <pre><code>g.InDateRangeDual( \nstart=\"2017/03/01\", \nend=\"2017/08/01\", \nstart_fully_contained=True, \nend_fully_contained=True \n)\n</code></pre> Input Type Input Result [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Wed Feb 01 00:00:00 GMT 2017] false [java.util.Date, java.util.Date] [Sun Jan 01 00:00:00 GMT 2017, Sat Apr 01 00:00:00 BST 2017] false [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Mon May 01 00:00:00 BST 2017] true [java.util.Date, java.util.Date] [Sat Apr 01 00:00:00 BST 2017, Fri Sep 01 00:00:00 BST 2017] false [java.util.Date, java.util.Date] [Fri Sep 01 00:00:00 BST 2017, Sun Oct 01 00:00:00 BST 2017] false [ ,] [null, null] false"},{"location":"reference/predicates-guide/koryphe-predicates/#inrange","title":"InRange","text":"<p>Checks if a comparable is within a provided range. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example of Long 5 to 10 JavaJSONPython <pre><code>final InRange function = new InRange.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRange\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n}\n}\n</code></pre> <pre><code>g.InRange( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Long -5 false java.lang.Long 1 false java.lang.Long 5 true java.lang.Long 7 true java.lang.Long 10 true java.lang.Long 20 false java.lang.Integer 7 ClassCastException: java.lang.Long cannot be cast to java.lang.Integer java.lang.String 7 ClassCastException: java.lang.Long cannot be cast to java.lang.String null false Example of Long 5 to 10 exclusive JavaJSONPython <pre><code>final InRange function = new InRange.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.startInclusive(false)\n.endInclusive(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRange\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n},\n\"startInclusive\" : false,\n\"endInclusive\" : false\n}\n</code></pre> <pre><code>g.InRange( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10}, \nstart_inclusive=False, \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Long -5 false java.lang.Long 1 false java.lang.Long 5 false java.lang.Long 7 true java.lang.Long 10 false java.lang.Long 20 false java.lang.Integer 7 ClassCastException: java.lang.Long cannot be cast to java.lang.Integer java.lang.String 7 ClassCastException: java.lang.Long cannot be cast to java.lang.String null false Example of Long 5 less than 10 <p>If the start of the range is not specified then the start of the range is unbounded.</p> JavaJSONPython <pre><code>final InRange function = new InRange.Builder&lt;Long&gt;()\n.end(10L)\n.endInclusive(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRange\",\n\"end\" : {\n\"Long\" : 10\n},\n\"endInclusive\" : false\n}\n</code></pre> <pre><code>g.InRange( \nend={'java.lang.Long': 10}, \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Long -5 true java.lang.Long 1 true java.lang.Long 5 true java.lang.Long 7 true java.lang.Long 10 false java.lang.Long 20 false java.lang.Integer 7 ClassCastException: java.lang.Long cannot be cast to java.lang.Integer java.lang.String 7 ClassCastException: java.lang.Long cannot be cast to java.lang.String null false Example of String 'B' to 'D' JavaJSONPython <pre><code>final InRange function = new InRange.Builder&lt;String&gt;()\n.start(\"B\")\n.end(\"D\")\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRange\",\n\"start\" : \"B\",\n\"end\" : \"D\"\n}\n</code></pre> <pre><code>g.InRange( \nstart=\"B\", \nend=\"D\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String A false java.lang.String B true java.lang.String C true java.lang.String D true java.lang.String c false java.lang.Integer 1 ClassCastException: java.lang.String cannot be cast to java.lang.Integer null false"},{"location":"reference/predicates-guide/koryphe-predicates/#inrangedual","title":"InRangeDual","text":"<p>Checks if two comparables (a start and an end) are within a provided range. Javadoc</p> <p>Input type: <code>java.lang.Comparable, java.lang.Comparable</code></p> Example of Long overlapping range JavaJSONPython <pre><code>final InRangeDual function = new InRangeDual.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.startFullyContained(false)\n.endFullyContained(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRangeDual\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n},\n\"endFullyContained\" : false,\n\"startFullyContained\" : false\n}\n</code></pre> <pre><code>g.InRangeDual( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10}, \nstart_fully_contained=False, \nend_fully_contained=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Long, java.lang.Long] [1, 4] false [java.lang.Long, java.lang.Long] [1, 7] true [java.lang.Long, java.lang.Long] [6, 7] true [java.lang.Long, java.lang.Long] [7, 11] true [java.lang.Long, java.lang.Long] [11, 20] false [ ,] [null, null] false Example of Long end overlapping range JavaJSONPython <pre><code>final InRangeDual function = new InRangeDual.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.startFullyContained(true)\n.endFullyContained(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRangeDual\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n},\n\"endFullyContained\" : false,\n\"startFullyContained\" : true\n}\n</code></pre> <pre><code>g.InRangeDual( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10}, \nstart_fully_contained=True, \nend_fully_contained=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Long, java.lang.Long] [1, 4] false [java.lang.Long, java.lang.Long] [1, 7] false [java.lang.Long, java.lang.Long] [6, 7] true [java.lang.Long, java.lang.Long] [7, 11] true [java.lang.Long, java.lang.Long] [11, 20] false [ ,] [null, null] false Example of Long non overlapping range JavaJSONPython <pre><code>final InRangeDual function = new InRangeDual.Builder&lt;Long&gt;()\n.start(5L)\n.end(10L)\n.startFullyContained(true)\n.endFullyContained(true)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRangeDual\",\n\"start\" : {\n\"Long\" : 5\n},\n\"end\" : {\n\"Long\" : 10\n},\n\"endFullyContained\" : true,\n\"startFullyContained\" : true\n}\n</code></pre> <pre><code>g.InRangeDual( \nstart={'java.lang.Long': 5}, \nend={'java.lang.Long': 10}, \nstart_fully_contained=True, \nend_fully_contained=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Long, java.lang.Long] [1, 4] false [java.lang.Long, java.lang.Long] [1, 7] false [java.lang.Long, java.lang.Long] [6, 7] true [java.lang.Long, java.lang.Long] [7, 11] false [java.lang.Long, java.lang.Long] [11, 20] false [ ,] [null, null] false Example Long less than 10 <p>If the start of the range is not specified then the start of the range is unbounded.</p> JavaJSONPython <pre><code>final InRangeDual function = new InRangeDual.Builder&lt;Long&gt;()\n.end(10L)\n.endInclusive(false)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InRangeDual\",\n\"end\" : {\n\"Long\" : 10\n},\n\"endInclusive\" : false\n}\n</code></pre> <pre><code>g.InRangeDual( \nend={'java.lang.Long': 10}, \nend_inclusive=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Long, java.lang.Long] [-5, -1] true [java.lang.Long, java.lang.Long] [1, 6] true [java.lang.Long, java.lang.Long] [6, 6] true [java.lang.Long, java.lang.Long] [6, 7] true [java.lang.Long, java.lang.Long] [6, 10] true [java.lang.Long, java.lang.Long] [10, 20] false [java.lang.Integer, java.lang.Integer] [6, 7] IllegalArgumentException: Input tuple values do not match the required function input types [java.lang.String, java.lang.String] [5, 7] IllegalArgumentException: Input tuple values do not match the required function input types [ ,] [null, null] false"},{"location":"reference/predicates-guide/koryphe-predicates/#intimerange","title":"InTimeRange","text":"<p>Functionally identical to InDateRange, except that it uses Long as the timestamp input type. By default, checks are carried out assuming the data will be in milliseconds. If this is not the case, the time unit can be changed using the timeUnit property. Javadoc</p> <p>Input type: <code>java.lang.Long</code></p> Example with time unit microseconds JavaJSONPython <pre><code>final InTimeRange function = new InTimeRange.Builder()\n.start(\"2017/01/01 01:30:10\")\n.end(\"2017/01/01 01:30:50\")\n.timeUnit(TimeUnit.MICROSECOND)\n.build();\n</code></pre> <pre><code>{\n\"class\" : \"InTimeRange\",\n\"start\" : \"2017/01/01 01:30:10\",\n\"end\" : \"2017/01/01 01:30:50\",\n\"timeUnit\" : \"MICROSECOND\"\n}\n</code></pre> <pre><code>g.InTimeRange( \nstart=\"2017/01/01 01:30:10\", \nend=\"2017/01/01 01:30:50\", \ntime_unit=\"MICROSECOND\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Long 1483234209000000 false java.lang.Long 1483234210000000 true java.lang.Long 1483234220000000 true java.lang.Long 1483234250000000 true java.lang.Long 1483234251000000 false null false"},{"location":"reference/predicates-guide/koryphe-predicates/#intimerangedual","title":"InTimeRangeDual","text":"<p>Functionally identical to InDateRangeDual. By default, checks are carried out assuming the data will be in milliseconds. If this is not the case, the time unit can be changed using the timeUnit property. Javadoc</p>"},{"location":"reference/predicates-guide/koryphe-predicates/#isa","title":"IsA","text":"<p>Checks if an input is an instance of a class. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example with String JavaJSONPython <pre><code>final IsA function = new IsA(String.class);\n</code></pre> <pre><code>{\n\"class\" : \"IsA\",\n\"type\" : \"java.lang.String\"\n}\n</code></pre> <pre><code>g.IsA( \ntype=\"java.lang.String\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.Double 2.5 false java.lang.String abc true Example with Number JavaJSONPython <pre><code>final IsA function = new IsA(Number.class);\n</code></pre> <pre><code>{\n\"class\" : \"IsA\",\n\"type\" : \"java.lang.Number\"\n}\n</code></pre> <pre><code>g.IsA( \ntype=\"java.lang.Number\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Double 2.5 true java.lang.String abc false"},{"location":"reference/predicates-guide/koryphe-predicates/#isequal","title":"IsEqual","text":"<p>Checks if an input is equal to a provided value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example equal to Integer 5 JavaJSONPython <pre><code>final IsEqual function = new IsEqual(5);\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsEqual\",\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsEqual( \nvalue=5 \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 5 true java.lang.Long 5 false java.lang.String 5 false java.lang.Character 5 false Example equal to String 5 JavaJSONPython <pre><code>final IsEqual function = new IsEqual(\"5\");\n</code></pre> <pre><code>{\n\"class\" : \"IsEqual\",\n\"value\" : \"5\"\n}\n</code></pre> <pre><code>g.IsEqual( \nvalue=\"5\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 5 false java.lang.Long 5 false java.lang.String 5 true java.lang.Character 5 false"},{"location":"reference/predicates-guide/koryphe-predicates/#isfalse","title":"IsFalse","text":"<p>Checks if an input boolean is false. Javadoc</p> <p>Input type: <code>java.lang.Boolean</code></p> Example IsFalse JavaJSONPython <pre><code>final IsFalse function = new IsFalse();\n</code></pre> <pre><code>{\n\"class\" : \"IsFalse\"\n}\n</code></pre> <pre><code>g.IsFalse()\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Boolean true false java.lang.Boolean false true null false java.lang.String true ClassCastException: java.lang.String cannot be cast to java.lang.Boolean"},{"location":"reference/predicates-guide/koryphe-predicates/#istrue","title":"IsTrue","text":"<p>Checks if an input boolean is true. Javadoc</p> <p>Input type: <code>java.lang.Boolean</code></p> Example IsTrue JavaJSONPython <pre><code>final IsTrue function = new IsTrue();\n</code></pre> <pre><code>{\n\"class\" : \"IsTrue\"\n}\n</code></pre> <pre><code>g.IsTrue()\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Boolean true true java.lang.Boolean false false null false java.lang.String true ClassCastException: java.lang.String cannot be cast to java.lang.Boolean"},{"location":"reference/predicates-guide/koryphe-predicates/#isin","title":"IsIn","text":"<p>Checks if an input is in a set of allowed values. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example IsIn JavaJSONPython <pre><code>final IsIn function = new IsIn(5, 5L, \"5\", '5');\n</code></pre> <pre><code>{\n\"class\" : \"IsIn\",\n\"values\" : [ 5, {\n\"Long\" : 5\n}, \"5\", {\n\"Character\" : \"5\"\n} ]\n}\n</code></pre> <pre><code>g.IsIn( \nvalues=[ \n5, \n{'java.lang.Long': 5}, \n\"5\", \n{'java.lang.Character': '5'} \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 5 true java.lang.Long 5 true java.lang.String 5 true java.lang.Character 5 true java.lang.Integer 1 false java.lang.Long 1 false java.lang.String 1 false java.lang.Character 1 false"},{"location":"reference/predicates-guide/koryphe-predicates/#islessthan","title":"IsLessThan","text":"<p>Checks if a comparable is less than a provided value. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example IsLessThan with Integer 5 JavaJSONPython <pre><code>final IsLessThan function = new IsLessThan(5);\n</code></pre> <pre><code>{\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsLessThan( \nvalue=5, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Long 1 false java.lang.Integer 5 false java.lang.Long 5 false java.lang.Integer 10 false java.lang.Long 10 false java.lang.String 1 false Example IsLessThan or equal with Integer 5 JavaJSONPython <pre><code>final IsLessThan function = new IsLessThan(5, true);\n</code></pre> <pre><code>{\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : true,\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsLessThan( \nvalue=5, \nor_equal_to=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 true java.lang.Long 1 false java.lang.Integer 5 true java.lang.Long 5 false java.lang.Integer 10 false java.lang.Long 10 false java.lang.String 1 false Example IsLessThan with String 'B' JavaJSONPython <pre><code>final IsLessThan function = new IsLessThan(\"B\");\n</code></pre> <pre><code>{\n\"class\" : \"IsLessThan\",\n\"orEqualTo\" : false,\n\"value\" : \"B\"\n}\n</code></pre> <pre><code>g.IsLessThan( \nvalue=\"B\", \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.String A true java.lang.String B false java.lang.String C false"},{"location":"reference/predicates-guide/koryphe-predicates/#ismorethan","title":"IsMoreThan","text":"<p>Checks if a comparable is more than a provided value. Javadoc</p> <p>Input type: <code>java.lang.Comparable</code></p> Example IsMoreThan with Integer 5 JavaJSONPython <pre><code>final IsMoreThan function = new IsMoreThan(5);\n</code></pre> <pre><code>{\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsMoreThan( \nvalue=5, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.Integer 5 false java.lang.Integer 10 true Example IsMoreThan or equal with Integer 5 JavaJSONPython <pre><code>final IsMoreThan function = new IsMoreThan(5, true);\n</code></pre> <pre><code>{\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : true,\n\"value\" : 5\n}\n</code></pre> <pre><code>g.IsMoreThan( \nvalue=5, \nor_equal_to=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.Integer 5 true java.lang.Integer 10 true Example IsMoreThan with String 'B' JavaJSONPython <pre><code>final IsMoreThan function = new IsMoreThan(\"B\");\n</code></pre> <pre><code>{\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : \"B\"\n}\n</code></pre> <pre><code>g.IsMoreThan( \nvalue=\"B\", \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.Integer 1 false java.lang.String A false java.lang.String B false java.lang.String C true"},{"location":"reference/predicates-guide/koryphe-predicates/#islongerthan","title":"IsLongerThan","text":"<p>Checks if the length of an input is more than a value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example testing size/length attribute is greater than 5 JavaJSONPython <pre><code>final IsLongerThan predicate = new IsLongerThan(5);\n</code></pre> <pre><code>{\n\"class\" : \"IsLongerThan\",\n\"minLength\" : 5,\n\"orEqualTo\" : false\n}\n</code></pre> <pre><code>g.IsLongerThan( \nmin_length=5, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String testString true java.lang.String aTest false [Ljava.lang.String; [null, null, null, null, null] false [Ljava.lang.String; [null, null, null, null, null, null, null, null, null, null] true java.util.Arrays$ArrayList [0, 1, 2, 3, 4, 5] true Example testing size/length attribute is greater than or equal to 5 JavaJSONPython <pre><code>final IsLongerThan predicate = new IsLongerThan(5, true);\n</code></pre> <pre><code>{\n\"class\" : \"IsLongerThan\",\n\"minLength\" : 5,\n\"orEqualTo\" : true\n}\n</code></pre> <pre><code>g.IsLongerThan( \nmin_length=5, \nor_equal_to=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String test false java.lang.String testString true java.lang.String aTest true [Ljava.lang.String; [null, null, null, null, null] true [Ljava.lang.String; [null, null, null, null, null, null, null, null, null, null] true java.util.Arrays$ArrayList [0, 1, 2, 3, 4, 5] true"},{"location":"reference/predicates-guide/koryphe-predicates/#isshorterthan","title":"IsShorterThan","text":"<p>Checks if the length of an input is more than than a value. Javadoc</p> <p>Input type: <code>java.lang.Object</code></p> Example testing size/length attribute is shorter than 4 JavaJSONPython <pre><code>final IsShorterThan function = new IsShorterThan(4);\n</code></pre> <pre><code>{\n\"class\" : \"IsShorterThan\",\n\"maxLength\" : 4,\n\"orEqualTo\" : false\n}\n</code></pre> <pre><code>g.IsShorterThan( \nmax_length=4, \nor_equal_to=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String 123 true java.lang.String 1234 false [Ljava.lang.Integer; [1, 2, 3] true [Ljava.lang.Integer; [1, 2, 3, 4] false java.util.ArrayList [1, 2, 3] true java.util.ArrayList [1, 2, 3, 4] false java.util.HashMap {1=a, 2=b, 3=c} true java.util.HashMap {4=d} true java.lang.Integer 10000 IllegalArgumentException: Could not determine the size of the provided value java.lang.Long 10000 IllegalArgumentException: Could not determine the size of the provided value"},{"location":"reference/predicates-guide/koryphe-predicates/#isxlessthany","title":"IsXLessThanY","text":"<p>Checks the first comparable is less than the second comparable. Javadoc</p> <p>Input type: <code>java.lang.Comparable, java.lang.Comparable</code></p> Example IsXLessThanY JavaJSONPython <pre><code>final IsXLessThanY function = new IsXLessThanY();\n</code></pre> <pre><code>{\n\"class\" : \"IsXLessThanY\"\n}\n</code></pre> <pre><code>g.IsXLessThanY()\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Integer] [1, 5] true [java.lang.Integer, java.lang.Integer] [5, 5] false [java.lang.Integer, java.lang.Integer] [10, 5] false [java.lang.Long, java.lang.Integer] [1, 5] false [java.lang.Long, java.lang.Long] [1, 5] true [java.lang.Long, java.lang.Long] [5, 5] false [java.lang.Long, java.lang.Long] [10, 5] false [java.lang.Integer, java.lang.Long] [1, 5] false [java.lang.String, java.lang.String] [bcd, cde] true [java.lang.String, java.lang.String] [bcd, abc] false [java.lang.String, java.lang.Integer] [1, 5] false"},{"location":"reference/predicates-guide/koryphe-predicates/#isxmorethany","title":"IsXMoreThanY","text":"<p>Checks the first comparable is more than the second comparable. Javadoc</p> <p>Input type: <code>java.lang.Comparable, java.lang.Comparable</code></p> Example IsXMoreThanY JavaJSONPython <pre><code>final IsXMoreThanY function = new IsXMoreThanY();\n</code></pre> <pre><code>{\n\"class\" : \"IsXMoreThanY\"\n}\n</code></pre> <pre><code>g.IsXMoreThanY()\n</code></pre> <p>Example inputs:</p> Input Type Input Result [java.lang.Integer, java.lang.Integer] [1, 5] false [java.lang.Integer, java.lang.Integer] [5, 5] false [java.lang.Integer, java.lang.Integer] [10, 5] true [java.lang.Long, java.lang.Integer] [10, 5] false [java.lang.Long, java.lang.Long] [1, 5] false [java.lang.Long, java.lang.Long] [5, 5] false [java.lang.Long, java.lang.Long] [10, 5] true [java.lang.Integer, java.lang.Long] [10, 5] false [java.lang.String, java.lang.String] [bcd, cde] false [java.lang.String, java.lang.String] [bcd, abc] true [java.lang.String, java.lang.Integer] [10, 5] false"},{"location":"reference/predicates-guide/koryphe-predicates/#mapcontains","title":"MapContains","text":"<p>Checks if a map contains a given key. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example MapContains JavaJSONPython <pre><code>final MapContains function = new MapContains(\"a\");\n</code></pre> <pre><code>{\n\"class\" : \"MapContains\",\n\"key\" : \"a\"\n}\n</code></pre> <pre><code>g.MapContains( \nkey=\"a\" \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashMap {a=1, b=2, c=3} true java.util.HashMap {b=2, c=3} false java.util.HashMap {a=null, b=2, c=3} true"},{"location":"reference/predicates-guide/koryphe-predicates/#mapcontainspredicate","title":"MapContainsPredicate","text":"<p>Checks if a map contains a key that matches a predicate. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example of MapContainsPredicate with Regex Pedicate JavaJSONPython <pre><code>final MapContainsPredicate function = new MapContainsPredicate(new Regex(\"a.*\"));\n</code></pre> <pre><code>{\n\"class\" : \"MapContainsPredicate\",\n\"keyPredicate\" : {\n\"class\" : \"Regex\",\n\"value\" : {\n\"java.util.regex.Pattern\" : \"a.*\"\n}\n}\n}\n</code></pre> <pre><code>{\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.MapContainsPredicate\",\n\"keyPredicate\" : {\n\"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Regex\",\n\"value\" : {\n\"java.util.regex.Pattern\" : \"a.*\"\n}\n}\n}\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashMap {a1=1, a2=2, b=2, c=3} true java.util.HashMap {b=2, c=3} false java.util.HashMap {a=null, b=2, c=3} true"},{"location":"reference/predicates-guide/koryphe-predicates/#predicatemap","title":"PredicateMap","text":"<p>Extracts a value from a map then applies the predicate to it. Javadoc</p> <p>Input type: <code>java.util.Map</code></p> Example FreqMap is more than 2 JavaJSONPython <pre><code>final PredicateMap function = new PredicateMap(\"key1\", new IsMoreThan(2L));\n</code></pre> <pre><code>{\n\"class\" : \"PredicateMap\",\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : false,\n\"value\" : {\n\"Long\" : 2\n}\n},\n\"key\" : \"key1\"\n}\n</code></pre> <pre><code>g.PredicateMap( \nkey=\"key1\", \npredicate=g.IsMoreThan( \nvalue={'java.lang.Long': 2}, \nor_equal_to=False \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result uk.gov.gchq.gaffer.types.FreqMap {key1=1} false uk.gov.gchq.gaffer.types.FreqMap {key1=2} false uk.gov.gchq.gaffer.types.FreqMap {key1=3} true uk.gov.gchq.gaffer.types.FreqMap {key1=3, key2=0} true uk.gov.gchq.gaffer.types.FreqMap {key2=3} false Example FreqMap is more than or equal to 2 JavaJSONPython <pre><code>final PredicateMap function = new PredicateMap(\"key1\", new IsMoreThan(2L, true));\n</code></pre> <pre><code>{\n\"class\" : \"PredicateMap\",\n\"predicate\" : {\n\"class\" : \"IsMoreThan\",\n\"orEqualTo\" : true,\n\"value\" : {\n\"Long\" : 2\n}\n},\n\"key\" : \"key1\"\n}\n</code></pre> <pre><code>g.PredicateMap( \nkey=\"key1\", \npredicate=g.IsMoreThan( \nvalue={'java.lang.Long': 2}, \nor_equal_to=True \n) \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result uk.gov.gchq.gaffer.types.FreqMap {key1=1} false uk.gov.gchq.gaffer.types.FreqMap {key1=2} true uk.gov.gchq.gaffer.types.FreqMap {key1=3} true uk.gov.gchq.gaffer.types.FreqMap {key1=3, key2=0} true uk.gov.gchq.gaffer.types.FreqMap {key2=3} false Example Map with date key having value that exists JavaJSONPython <pre><code>final PredicateMap function = new PredicateMap(new Date(0L), new Exists());\n</code></pre> <pre><code>{\n\"class\" : \"PredicateMap\",\n\"predicate\" : {\n\"class\" : \"Exists\"\n},\n\"key\" : {\n\"Date\" : 0\n}\n}\n</code></pre> <pre><code>g.PredicateMap( \nkey={'java.util.Date': 0}, \npredicate=g.Exists() \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.util.HashMap {Thu Jan 01 01:00:00 GMT 1970=1} true java.util.HashMap {Mon Nov 07 11:00:16 GMT 2022=2} false"},{"location":"reference/predicates-guide/koryphe-predicates/#stringcontains","title":"StringContains","text":"<p>Checks if a string contains some value. Javadoc</p> <p>Note</p> <p>The StringContains predicate is case sensitive by default, hence only exact matches are found.</p> <p>Input type: <code>java.lang.String</code></p> Example StringContains JavaJSONPython <pre><code>final StringContains function = new StringContains(\"test\");\n</code></pre> <pre><code>{\n\"class\" : \"StringContains\",\n\"value\" : \"test\",\n\"ignoreCase\" : false\n}\n</code></pre> <pre><code>g.StringContains( \nvalue=\"test\", \nignore_case=False \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String This is a Test false java.lang.String Test false java.lang.String test true Example StringContains ignoring case JavaJSONPython <pre><code>final StringContains function = new StringContains(\"test\", true);\n</code></pre> <pre><code>{\n\"class\" : \"StringContains\",\n\"value\" : \"test\",\n\"ignoreCase\" : true\n}\n</code></pre> <pre><code>g.StringContains( \nvalue=\"test\", \nignore_case=True \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String This is a Test true java.lang.String Test true java.lang.String test true"},{"location":"reference/predicates-guide/koryphe-predicates/#regex","title":"Regex","text":"<p>Checks if a string matches a pattern. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example abc JavaJSONPython <pre><code>final Regex function = new Regex(\"[a-d0-4]\");\n</code></pre> <pre><code>{\n\"class\" : \"Regex\",\n\"value\" : {\n\"java.util.regex.Pattern\" : \"[a-d0-4]\"\n}\n}\n</code></pre> <pre><code>g.Regex( \nvalue={'java.util.regex.Pattern': '[a-d0-4]'} \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String a true java.lang.String z false java.lang.String az false java.lang.Character a ClassCastException: java.lang.Character cannot be cast to java.lang.String java.lang.String 2 true java.lang.Integer 2 ClassCastException: java.lang.Integer cannot be cast to java.lang.String java.lang.Long 2 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/predicates-guide/koryphe-predicates/#multiregex","title":"MultiRegex","text":"<p>Checks if a string matches at least one pattern. Javadoc</p> <p>Input type: <code>java.lang.String</code></p> Example MultiRegex JavaJSONPython <pre><code>final MultiRegex function = new MultiRegex(new Pattern[]{Pattern.compile(\"[a-d]\"), Pattern.compile(\"[0-4]\")});\n</code></pre> <pre><code>{\n\"class\" : \"MultiRegex\",\n\"value\" : [ {\n\"java.util.regex.Pattern\" : \"[a-d]\"\n}, {\n\"java.util.regex.Pattern\" : \"[0-4]\"\n} ]\n}\n</code></pre> <pre><code>g.MultiRegex( \nvalue=[ \n{'java.util.regex.Pattern': '[a-d]'}, \n{'java.util.regex.Pattern': '[0-4]'} \n] \n)\n</code></pre> <p>Example inputs:</p> Input Type Input Result java.lang.String a true java.lang.String z false java.lang.String az false java.lang.Character a ClassCastException: java.lang.Character cannot be cast to java.lang.String java.lang.String 2 true java.lang.Integer 2 ClassCastException: java.lang.Integer cannot be cast to java.lang.String java.lang.Long 2 ClassCastException: java.lang.Long cannot be cast to java.lang.String"},{"location":"reference/predicates-guide/predicates/","title":"Predicates Guide","text":"<p>Predicates are filter functions. Most come from the Koryphe library and some are part of Gaffer itself.</p>"},{"location":"reference/predicates-guide/predicates/#table-of-all-gaffer-predicates","title":"Table of all Gaffer Predicates","text":"<p>Note</p> <p>Predicates below which are missing a link have not been documented on this site yet.</p> Predicate Origin <code>impl.predicate.AgeOff</code> Koryphe <code>impl.predicate.AgeOffFromDays</code> Koryphe <code>impl.predicate.And</code> Koryphe <code>impl.predicate.AreEqual</code> Koryphe <code>impl.predicate.AreIn</code> Koryphe <code>impl.predicate.CollectionContains</code> Koryphe <code>impl.predicate.Exists</code> Koryphe <code>impl.predicate.If</code> Koryphe <code>impl.predicate.Or</code> Koryphe <code>impl.predicate.Not</code> Koryphe <code>impl.predicate.range.InDateRange</code> Koryphe <code>impl.predicate.range.InDateRangeDual</code> Koryphe <code>impl.predicate.range.InRange</code> Koryphe <code>impl.predicate.range.InRangeDual</code> Koryphe <code>impl.predicate.range.InTimeRange</code> Koryphe <code>impl.predicate.range.InTimeRangeDual</code> Koryphe <code>impl.predicate.IsA</code> Koryphe <code>impl.predicate.IsEqual</code> Koryphe <code>impl.predicate.IsFalse</code> Koryphe <code>impl.predicate.IsTrue</code> Koryphe <code>impl.predicate.IsIn</code> Koryphe <code>impl.predicate.IsLessThan</code> Koryphe <code>impl.predicate.IsMoreThan</code> Koryphe <code>impl.predicate.IsLongerThan</code> Koryphe <code>impl.predicate.IsShorterThan</code> Koryphe <code>impl.predicate.IsXLessThanY</code> Koryphe <code>impl.predicate.IsXMoreThanY</code> Koryphe <code>impl.predicate.MapContains</code> Koryphe <code>impl.predicate.MapContainsPredicate</code> Koryphe <code>predicate.PredicateMap</code> Koryphe <code>predicate.AdaptedPredicate</code> Koryphe <code>predicate.PredicateComposite</code> Koryphe <code>impl.predicate.StringContains</code> Koryphe <code>impl.predicate.Regex</code> Koryphe <code>impl.predicate.MultiRegex</code> Koryphe <code>tuple.predicate.IntegerTupleAdaptedPredicate</code> Koryphe <code>tuple.predicate.TupleAdaptedPredicate</code> Koryphe <code>tuple.predicate.TupleAdaptedPredicateComposite</code> Koryphe <code>access.predicate.user.DefaultUserPredicate</code> Gaffer <code>access.predicate.user.NoAccessUserPredicate</code> Gaffer <code>access.predicate.user.UnrestrictedAccessUserPredicate</code> Gaffer <code>data.element.comparison.ElementJoinComparator</code> Gaffer <code>data.element.function.ElementFilter</code> Gaffer <code>data.element.function.PropertiesFilter</code> Gaffer <code>data.elementdefinition.view.access.predicate.user.NamedViewWriteUserPredicate</code> Gaffer <code>federatedstore.access.predicate.user.FederatedGraphReadUserPredicate</code> Gaffer <code>federatedstore.access.predicate.user.FederatedGraphWriteUserPredicate</code> Gaffer <code>graph.hook.migrate.predicate.TransformAndFilter</code> Gaffer <code>rest.example.ExampleFilterFunction</code> Gaffer <code>sketches.clearspring.cardinality.predicate.HyperLogLogPlusIsLessThan</code> Gaffer <code>sketches.datasketches.cardinality.predicate.HllSketchIsLessThan</code> Gaffer <code>store.util.AggregatorUtil$IsElementAggregated</code> Gaffer <code>time.predicate.RBMBackedTimestampSetInRange</code> Gaffer"},{"location":"reference/properties-guide/advanced/","title":"Advanced Properties","text":"<p>These properties use advanced sketch structures from the Clearspring and Datasketches libraries.</p>"},{"location":"reference/properties-guide/advanced/#introduction","title":"Introduction","text":"<p>A sketch is a compact data structure that gives an approximate answer to a question. For example, a HyperLogLog sketch can estimate the cardinality of a set with billions of elements with a small relative error, using orders of magnitude less storage than storing the full set.</p> <p>Gaffer allows sketches to be stored on Entities and Edges. These sketches can be continually updated as new data arrives. Here are some example applications of sketches in Gaffer:</p> <ul> <li>Using a HyperLogLogPlusPlus sketch to provide a very quick estimate of the degree of a node.</li> <li>Using a quantiles sketch to estimate the median score associated to an edge, or the 99th percentile of the scores seen on an edge.</li> <li>Using a reservoir items sketch to store a sample of all the distinct labels associated to an edge.</li> <li>Using theta sketches to estimate the number of distinct edges seen on a particular day, the number seen on the previous day and the overlap between the two days.</li> </ul> <p>Gaffer provides serialisers and aggregators for sketches from two different libraries: the Clearspring library and the pre-Apache version of the Datasketches library.</p> <p>For the Clearspring library, a serialiser and an aggregator is provided for the <code>HyperLogLogPlus</code> sketch. This is an implementation of the HyperLogLog++ algorithm described in this paper.</p> <p>For the Datasketches library, serialisers and aggregators are provided for several sketches. These sketches include:</p> <ul> <li>HyperLogLog sketches for estimating the cardinality of a set (see class com.yahoo.sketches.hll.HllSketch);</li> <li>Frequency sketches for estimating the frequencies of items such as longs and strings respectively (see for example class com.yahoo.sketches.frequencies.LongsSketch);</li> <li>Quantile sketches for estimating the quantiles of doubles or strings seen on an element (see for example class com.yahoo.sketches.quantiles.DoublesSketch);</li> <li>Sampling sketches for maintaining samples of items seen on an element (see for example class com.yahoo.sketches.sampling.ReservoirItemsSketch);</li> <li>Theta sketches for estimating the union and intersection of sets (see for example class com.yahoo.sketches.theta.Sketch).</li> </ul> <p>Most of the Datasketches sketches come in two forms: a standard sketch form and a \"union\" form. The latter is technically not a sketch. It is an operator that allows efficient union operations of two sketches. It also allows updating the sketch with individual items. In order to obtain estimates from it, it is necessary to first obtain a sketch from it, using a method called <code>getResult()</code>. There are some interesting trade-offs in the serialisation and aggregation speeds between the sketches and the unions. If in doubt, use the standard sketches. Examples are provided for the standard sketches, but not for the unions.</p>"},{"location":"reference/properties-guide/advanced/#class-list","title":"Class List","text":"Property Full Class <code>HyperLogLogPlus</code> <code>com.clearspring.analytics.stream.cardinality.HyperLogLogPlus</code> <code>HllSketch</code> <code>com.yahoo.sketches.hll.HllSketch</code> <code>LongsSketch</code> <code>com.yahoo.sketches.frequencies.LongsSketch</code> <code>DoublesSketch</code> <code>com.yahoo.sketches.quantiles.DoublesSketch</code> <code>ReservoirItemsSketch</code> <code>com.yahoo.sketches.sampling.ReservoirItemsSketch</code> <code>ThetaSketch</code> <code>com.yahoo.sketches.theta.Sketch</code>"},{"location":"reference/properties-guide/advanced/#predicate-support","title":"Predicate Support","text":"<p>The advanced properties all support these predicates:</p> <ul> <li><code>And</code></li> <li><code>Or</code></li> <li><code>Not</code></li> <li><code>If</code></li> <li><code>Exists</code></li> <li><code>IsA</code></li> <li><code>IsIn</code></li> <li><code>IsEqual</code></li> <li><code>PropertiesFilter</code></li> </ul> <p>Some advanced properties also have specilaised predicates:</p> Property Predicate <code>HyperLogLogPlus</code> <code>uk.gov.gchq.gaffer.sketches.clearspring.cardinality.predicate.HyperLogLogPlusIsLessThan</code> <code>HllSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.cardinality.predicate.HllSketchIsLessThan</code>"},{"location":"reference/properties-guide/advanced/#aggregator-support","title":"Aggregator Support","text":"<p>The <code>First</code> and <code>Last</code> binary operators are supported by all advanced properties.</p> <p>Each advanced property has a specilaised aggregator:</p> Property Binary Operator <code>HyperLogLogPlus</code> <code>uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator</code> <code>HllSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator</code> <code>LongsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.frequencies.binaryoperator.LongsSketchAggregator</code> <code>DoublesSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.quantiles.binaryoperator.DoublesSketchAggregator</code> <code>ReservoirItemsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.sampling.binaryoperator.ReservoirItemsSketchAggregator</code> <code>ThetaSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.theta.binaryoperator.SketchAggregator</code>"},{"location":"reference/properties-guide/advanced/#serialiser-support","title":"Serialiser Support","text":"<p>All advanced properties support the <code>NullSerialiser</code> and each has (at least one of) their own specialised serialiser(s):</p> Property Serialiser <code>HyperLogLogPlus</code> <code>uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser</code> <code>HllSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser</code> <code>LongsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.frequencies.serialisation.LongsSketchSerialiser</code> <code>DoublesSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.quantiles.serialisation.DoublesSketchSerialiser</code> <code>ReservoirItemsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.sampling.serialisation.ReservoirNumbersSketchSerialiser</code> <code>ReservoirItemsSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.sampling.serialisation.ReservoirStringsSketchSerialiser</code> <code>ThetaSketch</code> <code>uk.gov.gchq.gaffer.sketches.datasketches.theta.serialisation.SketchSerialiser</code>"},{"location":"reference/properties-guide/advanced/#examples","title":"Examples","text":"<p>This section contains examples for how to use the advanced properties.</p>"},{"location":"reference/properties-guide/advanced/#hyperloglogplus","title":"HyperLogLogPlus","text":"<p>This example demonstrates how the HyperLogLogPlus sketch property from the Clearspring library can be used to maintain an estimate of the degree of a vertex.</p> Example storing an estimate of the degree of a vertex using HyperLogLogPlus <p>Every time an edge A -&gt; B is added to graph, we also add an Entity for A with a property of a HyperLogLogPlus containing B, and an Entity for B with a property of a HyperLogLogPlus containing A. The aggregator for the HyperLogLogPluses merges them together so that after querying for the Entity for vertex X the HyperLogLogPlus property gives us an estimate of the approximate degree.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'approx_cardinality'. This will store the HyperLogLogPlus object.</p> <pre><code>{\n\"entities\": {\n\"cardinality\": {\n\"vertex\": \"vertex.string\",\n\"properties\": {\n\"approxCardinality\": \"hyperloglogplus\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema","title":"Types schema","text":"<p>We have added a new type - 'hyperloglogplus'. This is a <code>com.clearspring.analytics.stream.cardinality.HyperLogLogPlus</code> object. We also added in the serialiser and aggregator for the HyperLogLogPlus object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new entities are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"hyperloglogplus\": {\n\"class\": \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser\"\n}\n}\n}\n}\n</code></pre> <p>Only one entity is in the graph. This was added 1000 times, and each time it had the 'approxCardinality' property containing a vertex that A had been seen in an Edge with. Here is the Entity:</p> <pre><code>Entity[vertex=A,group=cardinality,properties=Properties[approxCardinality=&lt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus&gt;com.clearspring.analytics.stream.cardinality.HyperLogLogPlus@39075f64]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. We can fetch the cardinality for the vertex using the following code:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EntitySeed(\"A\"))\n.build();\nfinal Element element;\ntry (final CloseableIterable&lt;? extends Element&gt; elements = graph.execute(query, user)) {\nelement = elements.iterator().next();\n}\nfinal HyperLogLogPlus hyperLogLogPlus = (HyperLogLogPlus) element.getProperty(\"approxCardinality\");\nfinal double approxDegree = hyperLogLogPlus.cardinality();\nfinal String degreeEstimate = \"Entity A has approximate degree \" + approxDegree;\n</code></pre> <p>The results are as follows. As an Entity was added 1000 times, each time with a different vertex, then we would expect the degree to be approximately 1000.</p> <pre><code>Entity A has approximate degree 1113.0\n</code></pre>"},{"location":"reference/properties-guide/advanced/#hllsketch","title":"HllSketch","text":"<p>This example demonstrates how the HllSketch sketch property from the Datasketches library can be used to maintain an estimate of the degree of a vertex.</p> Example storing an estimate of the degree of a vertex using HllSketch <p>Every time an edge A -&gt; B is added to graph, we also add an Entity for A with a property of a HllSketch containing B, and an Entity for B with a property of a HllSketch containing A. The aggregator for the HllSketches merges them together so that after querying for the Entity for vertex X the HllSketch property would give us an estimate of the approximate degree.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema_1","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'approx_cardinality'. This will store the HllSketch object.</p> <pre><code>{\n\"entities\": {\n\"cardinality\": {\n\"vertex\": \"vertex.string\",\n\"properties\": {\n\"approxCardinality\": \"hllsketch\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_1","title":"Types schema","text":"<p>We have added a new type - 'hllsketch'. This is a <code>com.yahoo.sketches.hll.HllSketch</code> object. We also added in the serialiser and aggregator for the HllSketch object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new entities are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"hllsketch\": {\n\"class\": \"com.yahoo.sketches.hll.HllSketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser\"\n}\n}\n}\n}\n</code></pre> <p>Only one entity is in the graph. This was added 1000 times, and each time it had the 'approxCardinality' property containing a vertex that A had been seen in an Edge with. Here is the Entity:</p> <pre><code>Entity[vertex=A,group=cardinality,properties=Properties[approxCardinality=&lt;com.yahoo.sketches.hll.HllSketch&gt;### HLL SKETCH SUMMARY: \n  Log Config K   : 10\n  Hll Target     : HLL_4\n  Current Mode   : HLL\n  LB             : 986.8136434119266\n  Estimate       : 1018.8398354963819\n  UB             : 1052.991638617674\n  OutOfOrder Flag: true\n  CurMin         : 0\n  NumAtCurMin    : 374\n  HipAccum       : 1045.0654080765041\n  KxQ0           : 562.4995727539062\n  KxQ1           : 0.0\n]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. We can fetch the cardinality for the vertex using the following code:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EntitySeed(\"A\"))\n.build();\nfinal Element element;\ntry (final CloseableIterable&lt;? extends Element&gt; elements = graph.execute(query, user)) {\nelement = elements.iterator().next();\n}\nfinal HllSketch hllSketch = (HllSketch) element.getProperty(\"approxCardinality\");\nfinal double approxDegree = hllSketch.getEstimate();\nfinal String degreeEstimate = \"Entity A has approximate degree \" + approxDegree;\n</code></pre> <p>The results are as follows. As an Entity was added 1000 times, each time with a different vertex, then we would expect the degree to be approximately 1000.</p> <pre><code>Entity A has approximate degree 1018.8398354963819\n</code></pre>"},{"location":"reference/properties-guide/advanced/#longssketch","title":"LongsSketch","text":"<p>This example demonstrates how the LongsSketch sketch property from the Datasketches library can be used to maintain estimates of the frequencies of Longs stored on vertices and edges.</p> Example storing an estimate of frequencies of Longs using LongsSketch <p>For example suppose every time an edge is observed there is a long value associated with it which specifies the size of the interaction. Storing all the different longs on the edge could be expensive in storage. Instead we can use a LongsSketch which will give us approximate counts of the number of times a particular long was observed.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema_2","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'longsSketch'. This will store the LongsSketch object.</p> <pre><code>{\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"longsSketch\": \"longs.sketch\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_2","title":"Types schema","text":"<p>We have added a new type - 'longs.sketch'. This is a <code>com.yahoo.sketches.frequencies.LongsSketch</code> object. We also added in the serialiser and aggregator for the LongsSketch object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new edges are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"longs.sketch\": {\n\"class\": \"com.yahoo.sketches.frequencies.LongsSketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.frequencies.binaryoperator.LongsSketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.frequencies.serialisation.LongsSketchSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>Only one edge is in the graph. This was added 1000 times, and each time it had the 'longs.sketch' property containing a randomly generated long between 0 and 9 (inclusive). The sketch does not retain all the distinct occurrences of these long values, but allows one to estimate the number of occurrences of the different values. Here is the Edge:</p> <pre><code>Edge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[longsSketch=&lt;com.yahoo.sketches.frequencies.LongsSketch&gt;FrequentLongsSketch:\n  Stream Length    : 1000\n  Max Error Offset : 0\nReversePurgeLongHashMap:\n        Index:     States              Values Keys\n            0:          1                 112 0\n            3:          1                  96 6\n            5:          1                  92 4\n            6:          2                 103 5\n            7:          1                  91 2\n            8:          2                  98 8\n            9:          5                  98 9\n            12:          1                 106 1\n            13:          1                  99 7\n            14:          1                 105 3\n]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. To get value from it we need to call methods on the LongsSketch object. Let's get estimates of the frequencies of the values 1 and 9. We can fetch all cardinalities for all the vertices using the following code:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n.build();\nfinal Element edge;\ntry (final CloseableIterable&lt;? extends Element&gt; edges = graph.execute(query, user)) {\nedge = edges.iterator().next();\n}\nfinal LongsSketch longsSketch = (LongsSketch) edge.getProperty(\"longsSketch\");\nfinal String estimates = \"Edge A-B: 1L seen approximately \" + longsSketch.getEstimate(1L)\n+ \" times, 9L seen approximately \" + longsSketch.getEstimate(9L) + \" times.\";\n</code></pre> <p>The results are as follows. As 1000 edges were generated with a long randomly sampled from 0 to 9 then the occurrence of each is approximately 100.</p> <pre><code>Edge A-B: 1L seen approximately 106 times, 9L seen approximately 98 times.\n</code></pre>"},{"location":"reference/properties-guide/advanced/#doublessketch","title":"DoublesSketch","text":"<p>This example demonstrates how the DoublesSketch sketch property from the Datasketches library can be used to maintain estimates of the quantiles of a distribution of Doubles.</p> Example storing an estimate of quantiles of a distribution of Doubles using LongsSketch <p>Suppose that every time an edge is observed, there is a double value associated with it, for example a value between 0 and 1 giving the score of the edge. Instead of storing a property that contains all the doubles observed, we can store a DoublesSketch which will allow us to estimate the median double, the 99th percentile, etc.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema_3","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'doublesSketch'. This will store the DoublesSketch object.</p> <pre><code>{\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"doublesSketch\": \"doubles.sketch\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_3","title":"Types schema","text":"<p>We have added a new type - 'doubles.sketch'. This is a <code>com.yahoo.sketches.quantiles.DoublesSketch</code> object. We also added in the serialiser and aggregator for the DoublesSketch object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new edges are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"doubles.sketch\": {\n\"class\": \"com.yahoo.sketches.quantiles.DoublesSketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.quantiles.binaryoperator.DoublesSketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.quantiles.serialisation.DoublesSketchSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>Here is the Edge:</p> <pre><code>Edge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[doublesSketch=&lt;com.yahoo.sketches.quantiles.DirectUpdateDoublesSketchR&gt;\n### Quantiles DirectUpdateDoublesSketchR SUMMARY: \n  Empty                        : false\n  Direct, Capacity bytes       : true, 4128\n  Estimation Mode              : true\n  K                            : 128\n  N                            : 1,000\n  Levels (Needed, Total, Valid): 2, 2, 2\n  Level Bit Pattern            : 11\n  BaseBufferCount              : 232\n  Combined Buffer Capacity     : 512\n  Retained Items               : 488\n  Compact Storage Bytes        : 3,936\n  Updatable Storage Bytes      : 4,128\n  Normalized Rank Error        : 1.406%\n  Normalized Rank Error (PMF)  : 1.711%\n  Min Value                    : -3.148\n  Max Value                    : 3.112\n### END SKETCH SUMMARY\n]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. To get value from it we need to call methods on the DoublesSketch object. We can get an estimate for the 25th, 50th and 75th percentiles on edge A-B using the following code:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n.build();\nfinal Element edge;\ntry (final CloseableIterable&lt;? extends Element&gt; edges = graph.execute(query, user)) {\nedge = edges.iterator().next();\n}\nfinal DoublesSketch doublesSketch = (DoublesSketch) edge.getProperty(\"doublesSketch\");\nfinal double[] quantiles = doublesSketch.getQuantiles(new double[]{0.25D, 0.5D, 0.75D});\nfinal String quantilesEstimate = \"Edge A-B with percentiles of double property - 25th percentile: \" + quantiles[0]\n+ \", 50th percentile: \" + quantiles[1]\n+ \", 75th percentile: \" + quantiles[2];\n</code></pre> <p>The results are as follows. This means that 25% of all the doubles on edge A-B had value less than -0.66, 50% had value less than -0.01 and 75% had value less than 0.64 (the results of the estimation are not deterministic so there may be small differences between the values below and those just quoted).</p> <pre><code>Edge A-B with percentiles of double property - 25th percentile: -0.6630847714290219, 50th percentile: -0.01745655491115906, 75th percentile: 0.6186156511540916\n</code></pre> <p>We can also get the cumulative density predicate of the distribution of the doubles:</p> <pre><code>final GetElements query2 = new GetElements.Builder()\n.input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n.build();\nfinal Element edge2;\ntry (final CloseableIterable&lt;? extends Element&gt; edges2 = graph.execute(query2, user)) {\nedge2 = edges2.iterator().next();\n}\nfinal DoublesSketch doublesSketch2 = (DoublesSketch) edge2.getProperty(\"doublesSketch\");\nfinal double[] cdf = doublesSketch2.getCDF(new double[]{0.0D, 1.0D, 2.0D});\nfinal String cdfEstimate = \"Edge A-B with CDF values at 0: \" + cdf[0]\n+ \", at 1: \" + cdf[1]\n+ \", at 2: \" + cdf[2];\n</code></pre> <p>The results are:</p> <pre><code>Edge A-B with CDF values at 0: 0.51, at 1: 0.844, at 2: 0.986\n</code></pre>"},{"location":"reference/properties-guide/advanced/#reservoiritemssketch","title":"ReservoirItemsSketch","text":"<p>This example demonstrates how the ReservoirItemsSketch sketch property from the Datasketches library can be used to maintain estimates of properties on vertices and edges. Example storing estimates of properties using ReservoirItemsSketch <p>The ReservoirItemsSketch sketch allows a sample of a set of strings to be maintained. We give two examples of this. The first is if when an edge is observed there is a string property associated to it, and there are a lot of different values of that string. We may not want to store all the different values of the string, but we may want to see a random sample of them. The second example is to store on an Entity a sketch which gives a sample of the vertices that are connected to the vertex. Even if we are storing all the edges then producing a random sample of the vertices attached to a vertex may not be quick (for example if a vertex has degree 10,000 then producing a sample of a random 10 neighbours would require scanning all the edges - storing the sketch on the Entity means that the sample will be precomputed and can be returned without scanning the edges)."},{"location":"reference/properties-guide/advanced/#elements-schema_4","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'stringsSample'. This will store the ReservoirItemsSketch object. The entity has a property called 'neighboursSample'. This will also store a ReservoirItemsSketch object. <pre><code>{\n\"entities\": {\n\"blueEntity\": {\n\"vertex\": \"vertex.string\",\n\"properties\": {\n\"neighboursSample\": \"reservoir.strings.sketch\"\n}\n}\n},\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"stringsSample\": \"reservoir.strings.sketch\"\n}\n},\n\"blue\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\"\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_4","title":"Types schema","text":"<p>We have added a new type - 'reservoir.strings.sketch'. This is a <code>com.yahoo.sketches.sampling.ReservoirItemsSketch</code> object. We also added in the serialiser and aggregator for the ReservoirItemsSketch object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new edges are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"reservoir.strings.sketch\": {\n\"class\": \"com.yahoo.sketches.sampling.ReservoirItemsSketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.sampling.binaryoperator.ReservoirItemsSketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.sampling.serialisation.ReservoirStringsSketchSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>An edge A-B of group \"red\" was added to the graph 1000 times. Each time it had the stringsSample property containing a randomly generated string. Here is the edge: <pre><code>Edge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[stringsSample=&lt;com.yahoo.sketches.sampling.ReservoirItemsSketch&gt;\n### ReservoirItemsSketch SUMMARY: \n  k            : 20\n  n            : 1000\n  Current size : 20\n  Resize factor: X8\n### END SKETCH SUMMARY\n]]\n</code></pre></p> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. To get value from it we need to call a method on the ReservoirItemsSketch object:</p> <pre><code>final GetElements query = new GetElements.Builder()\n.input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n.build();\nfinal Element edge;\ntry (final CloseableIterable&lt;? extends Element&gt; edges = graph.execute(query, user)) {\nedge = edges.iterator().next();\n}\nfinal ReservoirItemsSketch&lt;String&gt; stringsSketch = ((ReservoirItemsSketch&lt;String&gt;) edge.getProperty(\"stringsSample\"));\nfinal String[] samples = stringsSketch.getSamples();\nfinal StringBuilder sb = new StringBuilder(\"10 samples: \");\nfor (int i = 0; i &lt; 10 &amp;&amp; i &lt; samples.length; i++) {\nif (i &gt; 0) {\nsb.append(\", \");\n}\nsb.append(samples[i]);\n}\n</code></pre> <p>The results contain a random sample of the strings added to the edge: <pre><code>10 samples: BGCAJGHCHI, ICHBADBEGE, JBHJAEDCBC, GEFEEDCIFF, BJHCHJDIBG, ECEEICCGJI, GHCIFGFGHH, BIFHFEBADF, GACEICJBFH, GAGJCCDHFB\n</code></pre></p> <p>500 edges of group \"blue\" were also added to the graph (edges X-Y0, X-Y1, ..., X-Y499). For each of these edges, an Entity was created for both the source and destination. Each Entity contained a 'neighboursSample' property that contains the vertex at the other end of the edge. We now get the Entity for the vertex X and display the sample of its neighbours:</p> <pre><code>final GetElements query2 = new GetElements.Builder()\n.input(new EntitySeed(\"X\"))\n.view(new View.Builder()\n.entity(\"blueEntity\")\n.build())\n.build();\nfinal Element entity;\ntry (final CloseableIterable&lt;? extends Element&gt; entities = graph.execute(query2, user)) {\nentity = entities.iterator().next();\n}\nfinal ReservoirItemsSketch&lt;String&gt; neighboursSketch = ((ReservoirItemsSketch&lt;String&gt;) entity.getProperty(\"neighboursSample\"));\nfinal String[] neighboursSample = neighboursSketch.getSamples();\nsb.setLength(0);\nsb.append(\"10 samples: \");\nfor (int i = 0; i &lt; 10 &amp;&amp; i &lt; neighboursSample.length; i++) {\nif (i &gt; 0) {\nsb.append(\", \");\n}\nsb.append(neighboursSample[i]);\n}\n</code></pre> <p>The results are:</p> <pre><code>10 samples: Y315, Y66, Y212, Y109, Y262, Y161, Y296, Y213, Y95, Y174\n</code></pre>"},{"location":"reference/properties-guide/advanced/#thetasketch","title":"ThetaSketch","text":"<p>This example demonstrates how the ThetaSketch (<code>com.yahoo.sketches.theta.Sketch</code>) sketch property from the Datasketches library can be used to maintain estimates of the cardinalities of sets.</p> Example storing estimates of the cardinalities of sets using ThetaSketch <p>This sketch is similar to a HyperLogLogPlusPlus, but it can also be used to estimate the size of the intersections of sets. We give an example of how this can be used to monitor the changes to the number of edges in the graph over time.</p>"},{"location":"reference/properties-guide/advanced/#elements-schema_5","title":"Elements schema","text":"<p>This is our new elements schema. The edge has properties called 'startDate' and 'endDate'. These will be set to the midnight before the time of the occurrence of the edge and to midnight after the time of the occurrence of the edge. There is also a size property which will be a theta Sketch. This property will be aggregated over the 'groupBy' properties of startDate and endDate.</p> <pre><code>{\n\"entities\": {\n\"size\": {\n\"vertex\": \"vertex.string\",\n\"properties\": {\n\"startDate\": \"date.earliest\",\n\"endDate\": \"date.latest\",\n\"size\": \"thetasketch\"\n},\n\"groupBy\": [\n\"startDate\",\n\"endDate\"\n]\n}\n},\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"startDate\": \"date.earliest\",\n\"endDate\": \"date.latest\",\n\"count\": \"long.count\"\n},\n\"groupBy\": [\n\"startDate\",\n\"endDate\"\n]\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/advanced/#types-schema_5","title":"Types schema","text":"<p>We have added a new type - 'thetasketch'. This is a <code>com.yahoo.sketches.theta.Sketch</code> object. We also added in the serialiser and aggregator for the Union object. Gaffer will automatically aggregate these sketches, using the provided aggregator, so they will keep up to date as new edges are added to the graph.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"date.earliest\": {\n\"class\": \"java.util.Date\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n],\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n}\n},\n\"date.latest\": {\n\"class\": \"java.util.Date\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n],\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n},\n\"long.count\": {\n\"class\": \"java.lang.Long\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n},\n\"thetasketch\": {\n\"class\": \"com.yahoo.sketches.theta.Sketch\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.theta.binaryoperator.SketchAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.theta.serialisation.SketchSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>1000 different edges were added to the graph for the day 09/01/2017 (i.e. the startDate was the midnight at the start of the 9th, and the endDate was the midnight at the end of the 9th). For each edge, an Entity was created, with a vertex called \"graph\". This contained a theta Sketch object to which a string consisting of the source and destination was added. 500 edges were added to the graph for the day 10/01/2017. Of these, 250 were the same as edges that had been added in the previous day, but 250 were new. Again, for each edge, an Entity was created for the vertex called \"graph\".</p> <p>Here is the Entity for the different days:</p> <pre><code>Entity[vertex=graph,group=size,properties=Properties[size=&lt;com.yahoo.sketches.theta.DirectCompactOrderedSketch&gt;\n### DirectCompactOrderedSketch SUMMARY: \n  Estimate                : 500.0\n  Upper Bound, 95% conf   : 500.0\n  Lower Bound, 95% conf   : 500.0\n  Theta (double)          : 1.0\n  Theta (long)            : 9223372036854775807\n  Theta (long) hex        : 7fffffffffffffff\n  EstMode?                : false\n  Empty?                  : false\n  Array Size Entries      : 500\n  Retained Entries        : 500\n  Seed Hash               : 93cc\n### END SKETCH SUMMARY\n,endDate=&lt;java.util.Date&gt;Wed Jan 11 00:00:00 GMT 2017,startDate=&lt;java.util.Date&gt;Tue Jan 10 00:00:00 GMT 2017]]\nEntity[vertex=graph,group=size,properties=Properties[size=&lt;com.yahoo.sketches.theta.DirectCompactOrderedSketch&gt;\n### DirectCompactOrderedSketch SUMMARY: \n  Estimate                : 1000.0\n  Upper Bound, 95% conf   : 1000.0\n  Lower Bound, 95% conf   : 1000.0\n  Theta (double)          : 1.0\n  Theta (long)            : 9223372036854775807\n  Theta (long) hex        : 7fffffffffffffff\n  EstMode?                : false\n  Empty?                  : false\n  Array Size Entries      : 1000\n  Retained Entries        : 1000\n  Seed Hash               : 93cc\n### END SKETCH SUMMARY\n,endDate=&lt;java.util.Date&gt;Tue Jan 10 00:00:00 GMT 2017,startDate=&lt;java.util.Date&gt;Mon Jan 09 00:00:00 GMT 2017]]\n</code></pre> <p>This is not very illuminating as this just shows the default <code>toString()</code> method on the sketch. To get value from it we need to call a method on the Sketch object:</p> <pre><code>final GetAllElements getAllEntities2 = new GetAllElements.Builder()\n.view(new View.Builder()\n.entity(\"size\")\n.build())\n.build();\nfinal CloseableIterable&lt;? extends Element&gt; allEntities2 = graph.execute(getAllEntities2, user);\nfinal CloseableIterator&lt;? extends Element&gt; it = allEntities2.iterator();\nfinal Element entityDay1 = it.next();\nfinal Sketch sketchDay1 = ((Sketch) entityDay1.getProperty(\"size\"));\nfinal Element entityDay2 = it.next();\nfinal Sketch sketchDay2 = ((Sketch) entityDay2.getProperty(\"size\"));\nfinal double estimateDay1 = sketchDay1.getEstimate();\nfinal double estimateDay2 = sketchDay2.getEstimate();\n</code></pre> <p>The result is: <pre><code>500.0\n1000.0\n</code></pre></p> <p>Now we can get an estimate for the number of edges in common across the two days:</p> <pre><code>final Intersection intersection = Sketches.setOperationBuilder().buildIntersection();\nintersection.update(sketchDay1);\nintersection.update(sketchDay2);\nfinal double intersectionSizeEstimate = intersection.getResult().getEstimate();\n</code></pre> <p>The result is: <pre><code>250.0\n</code></pre></p> <p>We now get an estimate for the number of edges in total across the two days, by simply aggregating overall the properties:</p> <pre><code>final GetAllElements getAllEntities = new GetAllElements.Builder()\n.view(new View.Builder()\n.entity(\"size\", new ViewElementDefinition.Builder()\n.groupBy() // set the group by properties to 'none'\n.build())\n.build())\n.build();\nfinal Element entity;\ntry (final CloseableIterable&lt;? extends Element&gt; allEntities = graph.execute(getAllEntities, user)) {\nentity = allEntities.iterator().next();\n}\nfinal double unionSizeEstimate = ((Sketch) entity.getProperty(\"size\")).getEstimate();\n</code></pre> <p>The result is:</p> <pre><code>1250.0\n</code></pre>"},{"location":"reference/properties-guide/basic/","title":"Basic Properties","text":"<p>Gaffer supports the storage of some common Java objects as properties on entities and edges. Serialisers for these will automatically be added to your schema when you create a graph using a schema that uses these properties.</p> <p>The standard basic properties are built-in classes from Java. They do not require their serialisers to be specified in a schema.</p> <ul> <li><code>String</code></li> <li><code>Integer</code></li> <li><code>Long</code></li> <li><code>Float</code></li> <li><code>Double</code></li> <li><code>Byte[]</code></li> <li><code>Boolean</code></li> <li><code>Date</code></li> </ul>"},{"location":"reference/properties-guide/basic/#predicate-support","title":"Predicate Support","text":"<p>Basic properties all support these predicates:</p> <ul> <li><code>And</code></li> <li><code>Or</code></li> <li><code>Not</code></li> <li><code>If</code></li> <li><code>Exists</code></li> <li><code>IsA</code></li> <li><code>IsIn</code></li> <li><code>IsEqual</code></li> <li><code>PropertiesFilter</code></li> </ul> <p>Some properties also support other specialised predicates as shown in the table below. For more information on predicates, see the predicates guide.</p> Predicate <code>String</code> <code>Integer</code> <code>Long</code> <code>Float</code> <code>Double</code> <code>Byte[]</code> <code>Boolean</code> <code>Date</code> <code>InRange</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>InTimeRange</code> \u2705 <code>InDateRange</code> \u2705 <code>IsFalse</code> \u2705 <code>IsTrue</code> \u2705 <code>IsLongerThan</code> \u2705 \u2705 <code>IsShorterThan</code> \u2705 \u2705 <code>MultiRegex</code> \u2705 <code>Regex</code> \u2705 <code>StringContains</code> \u2705 <code>AgeOff</code> \u2705"},{"location":"reference/properties-guide/basic/#aggregator-support","title":"Aggregator Support","text":"<p>Aggregators are also called binary operators. The <code>First</code> and <code>Last</code> binary operators are supported by all basic properties.</p> <p>Other operators are supported as shown in the table below. For more information on aggregators, see the binary operators guide.</p> Aggregator <code>String</code> <code>Integer</code> <code>Long</code> <code>Float</code> <code>Double</code> <code>Byte[]</code> <code>Boolean</code> <code>Date</code> <code>Max</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>Min</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 <code>StringConcat</code> \u2705 <code>StringDeduplicateConcat</code> \u2705 <code>Product</code> \u2705 \u2705 \u2705 \u2705 <code>Sum</code> \u2705 \u2705 \u2705 \u2705 <code>And</code> \u2705 <code>Or</code> \u2705"},{"location":"reference/properties-guide/basic/#serialiser-support","title":"Serialiser Support","text":"<p>All properties support the <code>NullSerialiser</code>.</p> <p>The type of serialiser used for basic properties is automatically selected by Gaffer, based on the type of Gaffer store used. Specifying the exact serialiser to use is therefore optional.</p> <p>For <code>String</code> there is a <code>StringSerialiser</code> and a <code>StringToStringSerialiser</code>.</p> <p>The <code>Integer</code> and <code>Long</code> properties both have 'Ordered' and 'CompactRaw' serialisers (e.g. <code>OrderedIntegerSerialiser</code> &amp; <code>CompactRawIntegerSerialiser</code>). The <code>Float</code> and <code>Double</code> properties only have a single 'Ordered' serialiser each.</p> <p>The <code>Byte[]</code> and <code>Boolean</code> properties each have a specialised serialiser.</p>"},{"location":"reference/properties-guide/map-set/","title":"Map &amp; Set Properties","text":"<p>Gaffer supports the storage of some Java Map and Set objects as properties on entities and edges. Serialisers for these will automatically be added to your schema when you create a graph using a schema that uses these properties.</p> <p>There are also some more advanced properties which allow sets of timestamps to be stored on entities and edges - these do require their serialisers to be specified in a schema. More information on these are given in a dedicated section below.</p>"},{"location":"reference/properties-guide/map-set/#class-list","title":"Class List","text":"Property Full Class <code>HashMap</code> <code>java.util.HashMap</code> <code>TreeSet</code> <code>java.util.TreeSet</code> <code>FreqMap</code> <code>uk.gov.gchq.gaffer.types.FreqMap</code> <code>BoundedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.BoundedTimestampSet</code> <code>RBMBackedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.RBMBackedTimestampSet</code>"},{"location":"reference/properties-guide/map-set/#predicate-support","title":"Predicate Support","text":"<p>The properties above all support these predicates:</p> <ul> <li><code>And</code></li> <li><code>Or</code></li> <li><code>Not</code></li> <li><code>If</code></li> <li><code>Exists</code></li> <li><code>IsA</code></li> <li><code>IsIn</code></li> <li><code>IsEqual</code></li> <li><code>PropertiesFilter</code></li> </ul> <p>The FreqMap and HashMap properties also support these predicates:</p> <ul> <li><code>IsLongerThan</code></li> <li><code>IsShorterThan</code></li> <li><code>MapContains</code></li> <li><code>MapContainsPredicate</code></li> <li><code>PredicateMap</code></li> </ul> <p>The TreeSet property additionally supports these predicates:</p> <ul> <li><code>IsLongerThan</code></li> <li><code>IsShorterThan</code></li> <li><code>CollectionContains</code></li> <li><code>AreIn</code></li> </ul> <p>The RBMBackedTimestampSet property has a specilaised predicate <code>uk.gov.gchq.gaffer.time.predicate.RBMBackedTimestampSetInRange</code>.</p>"},{"location":"reference/properties-guide/map-set/#aggregator-support","title":"Aggregator Support","text":"<p>The <code>First</code> and <code>Last</code> binary operators are supported by all advanced properties. FreqMap and HashMap also both support the <code>BinaryOperatorMap</code> binary operator.</p> <p>Some of the other properties have (one or more of) their own specialised aggregator(s):</p> Property Binary Operator <code>FreqMap</code> <code>uk.gov.gchq.gaffer.types.function.FreqMapAggregator</code> <code>TreeSet</code> <code>CollectionConcat</code> <code>TreeSet</code> <code>CollectionIntersect</code> <code>BoundedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.binaryoperator.BoundedTimestampSetAggregator</code> <code>RBMBackedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.binaryoperator.RBMBackedTimestampSetAggregator</code>"},{"location":"reference/properties-guide/map-set/#serialiser-support","title":"Serialiser Support","text":"<p>All advanced properties support the <code>NullSerialiser</code>. FreqMap and HashMap also both support the <code>MapSerialiser</code> serialiser.</p> <p>Some of the other properties have (one or more of) their own specialised serialiser(s):</p> Property Serialiser <code>FreqMap</code> <code>uk.gov.gchq.gaffer.serialisation.FreqMapSerialiser</code> <code>TreeSet</code> <code>uk.gov.gchq.gaffer.serialisation.implementation.SetSerialiser</code> <code>TreeSet</code> <code>uk.gov.gchq.gaffer.serialisation.implementation.TreeSetStringSerialiser</code> <code>BoundedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.serialisation.BoundedTimestampSetSerialiser</code> <code>RBMBackedTimestampSet</code> <code>uk.gov.gchq.gaffer.time.serialisation.RBMBackedTimestampSetSerialiser</code>"},{"location":"reference/properties-guide/map-set/#timestamp-properties","title":"Timestamp Properties","text":"<p>There are two timestamp properties:</p> <ul> <li>RBMBackedTimestampSet: When this is created, a TimeBucket is specified, e.g. minute. When a timestamp is added, it is truncated to the nearest start of a bucket (e.g. if the bucket is a minute then the seconds are removed) and then added to the set. Internally the timestamps are stored in a Roaring Bitmap.</li> <li>BoundedTimestampSet: This is similar to the above set, except that when it is created a maximum size is specified. If the set grows beyond the maximum size, then a random sample of the timestamps of that size is created. This is useful to avoid the size of the set for entities or edges that are very busy growing too large. By retaining a sample, we maintain an indication of when the entity or edge was active, without retaining all the information. The sample is implemented using a ReservoirLongsUnion from the Datasketches library.</li> </ul>"},{"location":"reference/properties-guide/map-set/#rbmbackedtimestampset-example","title":"RBMBackedTimestampSet Example","text":"<p>This example demonstrates how the RBMBackedTimestampSet property can be used to maintain a set of the timestamps at which an element was seen active.</p> Example a set of the timestamps using RBMBackedTimestampSet <p>In this example we record the timestamps to minute level accuracy, i.e. the seconds are ignored.</p>"},{"location":"reference/properties-guide/map-set/#elements-schema","title":"Elements schema","text":"<p>This is our new elements schema. The edge has a property called 'timestampSet'. This will store the RBMBackedTimestampSet object.</p> <pre><code>{\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"timestampSet\": \"timestamp.set\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/map-set/#types-schema","title":"Types schema","text":"<p>We have added a new type - 'timestamp.set'. This is a <code>uk.gov.gchq.gaffer.time.RBMBackedTimestampSet</code> object. We also added in the serialiser and aggregator for the RBMBackedTimestampSet object. Gaffer will automatically aggregate these sets together to maintain a set of all the times the element was active.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"timestamp.set\": {\n\"class\": \"uk.gov.gchq.gaffer.time.RBMBackedTimestampSet\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.time.binaryoperator.RBMBackedTimestampSetAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.time.serialisation.RBMBackedTimestampSetSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>Only one edge is in the graph. This was added 25 times, and each time it had the 'timestampSet' property containing a randomly generated timestamp from 2017. Here is the Edge:</p> <pre><code>Edge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[timestampSet=&lt;uk.gov.gchq.gaffer.time.RBMBackedTimestampSet&gt;RBMBackedTimestampSet[timeBucket=MINUTE,timestamps=2017-01-08T07:29:00Z,2017-01-18T10:41:00Z,2017-01-19T01:36:00Z,2017-01-31T16:16:00Z,2017-02-02T08:06:00Z,2017-02-12T14:21:00Z,2017-02-15T22:01:00Z,2017-03-06T09:03:00Z,2017-03-21T18:09:00Z,2017-05-08T15:34:00Z,2017-05-10T19:39:00Z,2017-05-16T10:44:00Z,2017-05-23T10:02:00Z,2017-05-28T01:52:00Z,2017-06-24T23:50:00Z,2017-07-27T09:34:00Z,2017-08-05T02:11:00Z,2017-09-07T07:35:00Z,2017-10-01T12:52:00Z,2017-10-23T22:02:00Z,2017-10-27T04:12:00Z,2017-11-01T02:45:00Z,2017-12-11T16:38:00Z,2017-12-22T14:40:00Z,2017-12-24T08:00:00Z]]]\n</code></pre> <p>You can see the list of timestamps on the edge. We can also get just the earliest, latest and total number of timestamps using methods on the TimestampSet object to get the following results:</p> <pre><code>Edge A-B was first seen at 2017-01-08T07:29:00Z, last seen at 2017-12-24T08:00:00Z, and there were 25 timestamps it was active.\n</code></pre>"},{"location":"reference/properties-guide/map-set/#boundedtimestampset-example","title":"BoundedTimestampSet Example","text":"<p>This example demonstrates how the BoundedTimestampSet property can be used to maintain a set of the timestamps at which an element was seen active.</p> Example a set of the timestamps using BoundedTimestampSet <p>If this set becomes larger than a size specified by the user then a uniform random sample of the timestamps is maintained. In this example we record the timestamps to minute level accuracy, i.e. the seconds are ignored, and specify that at most 25 timestamps should be retained.</p>"},{"location":"reference/properties-guide/map-set/#elements-schema_1","title":"Elements schema","text":"<p>This is our new schema. The edge has a property called 'boundedTimestampSet'. This will store the BoundedTimestampSet object.</p> <pre><code>{\n\"edges\": {\n\"red\": {\n\"source\": \"vertex.string\",\n\"destination\": \"vertex.string\",\n\"directed\": \"false\",\n\"properties\": {\n\"boundedTimestampSet\": \"bounded.timestamp.set\"\n}\n}\n}\n}\n</code></pre>"},{"location":"reference/properties-guide/map-set/#types-schema_1","title":"Types schema","text":"<p>We have added a new type - 'bounded.timestamp.set'. This is a <code>uk.gov.gchq.gaffer.time.BoundedTimestampSet</code> object. We have added in the serialiser and aggregator for the BoundedTimestampSet object. Gaffer will automatically aggregate these sets together to maintain a set of all the times the element was active. Once the size of the set becomes larger than 25 then a uniform random sample of size at most 25 of the timestamps is maintained.</p> <pre><code>{\n\"types\": {\n\"vertex.string\": {\n\"class\": \"java.lang.String\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n}\n]\n},\n\"bounded.timestamp.set\": {\n\"class\": \"uk.gov.gchq.gaffer.time.BoundedTimestampSet\",\n\"aggregateFunction\": {\n\"class\": \"uk.gov.gchq.gaffer.time.binaryoperator.BoundedTimestampSetAggregator\"\n},\n\"serialiser\": {\n\"class\": \"uk.gov.gchq.gaffer.time.serialisation.BoundedTimestampSetSerialiser\"\n}\n},\n\"false\": {\n\"class\": \"java.lang.Boolean\",\n\"validateFunctions\": [\n{\n\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n}\n]\n}\n}\n}\n</code></pre> <p>There are two edges in the graph. Edge A-B was added 3 times, and each time it had the 'boundedTimestampSet' property containing a randomly generated timestamp from 2017. Edge A-C was added 1000 times, and each time it also had the 'boundedTimestampSet' property containing a randomly generated timestamp from 2017. Here are the edges:</p> <pre><code>Edge[source=A,destination=C,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[boundedTimestampSet=&lt;uk.gov.gchq.gaffer.time.BoundedTimestampSet&gt;BoundedTimestampSet[timeBucket=MINUTE,state=SAMPLE,maxSize=25,timestamps=2017-01-01T15:49:00Z,2017-01-19T19:48:00Z,2017-02-02T08:42:00Z,2017-02-11T00:54:00Z,2017-04-02T17:27:00Z,2017-04-07T06:12:00Z,2017-04-23T02:28:00Z,2017-05-19T13:54:00Z,2017-05-25T04:20:00Z,2017-05-28T01:52:00Z,2017-05-28T23:07:00Z,2017-06-11T00:02:00Z,2017-06-13T16:47:00Z,2017-06-16T14:14:00Z,2017-06-17T21:39:00Z,2017-06-25T15:48:00Z,2017-06-26T02:46:00Z,2017-07-15T14:55:00Z,2017-07-15T19:58:00Z,2017-08-15T16:34:00Z,2017-08-16T08:39:00Z,2017-09-05T02:05:00Z,2017-12-09T13:55:00Z,2017-12-22T12:40:00Z,2017-12-24T11:12:00Z]]]\nEdge[source=A,destination=B,directed=false,matchedVertex=SOURCE,group=red,properties=Properties[boundedTimestampSet=&lt;uk.gov.gchq.gaffer.time.BoundedTimestampSet&gt;BoundedTimestampSet[timeBucket=MINUTE,state=NOT_FULL,maxSize=25,timestamps=2017-02-12T14:21:00Z,2017-03-21T18:09:00Z,2017-12-24T08:00:00Z]]]\n</code></pre> <p>You can see that edge A-B has the full list of timestamps on the edge, but edge A-C has a sample of the timestamps.</p>"},{"location":"reference/properties-guide/properties/","title":"Properties Guide","text":"<p>Gaffer allows properties to be stored on Entities and Edges. As well as simple properties, such as a String or Integer, Gaffer allows rich properties such as sketches and sets of timestamps to be stored on Elements. Gaffer's ability to continuously aggregate properties on elements allows interesting, dynamic data structures to be stored within the graph. Examples include storing a <code>HyperLogLog</code> sketch on an Entity to give a very quick estimate of the degree of a node or storing a uniform random sample of the timestamps that an edge was seen active.</p> <p>Gaffer allows any Java object to be used as a property. If the property is not natively supported by Gaffer, then you will need to provide a serialiser, and possibly an aggregator.</p> <p>The properties that Gaffer natively supports can be divided into three categories:</p> <ul> <li>Standard basic Java properties</li> <li>Type properties - A special variant of String</li> <li>Advanced properties - These are sketches from the clearspring and datasketches libraries</li> <li>Sets and Maps - Including specialised sets for timestamps</li> </ul> <p>This documentation provides reference information detailing the predicates, aggregators (binary operators) and serialisers supported for Gaffer properties. It also provides some examples of how to use the more advanced types of property.</p>"},{"location":"reference/properties-guide/type/","title":"Type Properties","text":"<p>The <code>TypeValue</code> (Javadoc) and <code>TypeSubTypeValue</code> (Javadoc) are special properties which are similar to <code>String</code>, but also store a secondary string ('type') or secondary and tertiary strings ('type' &amp; 'subtype').</p>"},{"location":"reference/properties-guide/type/#predicate-support","title":"Predicate Support","text":"<p>Both type properties support these predicates:</p> <ul> <li><code>And</code></li> <li><code>Or</code></li> <li><code>Not</code></li> <li><code>If</code></li> <li><code>Exists</code></li> <li><code>IsA</code></li> <li><code>IsIn</code></li> <li><code>IsEqual</code></li> <li><code>PropertiesFilter</code></li> <li><code>InRange</code></li> </ul>"},{"location":"reference/properties-guide/type/#aggregator-support","title":"Aggregator Support","text":"<p>The <code>First</code>, <code>Last</code>, <code>Min</code> and <code>Max</code> binary operators are supported by both type properties.</p>"},{"location":"reference/properties-guide/type/#serialiser-support","title":"Serialiser Support","text":"<p>Both type properties support the <code>NullSerialiser</code> and have their own specialised serialisers, <code>TypeValueSerialiser</code> and <code>TypeSubTypeValueSerialiser</code>.</p>"}]}